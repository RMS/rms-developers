{
  "openapi": "3.0.1",
  "info": {
    "title": "Riskdata",
    "description": "This document provides API specifications of the Riskdata",
    "version": "Cairo, 2022"
  },
  "x-readme": {
    "explorer-enabled": false,
    "samples-languages": ["curl", "java", "csharp", "node", "python"],
    "proxy-enabled": true,
    "samples-enabled": true
  },
  "servers": [
    {
      "url": "https://{host}/riskdata/v1",
      "variables": {
        "host": {
          "enum": ["api-euw1.rms.com", "api-use1.rms.com"],
          "default": "api-euw1.rms.com",
          "description": "Data center that hosts the tenant instance: api-euw1.rms.com or api-use1.rms.com."
        }
      }
    }
  ],
  "security": [
    {
      "rms_api_key": []
    },
    {
      "rms_bearer_token": []
    }
  ],
  "paths": {
    "/jobs": {
      "get": {
        "tags": ["Riskdata Jobs"],
        "summary": "Retrieve and filter a list of jobs",
        "operationId": "riskdata-v1-get-jobs",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filters applied to the query results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include-input",
            "in": "query",
            "required": false,
            "description": "returns the input node wih supplied settings and or data if set as true",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/JobSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/jobs/{jobId}": {
      "get": {
        "tags": ["Riskdata Jobs"],
        "summary": "Retrieve a job using its unique id",
        "operationId": "riskdata-v1-get-jobs-jobid",
        "parameters": [
          {
            "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/parameters/JobIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/Job"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Riskdata Jobs"],
        "summary": "Update riskdata job",
        "operationId": "riskdata-v1-patch-jobs-cancel",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Uniquely identifies the job",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "Set of operations to perform against the Job Entity",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": ["CANCELED"]
                  },
                  "priority": {
                    "type": "string",
                    "enum": ["High", "Medium", "Low"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity: The job is in unprocessable state",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: The server has encountered a situation it does not know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/programSets": {
      "post": {
        "tags": ["ProgramSets"],
        "summary": "Create Program Set",
        "operationId": "createProgramSet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/NewProgramSet"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Program Set is created",
            "headers": {
              "Location": {
                "description": "Resource Location",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["ProgramSets"],
        "summary": "Get ProgramSets",
        "operationId": "searchProgramSets",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filters applied to the query results using condition types as shown. **Relational : (result field name) (relational operator) (value)** eg. id=100 , id!=100 , id>100 | **Boolean : (condition) (boolean operator) (condition)** eg. id=100 AND name=\"xyz\" , id=100 OR type=\"abc\" | **In List : (result field name) (IN / NOT IN) (values list)** eg. id IN (1,2,3) , name NOT IN (\"abc\",\"xyz\") | **Matching : (result field name) (LIKE / NOT LIKE) (pattern)** eg. name LIKE \"abc* \" , type NOT LIKE \"* xyz* \"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at '0'.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ProgramSetSearchResult"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/programSets/{programSetId}": {
      "patch": {
        "tags": ["ProgramSets"],
        "summary": "Update Program Set",
        "operationId": "updateProgramSet",
        "parameters": [
          {
            "name": "programSetId",
            "in": "path",
            "description": "ID for Program Set to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/PatchGenericRequest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["ProgramSets"],
        "summary": "Get Program Set by Id",
        "operationId": "GetProgramSets",
        "parameters": [
          {
            "name": "programSetId",
            "in": "path",
            "description": "ID for Program Set to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ProgramSet"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["ProgramSets"],
        "summary": "Delete Program Set by Id",
        "operationId": "DeleteProgramSetById",
        "parameters": [
          {
            "name": "programSetId",
            "in": "path",
            "description": "ID for Program Set to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/programSets/{programSetId}/programs": {
      "post": {
        "tags": ["Programs"],
        "summary": "Create Program",
        "operationId": "createProgram",
        "parameters": [
          {
            "name": "programSetId",
            "in": "path",
            "description": "ID for Program Set to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/NewProgram"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Program is created",
            "headers": {
              "Location": {
                "description": "Resource Location",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/programs": {
      "get": {
        "tags": ["Programs"],
        "summary": "Get Programs",
        "operationId": "getprograms",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `filter=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `filter=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `filter=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `filter=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by a space with`ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string",
              "default": "ASC"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/FilteredPrograms"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/programs/{programId}": {
      "get": {
        "tags": ["Programs"],
        "summary": "Get Program by Id",
        "operationId": "getProgramById",
        "parameters": [
          {
            "name": "programId",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/Program"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Programs"],
        "summary": "Update Program",
        "operationId": "updateProgram",
        "parameters": [
          {
            "name": "programId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/PatchGenericRequest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Programs"],
        "summary": "Delete Program",
        "operationId": "deleteprogram",
        "parameters": [
          {
            "name": "programId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/programSets/{programSetId}/variations": {
      "get": {
        "tags": ["Program Variations"],
        "summary": "Get Program Variations",
        "operationId": "getprogramVariations",
        "parameters": [
          {
            "name": "programSetId",
            "in": "path",
            "description": "ID for ExposureSetto update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `filter=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `filter=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `filter=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `filter=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by a space with`ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string",
              "default": "datasourceName ASC"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/FilteredPrograms"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/programSets/{programSetId}/variations/{variationId}": {
      "get": {
        "tags": ["Program Variations"],
        "summary": "Get Program Variation by Id",
        "operationId": "getProgramVariationById",
        "parameters": [
          {
            "name": "programSetId",
            "in": "path",
            "description": "ID for ExposureSetto update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variationId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/Program"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/businessHierarchysets": {
      "post": {
        "tags": ["BusinessHierarchysets"],
        "summary": "Create BusinessHierarchy Set",
        "operationId": "createBusinessHierarchySet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "BusinessHierarchy Set is created",
            "headers": {
              "Location": {
                "description": "Resource Location",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["BusinessHierarchysets"],
        "summary": "Get BusinessHierarchysets",
        "operationId": "searchBusinessHierarchysets",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filters applied to the query results using condition types as shown. **Relational : (result field name) (relational operator) (value)** eg. id=100 , id!=100 , id>100 | **Boolean : (condition) (boolean operator) (condition)** eg. id=100 AND name=\"xyz\" , id=100 OR type=\"abc\" | **In List : (result field name) (IN / NOT IN) (values list)** eg. id IN (1,2,3) , name NOT IN (\"abc\",\"xyz\") | **Matching : (result field name) (LIKE / NOT LIKE) (pattern)** eg. name LIKE \"abc* \" , type NOT LIKE \"* xyz* \"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at '0'.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/businessHierarchysets/{businessHierarchySetId}": {
      "patch": {
        "tags": ["BusinessHierarchysets"],
        "summary": "Update BusinessHierarchy Set",
        "operationId": "updateBusinessHierarchySet",
        "parameters": [
          {
            "name": "businessHierarchySetId",
            "in": "path",
            "description": "ID for BusinessHierarchy Set to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/PatchGenericRequest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["BusinessHierarchysets"],
        "summary": "Get BusinessHierarchy Set by Id",
        "operationId": "GetBusinessHierarchysets",
        "parameters": [
          {
            "name": "businessHierarchySetId",
            "in": "path",
            "description": "ID for BusinessHierarchy Set to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["BusinessHierarchysets"],
        "summary": "Delete BusinessHierarchy Set by Id",
        "operationId": "DeleteBusinessHierarchysetById",
        "parameters": [
          {
            "name": "businessHierarchySetId",
            "in": "path",
            "description": "ID for BusinessHierarchy Set to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/businessHierarchysets/{businessHierarchySetId}/businessHierarchies": {
      "post": {
        "tags": ["BusinessHierarchies"],
        "summary": "Create BusinessHierarchy",
        "operationId": "createBusinessHierarchy",
        "parameters": [
          {
            "name": "businessHierarchySetId",
            "in": "path",
            "description": "ID for BusinessHierarchy Set to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "BusinessHierarchy is created",
            "headers": {
              "Location": {
                "description": "Resource Location",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/businessHierarchies": {
      "get": {
        "tags": ["BusinessHierarchies"],
        "summary": "Get BusinessHierarchies",
        "operationId": "getbusinesshierarchies",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `filter=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `filter=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `filter=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `filter=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by a space with`ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string",
              "default": "ASC"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/businessHierarchies/{businesshierarchyId}": {
      "get": {
        "tags": ["BusinessHierarchies"],
        "summary": "Get BusinessHierarchy by Id",
        "operationId": "getBusinessHierarchyById",
        "parameters": [
          {
            "name": "businesshierarchyId",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["BusinessHierarchies"],
        "summary": "Update BusinessHierarchy",
        "operationId": "updateBusinessHierarchy",
        "parameters": [
          {
            "name": "businesshierarchyId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/PatchGenericRequest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["BusinessHierarchies"],
        "summary": "Delete BusinessHierarchy",
        "operationId": "deletebusinesshierarchy",
        "parameters": [
          {
            "name": "businesshierarchyId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/businessHierarchysets/{businessHierarchySetId}/variations": {
      "get": {
        "tags": ["BusinessHierarchy Variations"],
        "summary": "Get BusinessHierarchy Variations",
        "operationId": "getbusinesshierarchyVariations",
        "parameters": [
          {
            "name": "businessHierarchySetId",
            "in": "path",
            "description": "ID for ExposureSetto update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `filter=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `filter=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `filter=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `filter=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by a space with`ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string",
              "default": "datasourceName ASC"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/businessHierarchysets/{businessHierarchySetId}/variations/{variationId}": {
      "get": {
        "tags": ["BusinessHierarchy Variations"],
        "summary": "Get BusinessHierarchy Variation by Id",
        "operationId": "getBusinessHierarchyVariationById",
        "parameters": [
          {
            "name": "businessHierarchySetId",
            "in": "path",
            "description": "ID for ExposureSetto update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variationId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposureSets": {
      "post": {
        "tags": ["ExposureSets"],
        "summary": "Create Exposure Set",
        "operationId": "createExposureSet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/NewExposureSet"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Exposure Set is created",
            "headers": {
              "Location": {
                "description": "Resource Location",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["ExposureSets"],
        "summary": "Get ExposureSets",
        "operationId": "searchExposureSets",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filters applied to the query results using condition types as shown. **Relational : (result field name) (relational operator) (value)** eg. id=100 , id!=100 , id>100 | **Boolean : (condition) (boolean operator) (condition)** eg. id=100 AND name=\"xyz\" , id=100 OR type=\"abc\" | **In List : (result field name) (IN / NOT IN) (values list)** eg. id IN (1,2,3) , name NOT IN (\"abc\",\"xyz\") | **Matching : (result field name) (LIKE / NOT LIKE) (pattern)** eg. name LIKE \"abc* \" , type NOT LIKE \"* xyz* \"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at '0'.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ExposureSetsearchResult"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposureSets/{exposureSetId}": {
      "patch": {
        "tags": ["ExposureSets"],
        "summary": "Update Exposure Set",
        "operationId": "updateExposureSet",
        "parameters": [
          {
            "name": "exposureSetId",
            "in": "path",
            "description": "ID for Exposure Set to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/PatchSecurableSetGroup"
                    },
                    {
                      "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/PatchExposureSetSingleValue"
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["ExposureSets"],
        "summary": "Get Exposure Set by Id",
        "operationId": "GetExposureSets",
        "parameters": [
          {
            "name": "exposureSetId",
            "in": "path",
            "description": "ID for Exposure Set to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ExposureSet"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["ExposureSets"],
        "summary": "Delete Exposure Set by Id",
        "operationId": "DeleteExposureSetById",
        "parameters": [
          {
            "name": "exposureSetId",
            "in": "path",
            "description": "ID for Exposure Set to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ExposureSet"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposureSets/{exposureSetId}/exposures": {
      "post": {
        "tags": ["Exposures"],
        "summary": "Create Exposure / EDM",
        "operationId": "dbOperationsv2",
        "parameters": [
          {
            "name": "exposureSetId",
            "in": "path",
            "description": "ID for ExposureSetto update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "serverId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Location": {
                "description": "url containing identifier of the submitted workflow.",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures": {
      "get": {
        "tags": ["Exposures"],
        "summary": "Get Exposures / EDMs",
        "operationId": "searchEdmsV2",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `filter=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `filter=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `filter=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `filter=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by a space with`ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string",
              "default": "datasourceName ASC"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ExposureSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}": {
      "get": {
        "tags": ["Exposures"],
        "summary": "Get Exposure / EDM by ID",
        "operationId": "searchEdmsV2ById",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/Exposure"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Exposures"],
        "summary": "Update Exposure",
        "operationId": "patchEdm_1",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/PatchExposure"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Exposures"],
        "summary": "Delete Exposure",
        "operationId": "deleteEdm_1",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposureVariations": {
      "get": {
        "tags": ["ExposureVariations"],
        "summary": "Get Exposure Variations",
        "operationId": "searchExposureVariations",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `filter=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `filter=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `filter=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `filter=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by a space with`ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string",
              "default": "datasourceName ASC"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ExposureVariation"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposureVariations/{variationId}": {
      "get": {
        "tags": ["ExposureVariations"],
        "summary": "Get Exposure Variation by ID",
        "operationId": "getExposureVariationsById",
        "parameters": [
          {
            "name": "variationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `filter=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `filter=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `filter=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `filter=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by a space with`ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string",
              "default": "datasourceName ASC"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ExposureVariation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/portfolios": {
      "get": {
        "tags": ["Portfolios"],
        "summary": "Get portfolios",
        "operationId": "searchPortfoliosv2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `filter=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `filter=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `filter=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `filter=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by a space with`ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/PortfolioSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Portfolios"],
        "summary": "Create portfolio",
        "operationId": "createPortfoliov2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/NewPortfolio"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Portfolio created.",
            "headers": {
              "Location": {
                "description": "Portfolio resource",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/portfolios/{id}": {
      "get": {
        "tags": ["Portfolios"],
        "summary": "Get portfolio",
        "operationId": "getPortfoliov2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the portfolio.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/Portfolio"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Portfolios"],
        "summary": "Update portfolio",
        "operationId": "updatePortfoliov2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the portfolio.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/PatchPortfolio"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Portfolios"],
        "summary": "Delete portfolio",
        "operationId": "deletePortfoliov2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the portfolio.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "deleteType",
            "in": "query",
            "description": "The scope of the data deleted: `PORTFOLIO_INFO`, `PORTFOLIO_ALL_ACCOUNTS`, or `PORTFOLIO_EXCEPT_ACCOUNTS`",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "PORTFOLIO_INFO",
                "PORTFOLIO_ALL_ACCOUNTS",
                "PORTFOLIO_EXCEPT_ACCOUNTS"
              ]
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Location": {
                "description": "url containing identifier of the submitted workflow.",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/portfolios/{id}/metrics": {
      "get": {
        "tags": ["Portfolios"],
        "summary": "Get metrics by portfolio",
        "operationId": "getPortfolioMetricsv2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the portfolio.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/PortfolioMetrics"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/portfolios/{id}/filteredaccounts": {
      "put": {
        "tags": ["Portfolios"],
        "summary": "Manage filtered accounts by portfolio",
        "operationId": "manageFilteredAccountsv2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the portfolio.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/PortfolioFilteredAccountsInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/portfolios/{id}/accounts": {
      "get": {
        "tags": ["Portfolios"],
        "summary": "Get accounts by portfolio",
        "operationId": "searchPortfolioAccountsv2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the portfolio.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `filter=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `filter=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `filter=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `filter=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by a space with`ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/AccountSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Portfolios"],
        "summary": "Manage accounts by portfolio",
        "operationId": "managePortfolioAccountsv2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the portfolio.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/PortfolioAccountsInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/accounts": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Get accounts",
        "operationId": "searchAccountsv2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `filter=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `filter=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `filter=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `filter=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by a space with`ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/AccountSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Accounts"],
        "summary": "Create account",
        "operationId": "createAccounts",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/Account"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Account created.",
            "headers": {
              "Location": {
                "description": "Account resource",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/accounts/{id}": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Get account",
        "operationId": "getAccounts",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the account.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Accounts"],
        "summary": "Update account",
        "operationId": "updateAccounts",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the account.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/Account"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Accounts"],
        "summary": "Delete account",
        "operationId": "deleteAccounts",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the account.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Location": {
                "description": "workflowId",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/accounts/{id}/validatemedia": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Get validation file by account",
        "operationId": "downloadValidationAccountFilev2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the account.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/accounts/{id}/metrics": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Get metrics by account",
        "operationId": "getAccountMetricsv2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the account.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/AccountMetrics"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/accounts/{id}/countries": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Get countries by account",
        "operationId": "getCountriesByAccounts",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the account.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/CountryMetrics"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/accounts/{id}/surplustreatieslocation": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Get location level surplus treaties for  account",
        "operationId": "getLocationSurplusTreatiesv2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the account.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/Treaty"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/accounts/{id}/sites": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Get site names for  account",
        "operationId": "getSiteNamesv2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the account.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/accounts/{id}/validate": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Validate account",
        "operationId": "validateAccounts",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the account.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LocationConditionValidationInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/locationcondition/batch": {
      "post": {
        "tags": ["Locations"],
        "summary": "Manage location conditions in batch",
        "operationId": "batchProcessLocationConditions",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/BatchRequest"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Batch successfully initiated",
            "headers": {
              "Location": {
                "description": "Location of the locationcondition/batch",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/buildingattribute": {
      "post": {
        "tags": ["Locations"],
        "summary": "Create building attribute",
        "operationId": "createBuildingAttribute",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/BuildingAttribute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Building attribute successfully created",
            "headers": {
              "Location": {
                "description": "Location of the new building attribute",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations": {
      "get": {
        "tags": ["Locations"],
        "summary": "Get locations",
        "operationId": "searchLocations",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `filter=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `filter=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `filter=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `filter=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "withflzone",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LocationSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Locations"],
        "summary": "Create location",
        "operationId": "createLocation",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/Location"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created. New location is successfully created.",
            "headers": {
              "Location": {
                "description": "URL for the new location",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/locationbidetail": {
      "post": {
        "tags": ["Locations"],
        "summary": "Create BI peril",
        "operationId": "createLocationBiDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LocationBiDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Bi detail successfully created.",
            "headers": {
              "Location": {
                "description": "Location of the new bi detail",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/locationconditions": {
      "post": {
        "tags": ["Locations"],
        "summary": "Creates location condition",
        "operationId": "createLocationCondition",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LocationCondition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Location condition successfully created",
            "headers": {
              "Location": {
                "description": "Location of the new location condition",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/coverages": {
      "post": {
        "tags": ["Locations"],
        "summary": "Create location coverage",
        "operationId": "createLocationCoverage",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LocationCoverage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Coverage successfully created.",
            "headers": {
              "Location": {
                "description": "Location of the new coverage",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/locationeqdetail": {
      "post": {
        "tags": ["Locations"],
        "summary": "Create EQ peril",
        "operationId": "createLocationEqDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LocationEqDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "EQ detail successfully created.",
            "headers": {
              "Location": {
                "description": "Location of the new EQ detail",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/locationfldetail": {
      "post": {
        "tags": ["Locations"],
        "summary": "Create FL peril",
        "operationId": "createLocationFlDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LocationFlDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "Location of the new FL detail",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/locationfrdetail": {
      "post": {
        "tags": ["Locations"],
        "summary": "Create FR peril",
        "operationId": "createLocationFrDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LocationFrDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "FR Detail successfully created",
            "headers": {
              "Location": {
                "description": "Location of new FR detail",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/cessions": {
      "post": {
        "tags": ["Locations"],
        "summary": "Create location reinsurance cession",
        "operationId": "createLocationReinsuranceCession",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ReinsuranceCession"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created. New location is successfully created.",
            "headers": {
              "Location": {
                "description": "url of the new location",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/locationtodetail": {
      "post": {
        "tags": ["Locations"],
        "summary": "Create TO peril",
        "operationId": "createLocationToDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LocationToDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "TO detail successfully created",
            "headers": {
              "Location": {
                "description": "Location of the new TO detail",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/locationtrdetail": {
      "post": {
        "tags": ["Locations"],
        "summary": "Create TR peril",
        "operationId": "createLocationTrDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LocationTrDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Location TR details successfully created.",
            "headers": {
              "Location": {
                "description": "Location of Location TR Details",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/locationwcdetail": {
      "post": {
        "tags": ["Locations"],
        "summary": "Create WC peril",
        "operationId": "createLocationWcDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LocationWcDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Location WC details successfully created",
            "headers": {
              "Location": {
                "description": "Location of Location WC Detail",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/locationwsdetail": {
      "post": {
        "tags": ["Locations"],
        "summary": "Create WS peril",
        "operationId": "createLocationWsDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LocationWsDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Location WS Details successfully created",
            "headers": {
              "Location": {
                "description": "Location of Location WS Details",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/buildingattribute/{buildingattributeid}": {
      "get": {
        "tags": ["Locations"],
        "summary": "Get building attribute",
        "operationId": "getBuildingAttribute",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "buildingattributeid",
            "in": "path",
            "description": "ID number of the building attribute.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/BuildingAttribute"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Locations"],
        "summary": "Update building attribute",
        "operationId": "updateBuildingAttribute",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "buildingattributeid",
            "in": "path",
            "description": "ID number of the location building attribute record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/BuildingAttribute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Locations"],
        "summary": "Delete building attribute",
        "operationId": "deleteBuildingAttribute",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "buildingattributeid",
            "in": "path",
            "description": "ID number of the location building attribute record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}": {
      "get": {
        "tags": ["Locations"],
        "summary": "Get location",
        "operationId": "getLocation",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/Location"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Locations"],
        "summary": "Update location",
        "operationId": "updateLocation",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/Location"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Locations"],
        "summary": "Delete location",
        "operationId": "deleteLocation",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/locationbidetail/{locationbidetailid}": {
      "get": {
        "tags": ["Locations"],
        "summary": "Get BI peril by location",
        "operationId": "getLocationBiDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationbidetailid",
            "in": "path",
            "description": "ID number of the location bi detail record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LocationBiDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Locations"],
        "summary": "Update BI peril",
        "operationId": "updateLocationBiDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationbidetailid",
            "in": "path",
            "description": "ID number of the location bi detail record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LocationBiDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/MetaLinks"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Locations"],
        "summary": "Delete BI peril",
        "operationId": "deleteLocationBiDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationbidetailid",
            "in": "path",
            "description": "ID number of the location bi detail record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/locationconditions/{conditionid}": {
      "get": {
        "tags": ["Locations"],
        "summary": "Get location condition",
        "operationId": "getLocationConditionById",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "conditionid",
            "in": "path",
            "description": "ID number of the location condition.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/BuildingAttribute"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Locations"],
        "summary": "Update location condition",
        "operationId": "updateLocationCondition",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "conditionid",
            "in": "path",
            "description": "ID number of the location condition record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LocationCondition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/MetaLinks"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Locations"],
        "summary": "Delete location condition",
        "operationId": "deleteLocationCondition",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "conditionid",
            "in": "path",
            "description": "ID number of the location condition record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/coverages/{coverageid}": {
      "get": {
        "tags": ["Locations"],
        "summary": "Gets location coverage",
        "operationId": "getLocationCoverage",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "coverageid",
            "in": "path",
            "description": "ID number of the location coverage record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LocationCoverage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Locations"],
        "summary": "Update coverage",
        "operationId": "updateLocationCoverage",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "coverageid",
            "in": "path",
            "description": "ID number of the location coverage record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LocationCoverage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/MetaLinks"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Locations"],
        "summary": "Delete location coverage",
        "operationId": "deleteLocationCoverage",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "coverageid",
            "in": "path",
            "description": "ID number of the location coverage record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/locationeqdetail/{locationeqdetailid}": {
      "get": {
        "tags": ["Locations"],
        "summary": "Get EQ peril",
        "operationId": "getLocationEqDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationeqdetailid",
            "in": "path",
            "description": "ID number of the location earthquake record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LocationEqDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Locations"],
        "summary": "Update EQ peril",
        "operationId": "updateLocationEqDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationeqdetailid",
            "in": "path",
            "description": "ID number of the location earthquake record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LocationEqDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/MetaLinks"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Locations"],
        "summary": "Delete EQ peril",
        "operationId": "deleteLocationEqDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationeqdetailid",
            "in": "path",
            "description": "ID number of the location earthquake record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/locationfldetail/{locationfldetailid}": {
      "get": {
        "tags": ["Locations"],
        "summary": "Get FL peril",
        "operationId": "getLocationFlDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationfldetailid",
            "in": "path",
            "description": "ID number of the location flood record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LocationFlDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Locations"],
        "summary": "Update FL peril",
        "operationId": "updateLocationFlDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationfldetailid",
            "in": "path",
            "description": "ID number of the location flood record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LocationFlDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found."
          }
        }
      },
      "delete": {
        "tags": ["Locations"],
        "summary": "Delete FL peril",
        "operationId": "deleteLocationFlDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationfldetailid",
            "in": "path",
            "description": "ID number of the location flood record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/locationfrdetail/{locationfrdetailid}": {
      "get": {
        "tags": ["Locations"],
        "summary": "Get location FR peril",
        "operationId": "getLocationFrDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationfrdetailid",
            "in": "path",
            "description": "ID number of the location fire record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LocationFrDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Locations"],
        "summary": "Update FR peril",
        "operationId": "updateLocationFrDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationfrdetailid",
            "in": "path",
            "description": "ID number of the location fire record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LocationFrDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Locations"],
        "summary": "Delete FR peril",
        "operationId": "deleteLocationFrDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationfrdetailid",
            "in": "path",
            "description": "ID number of the location fire record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/cessions/{cessionid}": {
      "get": {
        "tags": ["Locations"],
        "summary": "Get reinsurance cession",
        "operationId": "getLocationReinsuranceCessionDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cessionid",
            "in": "path",
            "description": "ID number of the cession.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ReinsuranceCession"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Locations"],
        "summary": "Update reinsurance cession",
        "operationId": "updateLocationReinsuranceCession",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cessionid",
            "in": "path",
            "description": "ID number of the cession.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ReinsuranceCession"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Locations"],
        "summary": "Delete reinsurance cession",
        "operationId": "deleteLocationReinsuranceCession",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cessionid",
            "in": "path",
            "description": "ID number of the cession.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/locationtodetail/{locationtodetailid}": {
      "get": {
        "tags": ["Locations"],
        "summary": "Get TO peril",
        "operationId": "getLocationToDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationtodetailid",
            "in": "path",
            "description": "ID number of the location tornado record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LocationToDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Locations"],
        "summary": "Update TO peril",
        "operationId": "updateLocationToDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationtodetailid",
            "in": "path",
            "description": "ID number of the location tornado record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LocationToDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/MetaLinks"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Locations"],
        "summary": "Delete TO peril",
        "operationId": "deleteLocationToDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationtodetailid",
            "in": "path",
            "description": "ID number of the location tornado record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/locationtrdetail/{locationtrdetailid}": {
      "get": {
        "tags": ["Locations"],
        "summary": "Get TR peril",
        "operationId": "getLocationTrDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationtrdetailid",
            "in": "path",
            "description": "ID number of the location terrorism record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LocationTrDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Locations"],
        "summary": "Update TR peril",
        "operationId": "updateLocationTrDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationtrdetailid",
            "in": "path",
            "description": "ID number of the location terrorism record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LocationTrDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Locations"],
        "summary": "Delete TR peril",
        "operationId": "deleteLocationTrDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationtrdetailid",
            "in": "path",
            "description": "ID number of the location terrorism record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/locationwcdetail/{locationwcdetailid}": {
      "get": {
        "tags": ["Locations"],
        "summary": "Get WC peril",
        "operationId": "getLocationWcDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationwcdetailid",
            "in": "path",
            "description": "ID number of the location worker compensation record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LocationWcDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Locations"],
        "summary": "Update WC peril",
        "operationId": "updateLocationWcDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationwcdetailid",
            "in": "path",
            "description": "ID number of the location worker compensation record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LocationWcDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Locations"],
        "summary": "Delete WC peril",
        "operationId": "deleteLocationWcDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationwcdetailid",
            "in": "path",
            "description": "ID number of the location worker compensation record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/locationwsdetail/{locationwsdetailid}": {
      "get": {
        "tags": ["Locations"],
        "summary": "Get WS peril",
        "operationId": "getLocationWsDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationwsdetailid",
            "in": "path",
            "description": "ID number of the location windstorm record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LocationWsDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Locations"],
        "summary": "Update WS peril",
        "operationId": "updateLocationWsDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationwsdetailid",
            "in": "path",
            "description": "ID number of the location windstorm record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LocationWsDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Locations"],
        "summary": "Delete WS peril",
        "operationId": "deleteLocationWsDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationwsdetailid",
            "in": "path",
            "description": "ID number of the location windstorm record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/geocode": {
      "post": {
        "tags": ["Locations"],
        "summary": "Geocode address",
        "operationId": "geoCodeByAddress",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/Address"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/Address"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/geocode": {
      "post": {
        "tags": ["Locations"],
        "summary": "Geocode location",
        "operationId": "geoCodeByLocationId",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LayerInfo"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created. The location geocod request is created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/Address"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/policyConditions": {
      "get": {
        "tags": ["Locations"],
        "summary": "Get policy conditions by location",
        "operationId": "getPolicyConditions",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/PolicyCondition"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/data-upgrade": {
      "post": {
        "tags": ["Exposures"],
        "summary": "Upgrade Exposure / EDM Data Version",
        "operationId": "post-v2-datasources-upgrade",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Specify the edm request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/EdmUpgradeRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses": {
      "get": {
        "tags": ["Analyses"],
        "summary": "Get analyses",
        "operationId": "getAnalysesResultsv2",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `filter=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `filter=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `filter=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `filter=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by a space with`ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userName",
            "in": "query",
            "description": "Name of user that ran the analysis.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "runDate",
            "in": "query",
            "description": "Date that the analysis was run.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/AnalysisSearchResultV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/bulk-delete": {
      "post": {
        "tags": ["Analyses"],
        "summary": "Bulk Delete analysis results",
        "operationId": "deleteAnalysesv2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/pate-batch": {
      "delete": {
        "tags": ["Analyses"],
        "summary": "Delete PATE treaties",
        "operationId": "deletePateBatchv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "length": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "location": {
                      "type": "string",
                      "format": "uri"
                    },
                    "language": {
                      "type": "object",
                      "properties": {
                        "language": {
                          "type": "string"
                        },
                        "script": {
                          "type": "string"
                        },
                        "country": {
                          "type": "string"
                        },
                        "variant": {
                          "type": "string"
                        },
                        "extensionKeys": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "unicodeLocaleAttributes": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "unicodeLocaleKeys": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "iso3Language": {
                          "type": "string"
                        },
                        "iso3Country": {
                          "type": "string"
                        },
                        "displayLanguage": {
                          "type": "string"
                        },
                        "displayScript": {
                          "type": "string"
                        },
                        "displayCountry": {
                          "type": "string"
                        },
                        "displayVariant": {
                          "type": "string"
                        },
                        "displayName": {
                          "type": "string"
                        }
                      }
                    },
                    "statusInfo": {
                      "type": "object",
                      "properties": {
                        "family": {
                          "type": "string",
                          "enum": [
                            "INFORMATIONAL",
                            "SUCCESSFUL",
                            "REDIRECTION",
                            "CLIENT_ERROR",
                            "SERVER_ERROR",
                            "OTHER"
                          ]
                        },
                        "statusCode": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "reasonPhrase": {
                          "type": "string"
                        }
                      }
                    },
                    "mediaType": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "subtype": {
                          "type": "string"
                        },
                        "parameters": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "wildcardType": {
                          "type": "boolean"
                        },
                        "wildcardSubtype": {
                          "type": "boolean"
                        }
                      }
                    },
                    "allowedMethods": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "cookies": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "version": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "path": {
                            "type": "string"
                          },
                          "domain": {
                            "type": "string"
                          },
                          "comment": {
                            "type": "string"
                          },
                          "maxAge": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "expiry": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "secure": {
                            "type": "boolean"
                          },
                          "httpOnly": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "entityTag": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string"
                        },
                        "weak": {
                          "type": "boolean"
                        }
                      }
                    },
                    "stringHeaders": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "lastModified": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "date": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "headers": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "entity": {
                      "type": "object"
                    },
                    "links": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "params": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "uri": {
                            "type": "string",
                            "format": "uri"
                          },
                          "title": {
                            "type": "string"
                          },
                          "uriBuilder": {
                            "type": "object"
                          },
                          "rel": {
                            "type": "string"
                          },
                          "rels": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/pate-treaties": {
      "get": {
        "tags": ["Analyses"],
        "summary": "Get PATE treaties",
        "operationId": "getPateListv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/PateSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Analyses"],
        "summary": "Delete PATE treaties by analysis",
        "operationId": "deletePateListv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/summary_report": {
      "post": {
        "tags": ["Analyses"],
        "summary": "Generate summary report",
        "operationId": "summaryReportMetricsv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/AnalysisSummaryReportInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Location": {
                "description": "url containing identifier of the submitted workflow.",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/location-aal": {
      "get": {
        "tags": ["Analyses"],
        "summary": "Get location AAL",
        "operationId": "getAALMetricsv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "perspective",
            "in": "query",
            "description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string",
              "default": "AAL DESC"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "maximum": 1000,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LocationAALResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/analysis-region": {
      "get": {
        "tags": ["Analyses"],
        "summary": "Get region details",
        "operationId": "getAnalysisRegionsv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/AnalysisRegionSearchResultV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/cedants": {
      "get": {
        "tags": ["Analyses"],
        "summary": "Get cedants by analysis",
        "operationId": "getCedantsByAnalysisv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "perspective",
            "in": "query",
            "description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/CedantSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/ep/interpolate": {
      "get": {
        "tags": ["Analyses"],
        "summary": "Get EP interpolation results",
        "operationId": "getEPInterpolateMetricResultsv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "perspective",
            "in": "query",
            "description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "treatyId",
            "in": "query",
            "description": "Treaty ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureResourceId",
            "in": "query",
            "description": "Exposure ID",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureResourceType",
            "in": "query",
            "description": "Exposure type",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "key",
            "in": "query",
            "description": "Metric Key name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "Metric Key value",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "metricType",
            "in": "query",
            "description": "Metric Type",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/EPInterpolateResult"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/ep": {
      "get": {
        "tags": ["Analyses"],
        "summary": "Get EP metrics",
        "operationId": "getEPMetricsByAnalysisv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "perspective",
            "in": "query",
            "description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "treatyId",
            "in": "query",
            "description": "Treaty ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureResourceId",
            "in": "query",
            "description": "Exposure ID",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureResourceType",
            "in": "query",
            "description": "Exposure type",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "metricType",
            "in": "query",
            "description": "Metric Type",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/MetricsOutput"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/elt": {
      "get": {
        "tags": ["Analyses"],
        "summary": "Get ELT",
        "operationId": "getEventLossTableResultsv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "perspective",
            "in": "query",
            "description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page, maximum is 100000",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 100000
            }
          },
          {
            "name": "treatyId",
            "in": "query",
            "description": "Treaty ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureResourceId",
            "in": "query",
            "description": "Exposure ID",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureResourceType",
            "in": "query",
            "description": "Exposure type",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "eventIds",
            "in": "query",
            "description": "Event IDs",
            "schema": {
              "maxItems": 25,
              "minItems": 0,
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/EventLossItem"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/metrics": {
      "get": {
        "tags": ["Analyses"],
        "summary": "Get metrics",
        "operationId": "getMetricsv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "metricType",
            "in": "query",
            "description": "metricType.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["STATS", "ELT", "EP"]
            }
          },
          {
            "name": "position",
            "in": "query",
            "description": "position.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "description": "granularity.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "default": "POLICY",
                "enum": ["POLICY"]
              }
            }
          },
          {
            "name": "epType",
            "in": "query",
            "description": "ep Type.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["OEP", "AEP", "TCE_AEP", "TCE_OEP"]
              }
            }
          },
          {
            "name": "returnPeriod",
            "in": "query",
            "description": "returnPeriod.",
            "schema": {
              "maxItems": 12,
              "minItems": 0,
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "filterCondition",
            "in": "query",
            "description": "Filter condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "maximum": 1000,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/MetricsResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/keylosses": {
      "get": {
        "tags": ["Analyses"],
        "summary": "Get key losses",
        "operationId": "getNonEpKeyLossv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "perspective",
            "in": "query",
            "description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "treatyId",
            "in": "query",
            "description": "Treaty ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureResourceId",
            "in": "query",
            "description": "Exposure resource ID",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureResourceType",
            "in": "query",
            "description": "Exposure type",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/KeyLossItem"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/plt": {
      "get": {
        "tags": ["Analyses"],
        "summary": "Get PLT",
        "operationId": "getPeriodLossTableResultsv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "perspective",
            "in": "query",
            "description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page, maximum is 100000",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 100000
            }
          },
          {
            "name": "treatyId",
            "in": "query",
            "description": "Treaty ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureResourceId",
            "in": "query",
            "description": "Exposure ID",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureResourceType",
            "in": "query",
            "description": "Exposure type",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/EventLossItem"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/perspectives": {
      "get": {
        "tags": ["Analyses"],
        "summary": "Get perspectives",
        "operationId": "getPerspectivesForAnalysisv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureResourceType",
            "in": "query",
            "description": "Exposure type",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/EntityResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/sampledlosses": {
      "get": {
        "tags": ["Analyses"],
        "summary": "Get sampled losses",
        "operationId": "getSampledLossv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "perspective",
            "in": "query",
            "description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "treatyId",
            "in": "query",
            "description": "Treaty ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureResourceId",
            "in": "query",
            "description": "Exposure ID",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureResourceType",
            "in": "query",
            "description": "Exposure type",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "events",
            "in": "query",
            "description": "EventIds list",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/SampledLossItem"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/stats": {
      "get": {
        "tags": ["Analyses"],
        "summary": "Get statistics",
        "operationId": "getStatisticsResultsv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "perspective",
            "in": "query",
            "description": "Financial perspective.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "treatyId",
            "in": "query",
            "description": "Treaty ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureResourceId",
            "in": "query",
            "description": "Exposure ID",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureResourceType",
            "in": "query",
            "description": "Exposure type",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/StatisticsItem"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/treaties": {
      "get": {
        "tags": ["Analyses"],
        "summary": "Get treaties by analysis",
        "operationId": "getTreatiesListv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/TreatySearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/treaty/{treatyID}": {
      "get": {
        "tags": ["Analyses"],
        "summary": "Get analysis treaty",
        "operationId": "getTreatyByIdv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "treatyID",
            "in": "path",
            "description": "Treaty ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/Treaty"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/map-perspective": {
      "post": {
        "tags": ["Analyses"],
        "summary": "Convert perspectives",
        "operationId": "mapPerspectivev2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of the analysis on which you want to run Map Perspective workflow. Should be valid analysis id.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/MapPerspectiveInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Location": {
                "description": "workflowId",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "length": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "location": {
                      "type": "string",
                      "format": "uri"
                    },
                    "language": {
                      "type": "object",
                      "properties": {
                        "language": {
                          "type": "string"
                        },
                        "script": {
                          "type": "string"
                        },
                        "country": {
                          "type": "string"
                        },
                        "variant": {
                          "type": "string"
                        },
                        "extensionKeys": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "unicodeLocaleAttributes": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "unicodeLocaleKeys": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "iso3Language": {
                          "type": "string"
                        },
                        "iso3Country": {
                          "type": "string"
                        },
                        "displayLanguage": {
                          "type": "string"
                        },
                        "displayScript": {
                          "type": "string"
                        },
                        "displayCountry": {
                          "type": "string"
                        },
                        "displayVariant": {
                          "type": "string"
                        },
                        "displayName": {
                          "type": "string"
                        }
                      }
                    },
                    "statusInfo": {
                      "type": "object",
                      "properties": {
                        "family": {
                          "type": "string",
                          "enum": [
                            "INFORMATIONAL",
                            "SUCCESSFUL",
                            "REDIRECTION",
                            "CLIENT_ERROR",
                            "SERVER_ERROR",
                            "OTHER"
                          ]
                        },
                        "statusCode": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "reasonPhrase": {
                          "type": "string"
                        }
                      }
                    },
                    "mediaType": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "subtype": {
                          "type": "string"
                        },
                        "parameters": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "wildcardType": {
                          "type": "boolean"
                        },
                        "wildcardSubtype": {
                          "type": "boolean"
                        }
                      }
                    },
                    "allowedMethods": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "cookies": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "version": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "path": {
                            "type": "string"
                          },
                          "domain": {
                            "type": "string"
                          },
                          "comment": {
                            "type": "string"
                          },
                          "maxAge": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "expiry": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "secure": {
                            "type": "boolean"
                          },
                          "httpOnly": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "entityTag": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string"
                        },
                        "weak": {
                          "type": "boolean"
                        }
                      }
                    },
                    "stringHeaders": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "lastModified": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "date": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "headers": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "entity": {
                      "type": "object"
                    },
                    "links": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "params": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "uri": {
                            "type": "string",
                            "format": "uri"
                          },
                          "title": {
                            "type": "string"
                          },
                          "uriBuilder": {
                            "type": "object"
                          },
                          "rel": {
                            "type": "string"
                          },
                          "rels": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/pate": {
      "post": {
        "tags": ["Analyses"],
        "summary": "Analyze with PATE",
        "operationId": "processPatev2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "groupInfoOnly",
            "in": "query",
            "description": "Group info only",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/PateInput"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Location": {
                "description": "workflowId",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/rerun-ep": {
      "post": {
        "tags": ["Analyses"],
        "summary": "Rerun EP",
        "operationId": "reRunEpv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of the analysis on which you want to run Rerun Ep workflow. Should be valid analysis id.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Location": {
                "description": "workflowId",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "length": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "location": {
                      "type": "string",
                      "format": "uri"
                    },
                    "language": {
                      "type": "object",
                      "properties": {
                        "language": {
                          "type": "string"
                        },
                        "script": {
                          "type": "string"
                        },
                        "country": {
                          "type": "string"
                        },
                        "variant": {
                          "type": "string"
                        },
                        "extensionKeys": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "unicodeLocaleAttributes": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "unicodeLocaleKeys": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "iso3Language": {
                          "type": "string"
                        },
                        "iso3Country": {
                          "type": "string"
                        },
                        "displayLanguage": {
                          "type": "string"
                        },
                        "displayScript": {
                          "type": "string"
                        },
                        "displayCountry": {
                          "type": "string"
                        },
                        "displayVariant": {
                          "type": "string"
                        },
                        "displayName": {
                          "type": "string"
                        }
                      }
                    },
                    "statusInfo": {
                      "type": "object",
                      "properties": {
                        "family": {
                          "type": "string",
                          "enum": [
                            "INFORMATIONAL",
                            "SUCCESSFUL",
                            "REDIRECTION",
                            "CLIENT_ERROR",
                            "SERVER_ERROR",
                            "OTHER"
                          ]
                        },
                        "statusCode": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "reasonPhrase": {
                          "type": "string"
                        }
                      }
                    },
                    "mediaType": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "subtype": {
                          "type": "string"
                        },
                        "parameters": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "wildcardType": {
                          "type": "boolean"
                        },
                        "wildcardSubtype": {
                          "type": "boolean"
                        }
                      }
                    },
                    "allowedMethods": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "cookies": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "version": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "path": {
                            "type": "string"
                          },
                          "domain": {
                            "type": "string"
                          },
                          "comment": {
                            "type": "string"
                          },
                          "maxAge": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "expiry": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "secure": {
                            "type": "boolean"
                          },
                          "httpOnly": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "entityTag": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string"
                        },
                        "weak": {
                          "type": "boolean"
                        }
                      }
                    },
                    "stringHeaders": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "lastModified": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "date": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "headers": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "entity": {
                      "type": "object"
                    },
                    "links": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "params": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "uri": {
                            "type": "string",
                            "format": "uri"
                          },
                          "title": {
                            "type": "string"
                          },
                          "uriBuilder": {
                            "type": "object"
                          },
                          "rel": {
                            "type": "string"
                          },
                          "rels": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/climate-change": {
      "post": {
        "tags": ["Analyses"],
        "summary": "Analyze climate change",
        "operationId": "runClimateChangev2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of the analysis on which you want to run climate change analysis. Should be valid analysis ID.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ClimateChangeInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Location": {
                "description": "workflowId",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "length": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "location": {
                      "type": "string",
                      "format": "uri"
                    },
                    "language": {
                      "type": "object",
                      "properties": {
                        "language": {
                          "type": "string"
                        },
                        "script": {
                          "type": "string"
                        },
                        "country": {
                          "type": "string"
                        },
                        "variant": {
                          "type": "string"
                        },
                        "extensionKeys": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "unicodeLocaleAttributes": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "unicodeLocaleKeys": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "iso3Language": {
                          "type": "string"
                        },
                        "iso3Country": {
                          "type": "string"
                        },
                        "displayLanguage": {
                          "type": "string"
                        },
                        "displayScript": {
                          "type": "string"
                        },
                        "displayCountry": {
                          "type": "string"
                        },
                        "displayVariant": {
                          "type": "string"
                        },
                        "displayName": {
                          "type": "string"
                        }
                      }
                    },
                    "statusInfo": {
                      "type": "object",
                      "properties": {
                        "family": {
                          "type": "string",
                          "enum": [
                            "INFORMATIONAL",
                            "SUCCESSFUL",
                            "REDIRECTION",
                            "CLIENT_ERROR",
                            "SERVER_ERROR",
                            "OTHER"
                          ]
                        },
                        "statusCode": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "reasonPhrase": {
                          "type": "string"
                        }
                      }
                    },
                    "mediaType": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "subtype": {
                          "type": "string"
                        },
                        "parameters": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "wildcardType": {
                          "type": "boolean"
                        },
                        "wildcardSubtype": {
                          "type": "boolean"
                        }
                      }
                    },
                    "allowedMethods": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "cookies": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "version": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "path": {
                            "type": "string"
                          },
                          "domain": {
                            "type": "string"
                          },
                          "comment": {
                            "type": "string"
                          },
                          "maxAge": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "expiry": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "secure": {
                            "type": "boolean"
                          },
                          "httpOnly": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "entityTag": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string"
                        },
                        "weak": {
                          "type": "boolean"
                        }
                      }
                    },
                    "stringHeaders": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "lastModified": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "date": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "headers": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "entity": {
                      "type": "object"
                    },
                    "links": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "params": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "uri": {
                            "type": "string",
                            "format": "uri"
                          },
                          "title": {
                            "type": "string"
                          },
                          "uriBuilder": {
                            "type": "object"
                          },
                          "rel": {
                            "type": "string"
                          },
                          "rels": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/simulate-losses": {
      "post": {
        "tags": ["Analyses"],
        "summary": "Simulate PLT analysis",
        "operationId": "runELTToPLTConversionv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of the analysis on which you want to run ELT to PLT conversion workflow. Should be valid analysis ID.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/SimulateELTToPLTInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Location": {
                "description": "workflowId",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "length": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "location": {
                      "type": "string",
                      "format": "uri"
                    },
                    "language": {
                      "type": "object",
                      "properties": {
                        "language": {
                          "type": "string"
                        },
                        "script": {
                          "type": "string"
                        },
                        "country": {
                          "type": "string"
                        },
                        "variant": {
                          "type": "string"
                        },
                        "extensionKeys": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "unicodeLocaleAttributes": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "unicodeLocaleKeys": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "iso3Language": {
                          "type": "string"
                        },
                        "iso3Country": {
                          "type": "string"
                        },
                        "displayLanguage": {
                          "type": "string"
                        },
                        "displayScript": {
                          "type": "string"
                        },
                        "displayCountry": {
                          "type": "string"
                        },
                        "displayVariant": {
                          "type": "string"
                        },
                        "displayName": {
                          "type": "string"
                        }
                      }
                    },
                    "statusInfo": {
                      "type": "object",
                      "properties": {
                        "family": {
                          "type": "string",
                          "enum": [
                            "INFORMATIONAL",
                            "SUCCESSFUL",
                            "REDIRECTION",
                            "CLIENT_ERROR",
                            "SERVER_ERROR",
                            "OTHER"
                          ]
                        },
                        "statusCode": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "reasonPhrase": {
                          "type": "string"
                        }
                      }
                    },
                    "mediaType": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "subtype": {
                          "type": "string"
                        },
                        "parameters": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "wildcardType": {
                          "type": "boolean"
                        },
                        "wildcardSubtype": {
                          "type": "boolean"
                        }
                      }
                    },
                    "allowedMethods": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "cookies": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "version": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "path": {
                            "type": "string"
                          },
                          "domain": {
                            "type": "string"
                          },
                          "comment": {
                            "type": "string"
                          },
                          "maxAge": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "expiry": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "secure": {
                            "type": "boolean"
                          },
                          "httpOnly": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "entityTag": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string"
                        },
                        "weak": {
                          "type": "boolean"
                        }
                      }
                    },
                    "stringHeaders": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "lastModified": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "date": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "headers": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "entity": {
                      "type": "object"
                    },
                    "links": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "params": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "uri": {
                            "type": "string",
                            "format": "uri"
                          },
                          "title": {
                            "type": "string"
                          },
                          "uriBuilder": {
                            "type": "object"
                          },
                          "rel": {
                            "type": "string"
                          },
                          "rels": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}": {
      "put": {
        "tags": ["Analyses"],
        "summary": "Rename analysis",
        "operationId": "runRenameAnalysisv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis to be renamed. \\ Should be valid analysis ID.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/RenameAnalysisInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Location": {
                "description": "workflowId",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "length": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "location": {
                      "type": "string",
                      "format": "uri"
                    },
                    "language": {
                      "type": "object",
                      "properties": {
                        "language": {
                          "type": "string"
                        },
                        "script": {
                          "type": "string"
                        },
                        "country": {
                          "type": "string"
                        },
                        "variant": {
                          "type": "string"
                        },
                        "extensionKeys": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "unicodeLocaleAttributes": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "unicodeLocaleKeys": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "iso3Language": {
                          "type": "string"
                        },
                        "iso3Country": {
                          "type": "string"
                        },
                        "displayLanguage": {
                          "type": "string"
                        },
                        "displayScript": {
                          "type": "string"
                        },
                        "displayCountry": {
                          "type": "string"
                        },
                        "displayVariant": {
                          "type": "string"
                        },
                        "displayName": {
                          "type": "string"
                        }
                      }
                    },
                    "statusInfo": {
                      "type": "object",
                      "properties": {
                        "family": {
                          "type": "string",
                          "enum": [
                            "INFORMATIONAL",
                            "SUCCESSFUL",
                            "REDIRECTION",
                            "CLIENT_ERROR",
                            "SERVER_ERROR",
                            "OTHER"
                          ]
                        },
                        "statusCode": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "reasonPhrase": {
                          "type": "string"
                        }
                      }
                    },
                    "mediaType": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "subtype": {
                          "type": "string"
                        },
                        "parameters": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "wildcardType": {
                          "type": "boolean"
                        },
                        "wildcardSubtype": {
                          "type": "boolean"
                        }
                      }
                    },
                    "allowedMethods": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "cookies": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "version": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "path": {
                            "type": "string"
                          },
                          "domain": {
                            "type": "string"
                          },
                          "comment": {
                            "type": "string"
                          },
                          "maxAge": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "expiry": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "secure": {
                            "type": "boolean"
                          },
                          "httpOnly": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "entityTag": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string"
                        },
                        "weak": {
                          "type": "boolean"
                        }
                      }
                    },
                    "stringHeaders": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "lastModified": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "date": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "headers": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "entity": {
                      "type": "object"
                    },
                    "links": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "params": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "uri": {
                            "type": "string",
                            "format": "uri"
                          },
                          "title": {
                            "type": "string"
                          },
                          "uriBuilder": {
                            "type": "object"
                          },
                          "rel": {
                            "type": "string"
                          },
                          "rels": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Analyses"],
        "summary": "Delete analysis result",
        "operationId": "deleteAnalysisv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "length": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "location": {
                      "type": "string",
                      "format": "uri"
                    },
                    "language": {
                      "type": "object",
                      "properties": {
                        "language": {
                          "type": "string"
                        },
                        "script": {
                          "type": "string"
                        },
                        "country": {
                          "type": "string"
                        },
                        "variant": {
                          "type": "string"
                        },
                        "extensionKeys": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "unicodeLocaleAttributes": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "unicodeLocaleKeys": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "iso3Language": {
                          "type": "string"
                        },
                        "iso3Country": {
                          "type": "string"
                        },
                        "displayLanguage": {
                          "type": "string"
                        },
                        "displayScript": {
                          "type": "string"
                        },
                        "displayCountry": {
                          "type": "string"
                        },
                        "displayVariant": {
                          "type": "string"
                        },
                        "displayName": {
                          "type": "string"
                        }
                      }
                    },
                    "statusInfo": {
                      "type": "object",
                      "properties": {
                        "family": {
                          "type": "string",
                          "enum": [
                            "INFORMATIONAL",
                            "SUCCESSFUL",
                            "REDIRECTION",
                            "CLIENT_ERROR",
                            "SERVER_ERROR",
                            "OTHER"
                          ]
                        },
                        "statusCode": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "reasonPhrase": {
                          "type": "string"
                        }
                      }
                    },
                    "mediaType": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "subtype": {
                          "type": "string"
                        },
                        "parameters": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "wildcardType": {
                          "type": "boolean"
                        },
                        "wildcardSubtype": {
                          "type": "boolean"
                        }
                      }
                    },
                    "allowedMethods": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "cookies": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "version": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "path": {
                            "type": "string"
                          },
                          "domain": {
                            "type": "string"
                          },
                          "comment": {
                            "type": "string"
                          },
                          "maxAge": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "expiry": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "secure": {
                            "type": "boolean"
                          },
                          "httpOnly": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "entityTag": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string"
                        },
                        "weak": {
                          "type": "boolean"
                        }
                      }
                    },
                    "stringHeaders": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "lastModified": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "date": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "headers": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "entity": {
                      "type": "object"
                    },
                    "links": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "params": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "uri": {
                            "type": "string",
                            "format": "uri"
                          },
                          "title": {
                            "type": "string"
                          },
                          "uriBuilder": {
                            "type": "object"
                          },
                          "rel": {
                            "type": "string"
                          },
                          "rels": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/convert-event-rate-loss": {
      "post": {
        "tags": ["Analyses"],
        "summary": "Convert event rates and losses",
        "operationId": "convertAnalysisEventv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of the analysis on which you want to run convert event rate and loss workflow. Should be valid analysis ID.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ConvertEventInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Location": {
                "description": "workflowId",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "length": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "location": {
                      "type": "string",
                      "format": "uri"
                    },
                    "language": {
                      "type": "object",
                      "properties": {
                        "language": {
                          "type": "string"
                        },
                        "script": {
                          "type": "string"
                        },
                        "country": {
                          "type": "string"
                        },
                        "variant": {
                          "type": "string"
                        },
                        "extensionKeys": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "unicodeLocaleAttributes": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "unicodeLocaleKeys": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "iso3Language": {
                          "type": "string"
                        },
                        "iso3Country": {
                          "type": "string"
                        },
                        "displayLanguage": {
                          "type": "string"
                        },
                        "displayScript": {
                          "type": "string"
                        },
                        "displayCountry": {
                          "type": "string"
                        },
                        "displayVariant": {
                          "type": "string"
                        },
                        "displayName": {
                          "type": "string"
                        }
                      }
                    },
                    "statusInfo": {
                      "type": "object",
                      "properties": {
                        "family": {
                          "type": "string",
                          "enum": [
                            "INFORMATIONAL",
                            "SUCCESSFUL",
                            "REDIRECTION",
                            "CLIENT_ERROR",
                            "SERVER_ERROR",
                            "OTHER"
                          ]
                        },
                        "statusCode": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "reasonPhrase": {
                          "type": "string"
                        }
                      }
                    },
                    "mediaType": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "subtype": {
                          "type": "string"
                        },
                        "parameters": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "wildcardType": {
                          "type": "boolean"
                        },
                        "wildcardSubtype": {
                          "type": "boolean"
                        }
                      }
                    },
                    "allowedMethods": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "cookies": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "version": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "path": {
                            "type": "string"
                          },
                          "domain": {
                            "type": "string"
                          },
                          "comment": {
                            "type": "string"
                          },
                          "maxAge": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "expiry": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "secure": {
                            "type": "boolean"
                          },
                          "httpOnly": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "entityTag": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string"
                        },
                        "weak": {
                          "type": "boolean"
                        }
                      }
                    },
                    "stringHeaders": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "lastModified": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "date": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "headers": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "entity": {
                      "type": "object"
                    },
                    "links": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "params": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "uri": {
                            "type": "string",
                            "format": "uri"
                          },
                          "title": {
                            "type": "string"
                          },
                          "uriBuilder": {
                            "type": "object"
                          },
                          "rel": {
                            "type": "string"
                          },
                          "rels": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/aggregatePortfolios": {
      "get": {
        "tags": ["Aggregate Portfolios"],
        "summary": "Get aggregate portfolios",
        "operationId": "searchAggregatePortfoliosv2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `filter=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `filter=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `filter=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `filter=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by a space with`ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/AggregatePortfolioSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Aggregate Portfolios"],
        "summary": "Create aggregate portfolio",
        "operationId": "createAggregatePortfoliov2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/AggregatePortfolio"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Aggregate portfolio created.",
            "headers": {
              "Location": {
                "description": "Aggregate portfolio resource",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/aggregatePortfolios/{id}": {
      "get": {
        "tags": ["Aggregate Portfolios"],
        "summary": "Get aggregate portfolio",
        "operationId": "getAggregatePortfolioByIdv2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the aggregate portfolio.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/AggregatePortfolioSearchItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Aggregate Portfolios"],
        "summary": "Update aggregate portfolio",
        "operationId": "updateAggregatePortfoliov2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the aggregate portfolio.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/AggregatePortfolio"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Aggregate Portfolios"],
        "summary": "Delete aggregate portfolio",
        "operationId": "deleteAggregatePortfoliov2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the portfolio.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Location": {
                "description": "url containing identifier of the submitted workflow.",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/aggregatePortfolios/{id}/metrics": {
      "get": {
        "tags": ["Aggregate Portfolios"],
        "summary": "Get metrics by aggregate portfolio",
        "operationId": "getAggregatePortfolioMetricsv2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the aggregate portfolio.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/AggregatePortfolioMetrics"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/aggregatePortfolios/{id}/treaties": {
      "get": {
        "tags": ["Aggregate Portfolios"],
        "summary": "Get treaties by aggregate portfolio",
        "operationId": "getAggregatePortfolioTreatiesv2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the aggregate portfolio.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/TreatySearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/aggregatePortfolios/{id}/countries": {
      "get": {
        "tags": ["Aggregate Portfolios"],
        "summary": "Get countries by aggregate portfolio",
        "operationId": "getCountriesByAggregatePortfoliov2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the aggregate portfolio.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/AggregatePortfolioCountryMetrics"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/aggregatePortfolios/{id}/aggregate-exposures-lists": {
      "get": {
        "tags": ["Aggregate Portfolios"],
        "summary": "Get aggregate exposures by aggregate",
        "operationId": "searchAggregateExposuresv2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the aggregate portfolio.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "countryCode",
            "in": "query",
            "description": "Country to filter by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resolution",
            "in": "query",
            "description": "Resolution to filter by.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/AggregateExposuresListSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/branches": {
      "get": {
        "tags": ["Branches"],
        "summary": "Get branches",
        "operationId": "getBranches",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `filter=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `filter=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `filter=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `filter=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/BranchSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Branches"],
        "summary": "Create branch",
        "operationId": "createBranch",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/Branch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "New branch is created in the data source is successfully.",
            "headers": {
              "Location": {
                "description": "Location of the new Branch",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict. Resource already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/branches/{id}": {
      "get": {
        "tags": ["Branches"],
        "summary": "Get branch by ID",
        "operationId": "getBranchById",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the branch.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/Branch"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Branch not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Branches"],
        "summary": "Update branch",
        "operationId": "updateBranch",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the branch.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/Branch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Branches"],
        "summary": "Delete branch",
        "operationId": "deleteBranch",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the branch.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/cedants": {
      "get": {
        "tags": ["Cedants"],
        "summary": "Get cedants",
        "operationId": "getCedants",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `filter=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `filter=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `filter=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `filter=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/CedantSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Cedants"],
        "summary": "Create cedant",
        "operationId": "createCedant",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/Cedant"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "New cedant is created in the data source is successfully.",
            "headers": {
              "Location": {
                "description": "Location of the new Cedant",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict. Resource already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/cedants/{id}": {
      "get": {
        "tags": ["Cedants"],
        "summary": "Get cedant",
        "operationId": "getCedantById",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the cedant.",
            "required": true,
            "schema": {
              "maxLength": 2147483647,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/Cedant"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Cedant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Cedants"],
        "summary": "Update cedant",
        "operationId": "updateCedant",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the cedant.",
            "required": true,
            "schema": {
              "maxLength": 2147483647,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/Cedant"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Cedants"],
        "summary": "Delete cedant",
        "operationId": "deleteCedant",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the cedant.",
            "required": true,
            "schema": {
              "maxLength": 2147483647,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/policyConditions/{id}": {
      "get": {
        "tags": ["Policies"],
        "summary": "Get policy condition",
        "operationId": "getPolicyConditionTemplates",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/PolicyCondition"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/faclayers": {
      "get": {
        "tags": ["Utilities"],
        "summary": "Get facultataives",
        "operationId": "getFacultatives",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `filter=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `filter=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `filter=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `filter=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/FacultativeSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Utilities"],
        "summary": "Create facultative",
        "operationId": "createFacultative",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/Facultative"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "New facultative is created in the data source is successfully.",
            "headers": {
              "Location": {
                "description": "Location of the new Facultative",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict. Resource already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/faclayers/{id}": {
      "get": {
        "tags": ["Utilities"],
        "summary": "Get facultative by ID",
        "operationId": "getFacultativeById",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the faclutative.",
            "required": true,
            "schema": {
              "maxLength": 2147483647,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/Facultative"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Facultative not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Utilities"],
        "summary": "Update facultative",
        "operationId": "updateFacultative",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the facultative.",
            "required": true,
            "schema": {
              "maxLength": 2147483647,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/Facultative"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Utilities"],
        "summary": "Delete facultative",
        "operationId": "deleteFacultative",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the facultative.",
            "required": true,
            "schema": {
              "maxLength": 2147483647,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/globaledit/dryrun": {
      "post": {
        "tags": ["Utilities"],
        "summary": "Update exposures dry run",
        "operationId": "dryRun",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "exposureResourceId",
            "in": "query",
            "description": "Exposure ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureResourceType",
            "in": "query",
            "description": "Exposure Resource type: ACCOUNT or PORTFOLIO.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "PORTFOLIO",
                "ACCOUNT",
                "LOCATION",
                "POLICY",
                "STEP_POLICY",
                "TREATY",
                "AGGPORTFOLIO"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/globaledit": {
      "post": {
        "tags": ["Utilities"],
        "summary": "Update exposures",
        "operationId": "globalEdit",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "exposureResourceId",
            "in": "query",
            "description": "Exposure ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureResourceType",
            "in": "query",
            "description": "Exposure type: ACCOUNT or PORTFOLIO.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "PORTFOLIO",
                "ACCOUNT",
                "LOCATION",
                "POLICY",
                "STEP_POLICY",
                "TREATY",
                "AGGPORTFOLIO"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Location": {
                "description": "workflowId",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/lobs": {
      "get": {
        "tags": ["Line of Business"],
        "summary": "Get lines of business",
        "operationId": "getLineOfBusinesss",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `filter=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `filter=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `filter=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `filter=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LineOfBusinessSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Line of Business"],
        "summary": "Create line of business",
        "operationId": "createLineOfBusiness",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LineOfBusiness"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "New LineOfBusiness is created in the data source is successfully.",
            "headers": {
              "Location": {
                "description": "Account resource",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/lobs/{id}": {
      "get": {
        "tags": ["Line of Business"],
        "summary": "Get line of business by ID",
        "operationId": "getLineOfBusinessById",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the LineOfBusiness.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LineOfBusiness"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Line of Business"],
        "summary": "Update line of business",
        "operationId": "updateLineOfBusiness",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LineOfBusiness"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Line of Business"],
        "summary": "Delete line of business",
        "operationId": "deleteLineOfBusiness",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/policyConditions": {
      "get": {
        "tags": ["Policy Conditions"],
        "summary": "Get policy conditions",
        "operationId": "getAllPolicyConditions",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/PolicyCondition"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/policies/{id}/policyConditions/{conditionid}/backfill": {
      "post": {
        "tags": ["Policies"],
        "summary": "Back fill policy condition",
        "operationId": "backFillPolicyCondition",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "conditionid",
            "in": "path",
            "description": "ID number of the Policy Condition.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/policies/copy": {
      "post": {
        "tags": ["Policies"],
        "summary": "Copy policy",
        "operationId": "copyPolicy",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/CopyPolicyInfo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "Location": {
                "description": "Policy id of the copy policy",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/policies": {
      "get": {
        "tags": ["Policies"],
        "summary": "Get policies",
        "operationId": "searchPolicies",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `filter=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `filter=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `filter=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `filter=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/PolicySearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Policies"],
        "summary": "Create policy",
        "operationId": "createPolicy",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/Policy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Policy is successfully created.",
            "headers": {
              "Location": {
                "description": "Location of the new policy",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/policies/{id}/policyConditions": {
      "post": {
        "tags": ["Policies"],
        "summary": "Create policy condition",
        "operationId": "createPolicyCondition",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/PolicyCondition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Condition for a specified policy is successfully created.",
            "headers": {
              "Location": {
                "description": "location of the new policy condition",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/policies/{id}/policyConditions/{conditionid}/criteria": {
      "post": {
        "tags": ["Policies"],
        "summary": "Creates policy condition criteria",
        "operationId": "createPolicyConditionCriteria",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "conditionid",
            "in": "path",
            "description": "ID number of the Policy Condition.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/PolicyConditionCriteria"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Policy condition successfully created",
            "headers": {
              "Location": {
                "description": "Location of the new policy condition criteria",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/policies/{id}/coverages": {
      "post": {
        "tags": ["Policies"],
        "summary": "Create policy coverage",
        "operationId": "createPolicyCoverage",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/PolicyCoverage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Policy coverage successfully created.",
            "headers": {
              "Location": {
                "description": "Location of the new policy coverage",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/policies/{id}/cessions": {
      "post": {
        "tags": ["Policies"],
        "summary": "Create reinsurance cession",
        "operationId": "createPolicyReinsuranceCession",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ReinsuranceCession"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Reinsurance cession for a specified policy is successfully created.",
            "headers": {
              "Location": {
                "description": "Location of the new policy reinsurance cession",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/policies/{id}": {
      "get": {
        "tags": ["Policies"],
        "summary": "Get policy",
        "operationId": "getPolicy",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/Policy"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Policies"],
        "summary": "Update policy",
        "operationId": "updatePolicy",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/Policy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Policies"],
        "summary": "Delete policy",
        "operationId": "deletePolicy",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/policies/{id}/policyConditions/{conditionid}": {
      "get": {
        "tags": ["Policies"],
        "summary": "Get policy condition",
        "operationId": "getPolicyCondition",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "conditionid",
            "in": "path",
            "description": "ID number of the Policy Condition.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/PolicyCondition"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Policies"],
        "summary": "Update policy condition",
        "operationId": "updatePolicyCondition",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "conditionid",
            "in": "path",
            "description": "ID number of the Policy Condition.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/PolicyCondition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Policies"],
        "summary": "Delete policy condition",
        "operationId": "deletePolicyCondition",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "conditionid",
            "in": "path",
            "description": "ID number of the Policy Condition.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/policies/{id}/policyConditions/{conditionid}/criteria/{criteriaid}": {
      "get": {
        "tags": ["Policies"],
        "summary": "Get policy condition criteria",
        "operationId": "getPolicyConditionCriteria",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "conditionid",
            "in": "path",
            "description": "ID number of the Policy Condition.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "criteriaid",
            "in": "path",
            "description": "ID number of the Policy Condition Criteria.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/PolicyConditionCriteria"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Policies"],
        "summary": "Update policy condition criteria",
        "operationId": "updatePolicyConditionCriteria",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "conditionid",
            "in": "path",
            "description": "ID number of the Policy Condition.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "criteriaid",
            "in": "path",
            "description": "ID number of the Policy Condition Criteria.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/PolicyConditionCriteria"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Policies"],
        "summary": "Delete policy condition criteria",
        "operationId": "deletePolicyConditionCriteria",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "conditionid",
            "in": "path",
            "description": "ID number of the Policy Condition.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "criteriaid",
            "in": "path",
            "description": "ID number of the Policy Condition Criteria.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/policies/{id}/coverages/{coverageid}": {
      "get": {
        "tags": ["Policies"],
        "summary": "Get policy coverage",
        "operationId": "getPolicyCoverage",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "coverageid",
            "in": "path",
            "description": "ID number of the Policy Coverage.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/PolicyCoverage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Policies"],
        "summary": "Update policy coverage",
        "operationId": "updatePolicyCoverage",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "coverageid",
            "in": "path",
            "description": "ID number of the Policy Coverage.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/PolicyCoverage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Policies"],
        "summary": "Delete policy coverage",
        "operationId": "deletePolicyCoverage",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "coverageid",
            "in": "path",
            "description": "ID number of the Policy Coverage.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/policies/{id}/cessions/{cessionid}": {
      "get": {
        "tags": ["Policies"],
        "summary": "Get reinsurance cession",
        "operationId": "getPolicyReinsuranceCession",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cessionid",
            "in": "path",
            "description": "ID number of the Cession.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ReinsuranceCession"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Policies"],
        "summary": "Update reinsurance cession",
        "operationId": "updatePolicyReinsuranceCession",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cessionid",
            "in": "path",
            "description": "ID number of the Cession.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ReinsuranceCession"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Policies"],
        "summary": "Delete reinsurance cession",
        "operationId": "deletePolicyReinsuranceCession",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cessionid",
            "in": "path",
            "description": "ID number of the Cession.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/policies/{id}/policyConditions/{conditionid}/locationconditions": {
      "get": {
        "tags": ["Policies"],
        "summary": "Get location conditions",
        "operationId": "getLocationConditions",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "conditionid",
            "in": "path",
            "description": "ID number of the Policy Condition.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LocationCondition"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/policies/{id}/surplustreaties": {
      "get": {
        "tags": ["Policies"],
        "summary": "Get surplus treaties",
        "operationId": "getSurplusTreaties",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/Treaty"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/dataServers": {
      "get": {
        "tags": ["DataServers"],
        "summary": "Search Data Server instances",
        "operationId": "search-dataServers",
        "parameters": [
          {
            "in": "path",
            "name": "serverId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `filter=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `filter=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `filter=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `filter=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ServerInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/dataServers/{serverId}/databases/{databaseName}/unregister": {
      "post": {
        "tags": ["Databases"],
        "summary": "Deregister EDM",
        "operationId": "deregisterDatabasev2",
        "parameters": [
          {
            "name": "databaseName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serverId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/dataServers/{serverId}/databases": {
      "get": {
        "tags": ["Databases"],
        "summary": "Get data modules on Data Bridge",
        "operationId": "getAvailableDatabasesv2",
        "parameters": [
          {
            "name": "serverId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `filter=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `filter=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `filter=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `filter=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by a space with`ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/DataBridgeDatabaseSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/dataServers/{serverId}/databases/{databaseName}/register": {
      "post": {
        "tags": ["Databases"],
        "summary": "Register EDM",
        "operationId": "registerDatabaseV2",
        "parameters": [
          {
            "name": "serverId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "databaseName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/DataBridgeRegisterInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/dataServers/{serverId}/archives": {
      "get": {
        "tags": ["Archives"],
        "parameters": [
          {
            "in": "path",
            "name": "serverId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `filter=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `filter=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `filter=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `filter=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ArchiveSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "410": {
            "description": "Not found. The entity you are trying to interact with does not exist."
          },
          "500": {
            "description": "Internal Server Error. If the problem persists you may want to contact the Administrator."
          }
        }
      }
    },
    "/dataServers/{serverId}/archives/{archiveId}": {
      "delete": {
        "tags": ["Archives"],
        "parameters": [
          {
            "in": "path",
            "name": "serverId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "archiveId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": ["Archives"],
        "parameters": [
          {
            "in": "path",
            "name": "serverId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "archiveId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ArchiveDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "410": {
            "description": "Not found. The entity you are trying to interact with does not exist."
          },
          "500": {
            "description": "Internal Server Error. If the problem persists you may want to contact the Administrator."
          }
        }
      }
    },
    "/dataServers/{serverId}/archives/{archiveId}/restore": {
      "post": {
        "tags": ["Archives"],
        "parameters": [
          {
            "in": "path",
            "name": "serverId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "archiveId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/RestoreArchiveRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Location": {
                "description": "location of the job with jobId",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/steppolicies": {
      "get": {
        "tags": ["Step Policies"],
        "summary": "Get list of step policies",
        "description": "Retrieves list of step policies filtered by the specified parameters.",
        "operationId": "searchStepPolicies",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters applied to the query results using condition types as shown. **Relational : (result field name) (relational operator) (value)** eg. id=100 , id!=100 , id>100 | **Boolean : (condition) (boolean operator) (condition)** eg. id=100 AND name=\"xyz\" , id=100 OR type=\"abc\" | **In List : (result field name) (IN / NOT IN) (values list)** eg. id IN (1,2,3) , name NOT IN (\"abc\",\"xyz\") | **Matching : (result field name) (LIKE / NOT LIKE) (pattern)** eg. name LIKE \"abc* \" , type NOT LIKE \"* xyz* \"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by 'ASC' (to display the results in alphabetical or numerical ascending order) or 'DESC' (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at '0'.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of step policies is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/StepPolicySearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Step Policies"],
        "summary": "Create a step policy",
        "description": "Creates a step policy.",
        "operationId": "createStepPolicy",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/StepPolicy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Step Policy is successfully created.",
            "headers": {
              "Location": {
                "description": "Location of the new step policy",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/steppolicies/{id}": {
      "get": {
        "tags": ["Step Policies"],
        "summary": "Get information on a specified step policy",
        "description": "Retrieves information on a specified step policy by its ID",
        "operationId": "getStepPolicy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the step policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information on a specified step policy is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/StepPolicy"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Step Policies"],
        "summary": "Update a specified step policy",
        "description": "Updates a step policy specified by its ID.",
        "operationId": "updateStepPolicy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the step policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/StepPolicy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Step Policies"],
        "summary": "Delete a specified step policy",
        "description": "Deletes a step policy specified by its ID.",
        "operationId": "deleteStepPolicy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the step policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/treaties/lob/batch": {
      "post": {
        "tags": ["Treaties"],
        "summary": "Run batch of creating/deleting treaty lobs",
        "description": "Runs creating/deleting treaty lobs in a batch.",
        "operationId": "batchProcessTreatyLobs",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/BatchRequest"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Treaty batch executed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "lastModified": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "date": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "length": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "location": {
                        "type": "string",
                        "format": "uri"
                      },
                      "language": {
                        "type": "object",
                        "properties": {
                          "displayName": {
                            "type": "string"
                          },
                          "script": {
                            "type": "string"
                          },
                          "country": {
                            "type": "string"
                          },
                          "variant": {
                            "type": "string"
                          },
                          "extensionKeys": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "unicodeLocaleAttributes": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "unicodeLocaleKeys": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "iso3Language": {
                            "type": "string"
                          },
                          "iso3Country": {
                            "type": "string"
                          },
                          "displayLanguage": {
                            "type": "string"
                          },
                          "displayScript": {
                            "type": "string"
                          },
                          "displayCountry": {
                            "type": "string"
                          },
                          "displayVariant": {
                            "type": "string"
                          },
                          "language": {
                            "type": "string"
                          }
                        }
                      },
                      "cookies": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            },
                            "version": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "path": {
                              "type": "string"
                            },
                            "domain": {
                              "type": "string"
                            },
                            "comment": {
                              "type": "string"
                            },
                            "maxAge": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "expiry": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "secure": {
                              "type": "boolean"
                            },
                            "httpOnly": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      "links": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string"
                            },
                            "uri": {
                              "type": "string",
                              "format": "uri"
                            },
                            "title": {
                              "type": "string"
                            },
                            "uriBuilder": {
                              "type": "object"
                            },
                            "rel": {
                              "type": "string"
                            },
                            "rels": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "params": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "statusInfo": {
                        "type": "object",
                        "properties": {
                          "family": {
                            "type": "string",
                            "enum": [
                              "INFORMATIONAL",
                              "SUCCESSFUL",
                              "REDIRECTION",
                              "CLIENT_ERROR",
                              "SERVER_ERROR",
                              "OTHER"
                            ]
                          },
                          "reasonPhrase": {
                            "type": "string"
                          },
                          "statusCode": {
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      },
                      "mediaType": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "subtype": {
                            "type": "string"
                          },
                          "parameters": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "wildcardType": {
                            "type": "boolean"
                          },
                          "wildcardSubtype": {
                            "type": "boolean"
                          }
                        }
                      },
                      "allowedMethods": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "entityTag": {
                        "type": "object",
                        "properties": {
                          "value": {
                            "type": "string"
                          },
                          "weak": {
                            "type": "boolean"
                          }
                        }
                      },
                      "stringHeaders": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "headers": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          }
                        }
                      },
                      "status": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "metadata": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          }
                        }
                      },
                      "entity": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Treaties\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/treaties/{treatyId}/lossoccurrences": {
      "get": {
        "tags": ["Treaties"],
        "summary": "Get list of treaty loss occurrences by treaty ID",
        "description": "Retrieves a list of the treaty loss occurrences in a specified data source.",
        "operationId": "getLossOccurrences",
        "parameters": [
          {
            "name": "treatyId",
            "in": "path",
            "description": "Treaty Id.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of treaty loss occurrences retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LossOccurrence"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Treaties\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Treaties"],
        "summary": "Create a treaty loss occurrence",
        "description": "Returns the URL location of the created treaty loss occurrence resource",
        "operationId": "createLossOccurrence",
        "parameters": [
          {
            "name": "treatyId",
            "in": "path",
            "description": "Treaty Id.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LossOccurrence"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "treaty loss occurrence created.",
            "headers": {
              "Location": {
                "description": "treaty loss occurrence",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Treaties\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/treaties": {
      "get": {
        "tags": ["Treaties"],
        "summary": "Get list of Treaties with optional filters",
        "description": "Get list of Treaties with optional filters.",
        "operationId": "getTreatiesByFilters",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters applied to the query results using condition types as shown. **Relational : (result field name) (relational operator) (value)** eg. id=100 , id!=100 , id>100 | **Boolean : (condition) (boolean operator) (condition)** eg. id=100 AND name=\"xyz\" , id=100 OR type=\"abc\" | **In List : (result field name) (IN / NOT IN) (values list)** eg. id IN (1,2,3) , name NOT IN (\"abc\",\"xyz\") | **Matching : (result field name) (LIKE / NOT LIKE) (pattern)** eg. name LIKE \"abc* \" , type NOT LIKE \"* xyz* \"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by 'ASC' (to display the results in alphabetical or numerical ascending order) or 'DESC' (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at '0'.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of treaties retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/TreatySearchResult"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Treaties\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Treaties"],
        "summary": "Create a treaty",
        "description": "Returns the URL location of the created Treaty resource",
        "operationId": "createTreaty",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/Treaty"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Treaty created.",
            "headers": {
              "Location": {
                "description": "Treaty",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Treaties\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/treaties/{id}/lob": {
      "post": {
        "tags": ["Treaties"],
        "summary": "Creates a treaty line of business",
        "description": "Creates a location treaty line of business",
        "operationId": "createTreatyLob",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LineOfBusiness"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Treaty line of business created.",
            "headers": {
              "Location": {
                "description": "location of the new policy condition criteria",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Treaties\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/treaties/{treatyId}/lossoccurrences/{lossOccurrenceId}": {
      "get": {
        "tags": ["Treaties"],
        "summary": "Get a treaty loss occurrence by ID",
        "description": "Retrieves treaty loss occurrence in a specified data source.",
        "operationId": "getLossOccurrence",
        "parameters": [
          {
            "name": "treatyId",
            "in": "path",
            "description": "Treaty Id.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lossOccurrenceId",
            "in": "path",
            "description": "Treaty loss occurrence Id.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Treaty loss occurrences retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LossOccurrence"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Treaties\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Treaties"],
        "summary": "Update a treaty loss occurrence",
        "description": "Update a treaty loss occurrence",
        "operationId": "updateLossOccurrence",
        "parameters": [
          {
            "name": "treatyId",
            "in": "path",
            "description": "Treaty Id.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lossOccurrenceId",
            "in": "path",
            "description": "Treaty loss occurrence Id.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LossOccurrence"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Treaties\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Treaties"],
        "summary": "Delete a treaty loss occurrence",
        "operationId": "deleteLossOccurrence",
        "parameters": [
          {
            "name": "treatyId",
            "in": "path",
            "description": "Treaty Id.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lossOccurrenceId",
            "in": "path",
            "description": "Treaty loss occurrence Id.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Treaties\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/treaties/{id}": {
      "get": {
        "tags": ["Treaties"],
        "summary": "Get treaty by Id",
        "description": "Retrieve a treaty in a specified data source.",
        "operationId": "getTreaty",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Treaty Id.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Treaty retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/Treaty"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Treaties\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Treaties"],
        "summary": "Update a treaty",
        "description": "Update a treaty",
        "operationId": "updateTreaty",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the treaty.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/Treaty"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Treaties\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Treaties"],
        "summary": "Delete a treaty",
        "operationId": "deleteTreaty",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Treaty Id.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Treaties\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/treaties/{id}/lob/{lobid}": {
      "get": {
        "tags": ["Treaties"],
        "summary": "Gets a treaty line of business",
        "description": "Gets a treaty line of business",
        "operationId": "getTreatyLob",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the treaty.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lobid",
            "in": "path",
            "description": "ID number of the lob.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Treaty line of business retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/LineOfBusiness"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Treaties\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Treaties"],
        "summary": "Deletes a treaty line of business",
        "description": "Deletes a treaty line of business",
        "operationId": "deleteTreatyLob",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the treaty.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lobid",
            "in": "path",
            "description": "ID number of the lob.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Treaties\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/treaties/count": {
      "get": {
        "tags": ["Treaties"],
        "summary": "Get total treaty count",
        "description": "Retrieves total treaty count for specified datasource.",
        "operationId": "getExposureCount_3",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Treaty count successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Treaties\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/treaties/getbytype": {
      "get": {
        "tags": ["Treaties"],
        "summary": "Get list of treaties",
        "description": "Retrieves a list of the treaties in a specified data source.",
        "operationId": "getTreaties",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of treaty.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exposureResourcetype",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "policy",
                "account",
                "portfolio",
                "location"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of treaties retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/Treaty"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Treaties\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/underwriters": {
      "get": {
        "tags": ["UnderwriterV1"],
        "summary": "Get list of underwriters",
        "description": "Retrieves a list of the underwriters in a specified data source.",
        "operationId": "getUnderwriters",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters applied to the query results using condition types as shown. **Relational : (result field name) (relational operator) (value)** eg. id=100 , id!=100 , id>100 | **Boolean : (condition) (boolean operator) (condition)** eg. id=100 AND name=\"xyz\" , id=100 OR type=\"abc\" | **In List : (result field name) (IN / NOT IN) (values list)** eg. id IN (1,2,3) , name NOT IN (\"abc\",\"xyz\") | **Matching : (result field name) (LIKE / NOT LIKE) (pattern)** eg. name LIKE \"abc* \" , type NOT LIKE \"* xyz* \"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by 'ASC' (to display the results in alphabetical or numerical ascending order) or 'DESC' (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at '0'.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of underwriters in the data source is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/UnderwriterSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Contract Tags\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["UnderwriterV1"],
        "summary": "Create new Underwriter",
        "description": "Creates new Underwriter in a specified data source.",
        "operationId": "createUnderwriter",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/UnderWriter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created. New underwriter is created in the data source is successfully.",
            "headers": {
              "Location": {
                "description": "Location of the new Underwriter",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Contract Tags\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict. Resource already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/underwriters/{id}": {
      "get": {
        "tags": ["UnderwriterV1"],
        "summary": "Get underwriter by id",
        "description": "Retrieves a underwriter by id in a specified data source.",
        "operationId": "getUnderwriterById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the underwriter.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Underwriter by Id in the data source is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/UnderWriter"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Underwriter not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Contract Tags\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["UnderwriterV1"],
        "summary": "Updates existing Underwriter ",
        "description": "Updates existing Underwriter in a specified data source.",
        "operationId": "updateUnderwriter",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the underwriter.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/UnderWriter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Contract Tags\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["UnderwriterV1"],
        "summary": "Deletes existing Underwriter ",
        "description": "Deletes existing Underwriter in a specified data source.",
        "operationId": "deleteUnderwriter",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the underwriter.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Contract Tags\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/producers": {
      "get": {
        "tags": ["ProducerV1"],
        "summary": "Get list of producers",
        "description": "Retrieves a list of the producers in a specified data source.",
        "operationId": "getProducers",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters applied to the query results using condition types as shown. **Relational : (result field name) (relational operator) (value)** eg. id=100 , id!=100 , id>100 | **Boolean : (condition) (boolean operator) (condition)** eg. id=100 AND name=\"xyz\" , id=100 OR type=\"abc\" | **In List : (result field name) (IN / NOT IN) (values list)** eg. id IN (1,2,3) , name NOT IN (\"abc\",\"xyz\") | **Matching : (result field name) (LIKE / NOT LIKE) (pattern)** eg. name LIKE \"abc* \" , type NOT LIKE \"* xyz* \"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by 'ASC' (to display the results in alphabetical or numerical ascending order) or 'DESC' (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at '0'.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of producers in the data source is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ProducerSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Contract Tags\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["ProducerV1"],
        "summary": "Create new Producer ",
        "description": "Creates new Producer in a specified data source.",
        "operationId": "createProducer",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/Producer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "New producer is created in the data source is successfully.",
            "headers": {
              "Location": {
                "description": "location of the new Producer ",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Contract Tags\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "409",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/producers/{id}": {
      "get": {
        "tags": ["ProducerV1"],
        "summary": "Get Producer by id",
        "description": "Retrieves a Producer by id in a specified data source.",
        "operationId": "getProducerById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Producer.",
            "required": true,
            "schema": {
              "maxLength": 2147483647,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Producer by Id in the data source is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/Producer"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Contract Tags\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["ProducerV1"],
        "summary": "Updates existing Producer ",
        "description": "Updates existing Producer in a specified data source.",
        "operationId": "updateProducer",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "maxLength": 2147483647,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/Producer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Contract Tags\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["ProducerV1"],
        "summary": "Deletes existing Producer ",
        "description": "Deletes existing Producer in a specified data source.",
        "operationId": "deleteProducer",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "maxLength": 2147483647,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Contract Tags\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "rms_bearer_token": {
        "type": "http",
        "description": "RMS tenant specific bearer token to make authorized requests with temporary life span",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "rms_api_key": {
        "type": "apiKey",
        "name": "Authorization",
        "description": "RMS tenant specific api key to make authorized requests",
        "in": "header"
      }
    }
  }
}
