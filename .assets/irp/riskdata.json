{
  "openapi": "3.0.1",
  "info": {
    "title": "Riskdata",
    "description": "This document provides API specifications of the Riskdata",
    "version": "Cairo, 2022"
  },
  "x-readme": {
    "explorer-enabled": false,
    "samples-languages": ["curl", "java", "csharp", "node", "python"],
    "proxy-enabled": true,
    "samples-enabled": true
  },
  "servers": [
    {
      "url": "https://{host}/riskdata/v1",
      "variables": {
        "host": {
          "enum": ["api-euw1.rms.com", "api-use1.rms.com"],
          "default": "api-euw1.rms.com",
          "description": "Data center that hosts the tenant instance: api-euw1.rms.com or api-use1.rms.com."
        }
      }
    }
  ],
  "security": [
    {
      "rms_api_key": []
    },
    {
      "rms_bearer_token": []
    }
  ],
  "paths": {
    "/jobs/": {
      "get": {
        "tags": ["Riskdata Jobs"],
        "summary": "Retrieve and filter a list of jobs",
        "operationId": "riskdata-v1",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filters applied to the query results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include-input",
            "in": "query",
            "required": false,
            "description": "returns the input node wih supplied settings and or data if set as true",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/JobSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please validate the request against specifications",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthoirzed: API key or Bearer token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/jobs/{jobId}": {
      "get": {
        "tags": ["Riskdata Jobs"],
        "summary": "Retrieve a job using its unique id",
        "operationId": "riskdata-v1-get-jobs-jobid",
        "parameters": [
          {
            "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/parameters/JobIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/JobSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please validate the request against specifications",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthoirzed: API key or Bearer token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Riskdata Jobs"],
        "summary": "Cancel a riskdata job",
        "description": "Creates a new riskdata job and then runs it.",
        "operationId": "riskdata-v1-delete-jobs-cancel",
        "parameters": [
          {
            "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/parameters/JobIdParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "operation": {
                    "type": "string",
                    "enum": ["UPDATE"]
                  },
                  "targetProperty": {
                    "type": "string",
                    "enum": ["status"]
                  },
                  "value": {
                    "type": "string",
                    "enum": ["cancelled"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success: Job is being Cancelled",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/JobsActionObject"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please validate the request against specifications",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthoirzed: API key or Bearer token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity: The job is in unprocessable state",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: The server has encountered a situation it does not know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/programSets": {
      "post": {
        "tags": ["ProgramSets"],
        "summary": "Create Program Set",
        "description": "",
        "operationId": "createProgramSet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/NewProgramSet"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Program Set is created",
            "headers": {
              "Location": {
                "description": "Resource Location",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["ProgramSets"],
        "summary": "Get ProgramSets",
        "description": "",
        "operationId": "searchProgramSets",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filters applied to the query results using condition types as shown. **Relational : (result field name) (relational operator) (value)** eg. id=100 , id!=100 , id>100 | **Boolean : (condition) (boolean operator) (condition)** eg. id=100 AND name=\"xyz\" , id=100 OR type=\"abc\" | **In List : (result field name) (IN / NOT IN) (values list)** eg. id IN (1,2,3) , name NOT IN (\"abc\",\"xyz\") | **Matching : (result field name) (LIKE / NOT LIKE) (pattern)** eg. name LIKE \"abc* \" , type NOT LIKE \"* xyz* \"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at '0'.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Program Set list successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ProgramSetSearchResult"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/programSets/{programSetId}": {
      "patch": {
        "tags": ["ProgramSets"],
        "summary": "Update Program Set",
        "operationId": "updateProgramSet",
        "parameters": [
          {
            "name": "programSetId",
            "in": "path",
            "description": "ID for Program Set to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/PatchGenericRequest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Resource updated"
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Databases/ExposureSets\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["ProgramSets"],
        "summary": "Get Program Set by Id",
        "description": "",
        "operationId": "GetProgramSets",
        "parameters": [
          {
            "name": "programSetId",
            "in": "path",
            "description": "ID for Program Set to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Program Set successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ProgramSet"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/programSets/{programSetId}/programs": {
      "post": {
        "tags": ["Programs"],
        "summary": "Create Program",
        "operationId": "createProgram",
        "parameters": [
          {
            "name": "programSetId",
            "in": "path",
            "description": "ID for Program Set to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/NewProgram"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Program is created",
            "headers": {
              "Location": {
                "description": "Resource Location",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/programs": {
      "get": {
        "tags": ["Programs"],
        "summary": "Get Programs",
        "description": "",
        "operationId": "getprograms",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by a space with`ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string",
              "default": "ASC"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Programs List is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/FilteredPrograms"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/programs/{programId}": {
      "get": {
        "tags": ["Programs"],
        "summary": "Get Program by Id",
        "description": "",
        "operationId": "getProgramById",
        "parameters": [
          {
            "name": "programId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Program is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/Program"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Programs"],
        "summary": "Update Program",
        "operationId": "updateProgram",
        "parameters": [
          {
            "name": "programId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/PatchGenericRequest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Resource is updated"
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Databases/ExposureSets\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Programs"],
        "summary": "Delete Program",
        "description": "",
        "operationId": "deleteprogram",
        "parameters": [
          {
            "name": "programId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Resource deleted"
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Databases/ExposureSets\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/programSets/{programSetId}/variations": {
      "get": {
        "tags": ["Program Variations"],
        "summary": "Get Program Variations",
        "description": "",
        "operationId": "getprogramVariations",
        "parameters": [
          {
            "name": "programSetId",
            "in": "path",
            "description": "ID for ExposureSetto update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by a space with`ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string",
              "default": "datasourceName ASC"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Variation list is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/FilteredPrograms"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/programSets/{programSetId}/variations/{variationId}": {
      "get": {
        "tags": ["Program Variations"],
        "summary": "Get Program Variation by Id",
        "description": "",
        "operationId": "getProgramVariationById",
        "parameters": [
          {
            "name": "programSetId",
            "in": "path",
            "description": "ID for ExposureSetto update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variationId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Variation list is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/Program"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Databases/ExposureSets\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/businessHierarchysets": {
      "post": {
        "tags": ["BusinessHierarchysets"],
        "summary": "Create BusinessHierarchy Set",
        "description": "",
        "operationId": "createBusinessHierarchySet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "BusinessHierarchy Set is created",
            "headers": {
              "Location": {
                "description": "Resource Location",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["BusinessHierarchysets"],
        "summary": "Get BusinessHierarchysets",
        "description": "",
        "operationId": "searchBusinessHierarchysets",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filters applied to the query results using condition types as shown. **Relational : (result field name) (relational operator) (value)** eg. id=100 , id!=100 , id>100 | **Boolean : (condition) (boolean operator) (condition)** eg. id=100 AND name=\"xyz\" , id=100 OR type=\"abc\" | **In List : (result field name) (IN / NOT IN) (values list)** eg. id IN (1,2,3) , name NOT IN (\"abc\",\"xyz\") | **Matching : (result field name) (LIKE / NOT LIKE) (pattern)** eg. name LIKE \"abc* \" , type NOT LIKE \"* xyz* \"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at '0'.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BusinessHierarchy Set list successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/businessHierarchysets/{businessHierarchySetId}": {
      "patch": {
        "tags": ["BusinessHierarchysets"],
        "summary": "Update BusinessHierarchy Set",
        "operationId": "updateBusinessHierarchySet",
        "parameters": [
          {
            "name": "businessHierarchySetId",
            "in": "path",
            "description": "ID for BusinessHierarchy Set to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/PatchGenericRequest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Resource updated"
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Databases/ExposureSets\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["BusinessHierarchysets"],
        "summary": "Get BusinessHierarchy Set by Id",
        "description": "",
        "operationId": "GetBusinessHierarchysets",
        "parameters": [
          {
            "name": "businessHierarchySetId",
            "in": "path",
            "description": "ID for BusinessHierarchy Set to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BusinessHierarchy Set successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/businessHierarchysets/{businessHierarchySetId}/businessHierarchies": {
      "post": {
        "tags": ["BusinessHierarchies"],
        "summary": "Create BusinessHierarchy",
        "operationId": "createBusinessHierarchy",
        "parameters": [
          {
            "name": "businessHierarchySetId",
            "in": "path",
            "description": "ID for BusinessHierarchy Set to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "BusinessHierarchy is created",
            "headers": {
              "Location": {
                "description": "Resource Location",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/businessHierarchies": {
      "get": {
        "tags": ["BusinessHierarchies"],
        "summary": "Get BusinessHierarchies",
        "description": "",
        "operationId": "getbusinesshierarchies",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by a space with`ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string",
              "default": "ASC"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BusinessHierarchies List is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/businessHierarchies/{businesshierarchyId}": {
      "get": {
        "tags": ["BusinessHierarchies"],
        "summary": "Get BusinessHierarchy by Id",
        "description": "",
        "operationId": "getBusinessHierarchyById",
        "parameters": [
          {
            "name": "businesshierarchyId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BusinessHierarchy is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["BusinessHierarchies"],
        "summary": "Update BusinessHierarchy",
        "operationId": "updateBusinessHierarchy",
        "parameters": [
          {
            "name": "businesshierarchyId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/PatchGenericRequest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Resource is updated"
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Databases/ExposureSets\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["BusinessHierarchies"],
        "summary": "Delete BusinessHierarchy",
        "description": "",
        "operationId": "deletebusinesshierarchy",
        "parameters": [
          {
            "name": "businesshierarchyId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Resource deleted"
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Databases/ExposureSets\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/businessHierarchysets/{businessHierarchySetId}/variations": {
      "get": {
        "tags": ["BusinessHierarchy Variations"],
        "summary": "Get BusinessHierarchy Variations",
        "description": "",
        "operationId": "getbusinesshierarchyVariations",
        "parameters": [
          {
            "name": "businessHierarchySetId",
            "in": "path",
            "description": "ID for ExposureSetto update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by a space with`ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string",
              "default": "datasourceName ASC"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Variation list is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/businessHierarchysets/{businessHierarchySetId}/variations/{variationId}": {
      "get": {
        "tags": ["BusinessHierarchy Variations"],
        "summary": "Get BusinessHierarchy Variation by Id",
        "description": "",
        "operationId": "getBusinessHierarchyVariationById",
        "parameters": [
          {
            "name": "businessHierarchySetId",
            "in": "path",
            "description": "ID for ExposureSetto update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variationId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Variation list is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Databases/ExposureSets\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposureSets": {
      "post": {
        "tags": ["ExposureSets"],
        "summary": "Create Exposure Set",
        "description": "",
        "operationId": "createExposureSet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/NewExposureSet"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Exposure Set is created",
            "headers": {
              "Location": {
                "description": "Resource Location",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["ExposureSets"],
        "summary": "Get ExposureSets",
        "description": "",
        "operationId": "searchExposureSets",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filters applied to the query results using condition types as shown. **Relational : (result field name) (relational operator) (value)** eg. id=100 , id!=100 , id>100 | **Boolean : (condition) (boolean operator) (condition)** eg. id=100 AND name=\"xyz\" , id=100 OR type=\"abc\" | **In List : (result field name) (IN / NOT IN) (values list)** eg. id IN (1,2,3) , name NOT IN (\"abc\",\"xyz\") | **Matching : (result field name) (LIKE / NOT LIKE) (pattern)** eg. name LIKE \"abc* \" , type NOT LIKE \"* xyz* \"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at '0'.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Exposure Set list successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ExposureSetsearchResult"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposureSets/{exposureSetId}": {
      "patch": {
        "tags": ["ExposureSets"],
        "summary": "Update Exposure Set",
        "operationId": "updateExposureSet",
        "parameters": [
          {
            "name": "exposureSetId",
            "in": "path",
            "description": "ID for Exposure Set to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/PatchGenericRequest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Resource updated"
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Databases/ExposureSets\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["ExposureSets"],
        "summary": "Get Exposure Set by Id",
        "description": "",
        "operationId": "GetExposureSets",
        "parameters": [
          {
            "name": "exposureSetId",
            "in": "path",
            "description": "ID for Exposure Set to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Exposure Set successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ExposureSet"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposureSets/{exposureSetId}/exposures": {
      "post": {
        "tags": ["Exposures"],
        "summary": "Create Exposure / EDM",
        "description": "",
        "operationId": "dbOperationsv2",
        "parameters": [
          {
            "name": "exposureSetId",
            "in": "path",
            "description": "ID for ExposureSetto update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "serverName": {
                    "type": "string"
                  },
                  "sqlVersion": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "Resource Location",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures": {
      "get": {
        "tags": ["Exposures"],
        "summary": "Get Exposures / EDMs",
        "description": "",
        "operationId": "searchEdmsV2",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by a space with`ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string",
              "default": "datasourceName ASC"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "EDM list is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ExposureSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}": {
      "get": {
        "tags": ["Exposures"],
        "summary": "Get Exposure / EDM by ID",
        "description": "",
        "operationId": "searchEdmsV2ById",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by a space with`ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string",
              "default": "datasourceName ASC"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "EDM list is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/Exposure"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Exposures"],
        "summary": "Update Exposure",
        "description": "",
        "operationId": "patchEdm_1",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/PatchGenericRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated"
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Databases/ExposureSets\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Exposures"],
        "summary": "Delete Exposure",
        "description": "",
        "operationId": "deleteEdm_1",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Databases/ExposureSets\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposureSets/{exposureSetId}/variations": {
      "get": {
        "tags": ["ExposureVariations"],
        "summary": "Get Exposure Variations",
        "description": "",
        "operationId": "searchExposureVariations",
        "parameters": [
          {
            "name": "exposureSetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by a space with`ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string",
              "default": "datasourceName ASC"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "EDM list is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ExposureSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposureSets/{exposureSetId}/variations/{variationId}": {
      "get": {
        "tags": ["ExposureVariations"],
        "summary": "Get Exposure Variation by ID",
        "operationId": "getExposureVariationsById",
        "parameters": [
          {
            "name": "exposureSetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by a space with`ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string",
              "default": "datasourceName ASC"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "EDM list is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/Exposure"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["ExposureVariations"],
        "summary": "Update Exposure Variation",
        "description": "",
        "operationId": "patchExposureVariation",
        "parameters": [
          {
            "name": "exposureSetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variationId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/PatchGenericRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated"
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Databases/ExposureSets\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["ExposureVariations"],
        "summary": "Delete Exposure Variation",
        "description": "",
        "operationId": "deleteExposureVariation",
        "parameters": [
          {
            "name": "exposureSetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variationId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Databases/ExposureSets\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/portfolios": {
      "get": {
        "tags": ["Portfolios"],
        "summary": "Get portfolios",
        "description": "",
        "operationId": "searchPortfoliosv2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by a space with`ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of portfolios retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/PortfolioSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Portfolios\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Portfolios"],
        "summary": "Create portfolio",
        "description": "",
        "operationId": "createPortfoliov2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/NewPortfolio"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Portfolio created.",
            "headers": {
              "Location": {
                "description": "Portfolio resource",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Portfolios\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/portfolios/{id}": {
      "get": {
        "tags": ["Portfolios"],
        "summary": "Get portfolio",
        "description": "",
        "operationId": "getPortfoliov2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the portfolio.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Portfolio information retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/Portfolio"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Portfolios\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Portfolios"],
        "summary": "Update portfolio",
        "description": "",
        "operationId": "updatePortfoliov2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the portfolio.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/Portfolio"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Portfolio successfully updated."
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Portfolios\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Portfolios"],
        "summary": "Delete portfolio",
        "description": "",
        "operationId": "deletePortfoliov2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the portfolio.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "deleteType",
            "in": "query",
            "description": "The scope of the data deleted: `PORTFOLIO_INFO`, `PORTFOLIO_ALL_ACCOUNTS`, or `PORTFOLIO_EXCEPT_ACCOUNTS`",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "PORTFOLIO_INFO",
                "PORTFOLIO_ALL_ACCOUNTS",
                "PORTFOLIO_EXCEPT_ACCOUNTS"
              ]
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
            "headers": {
              "Location": {
                "description": "url containing identifier of the submitted workflow.",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Portfolios\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/portfolios/{id}/metrics": {
      "get": {
        "tags": ["Portfolios"],
        "summary": "Get metrics by portfolio",
        "description": "",
        "operationId": "getPortfolioMetricsv2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the portfolio.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Metrics for a specified portfolio are successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/PortfolioMetrics"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Portfolios\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/portfolios/{id}/filteredaccounts": {
      "put": {
        "tags": ["Portfolios"],
        "summary": "Manage filtered accounts by portfolio",
        "description": "",
        "operationId": "manageFilteredAccountsv2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the portfolio.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/PortfolioFilteredAccountsInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine)."
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Portfolios\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/portfolios/{id}/accounts": {
      "get": {
        "tags": ["Portfolios"],
        "summary": "Get accounts by portfolio",
        "description": "",
        "operationId": "searchPortfolioAccountsv2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the portfolio.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by a space with`ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of accounts retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/AccountSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Portfolios\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Portfolios"],
        "summary": "Manage accounts by portfolio",
        "description": "",
        "operationId": "managePortfolioAccountsv2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the portfolio.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/PortfolioAccountsInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine)."
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Portfolios\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/accounts": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Get accounts",
        "description": "",
        "operationId": "searchAccountsv2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by a space with`ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "portfoliofilter",
            "in": "query",
            "description": "If This search was triggered from portfolio starting at _0_.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "policyExpirationDays",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 120
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of accounts successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/AccountSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Accounts\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Accounts"],
        "summary": "Create account",
        "description": "",
        "operationId": "createAccounts",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/Account"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Account created.",
            "headers": {
              "Location": {
                "description": "Account resource",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Accounts\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/accounts/{id}": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Get account",
        "description": "",
        "operationId": "getAccounts",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the account.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account information successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/Account"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Accounts\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Accounts"],
        "summary": "Update account",
        "description": "",
        "operationId": "updateAccounts",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the account.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/Account"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Validation updated."
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Accounts\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Accounts"],
        "summary": "Delete account",
        "description": "",
        "operationId": "deleteAccounts",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the account.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
            "headers": {
              "Location": {
                "description": "workflowId",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Accounts\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/accounts/{id}/validatemedia": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Get validation file by account",
        "description": "",
        "operationId": "downloadValidationAccountFilev2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the account.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Validation retrieved.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Accounts\" action.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/accounts/{id}/metrics": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Get metrics by account",
        "description": "",
        "operationId": "getAccountMetricsv2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the account.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Metrics for a specified account are successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/AccountMetrics"
                }
              }
            }
          },
          "400": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Accounts\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/accounts/{id}/countries": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Get countries by account",
        "description": "",
        "operationId": "getCountriesByAccounts",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the account.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of countries retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/CountryMetrics"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Accounts\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/accounts/{id}/surplustreatieslocation": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Get location level surplus treaties for  account",
        "description": "",
        "operationId": "getLocationSurplusTreatiesv2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the account.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Location level surplus treaties retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/Treaty"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Accounts\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/accounts/{id}/sites": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Get site names for  account",
        "description": "",
        "operationId": "getSiteNamesv2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the account.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of site names retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Accounts\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/accounts/{id}/validate": {
      "get": {
        "tags": ["Accounts"],
        "summary": "Validate account",
        "description": "",
        "operationId": "validateAccounts",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the account.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Validation retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LocationConditionValidationInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Accounts\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/locationcondition/batch": {
      "post": {
        "tags": ["Locations"],
        "summary": "Manage location conditions in batch",
        "description": "",
        "operationId": "batchProcessLocationConditions",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/BatchRequest"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Batch successfully initiated",
            "headers": {
              "Location": {
                "description": "Location of the locationcondition/batch",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/buildingattribute": {
      "post": {
        "tags": ["Locations"],
        "summary": "Create building attribute",
        "description": "",
        "operationId": "createBuildingAttribute",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/BuildingAttribute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Building attribute successfully created",
            "headers": {
              "Location": {
                "description": "Location of the new building attribute",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations": {
      "get": {
        "tags": ["Locations"],
        "summary": "Get locations",
        "description": "",
        "operationId": "searchLocations",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "withflzone",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of locations is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LocationSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Locations"],
        "summary": "Create location",
        "description": "",
        "operationId": "createLocation",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/Location"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created. New location is successfully created.",
            "headers": {
              "Location": {
                "description": "URL for the new location",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/locationbidetail": {
      "post": {
        "tags": ["Locations"],
        "summary": "Create BI peril",
        "description": "",
        "operationId": "createLocationBiDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LocationBiDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Bi detail successfully created.",
            "headers": {
              "Location": {
                "description": "Location of the new bi detail",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/locationcondition": {
      "post": {
        "tags": ["Locations"],
        "summary": "Creates location condition",
        "description": "",
        "operationId": "createLocationCondition",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LocationCondition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Location condition successfully created",
            "headers": {
              "Location": {
                "description": "Location of the new location condition",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/coverages": {
      "post": {
        "tags": ["Locations"],
        "summary": "Create location coverage",
        "description": "",
        "operationId": "createLocationCoverage",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LocationCoverage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Coverage successfully created.",
            "headers": {
              "Location": {
                "description": "Location of the new coverage",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/locationeqdetail": {
      "post": {
        "tags": ["Locations"],
        "summary": "Create EQ peril",
        "description": "",
        "operationId": "createLocationEqDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LocationEqDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "EQ detail successfully created.",
            "headers": {
              "Location": {
                "description": "Location of the new EQ detail",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/locationfldetail": {
      "post": {
        "tags": ["Locations"],
        "summary": "Create FL peril",
        "description": "",
        "operationId": "createLocationFlDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LocationFlDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "Location of the new FL detail",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/locationfrdetail": {
      "post": {
        "tags": ["Locations"],
        "summary": "Create FR peril",
        "description": "",
        "operationId": "createLocationFrDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LocationFrDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "FR Detail successfully created",
            "headers": {
              "Location": {
                "description": "Location of new FR detail",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/cessions": {
      "post": {
        "tags": ["Locations"],
        "summary": "Create location reinsurance cession",
        "description": "",
        "operationId": "createLocationReinsuranceCession",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ReinsuranceCession"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created. New location is successfully created.",
            "headers": {
              "Location": {
                "description": "url of the new location",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/locationtodetail": {
      "post": {
        "tags": ["Locations"],
        "summary": "Create TO peril",
        "description": "",
        "operationId": "createLocationToDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LocationToDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "TO detail successfully created",
            "headers": {
              "Location": {
                "description": "Location of the new TO detail",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/locationtrdetail": {
      "post": {
        "tags": ["Locations"],
        "summary": "Create TR peril",
        "description": "",
        "operationId": "createLocationTrDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LocationTrDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Location TR details successfully created.",
            "headers": {
              "Location": {
                "description": "Location of Location TR Details",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/locationwcdetail": {
      "post": {
        "tags": ["Locations"],
        "summary": "Create WC peril",
        "description": "",
        "operationId": "createLocationWcDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LocationWcDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Location WC details successfully created",
            "headers": {
              "Location": {
                "description": "Location of Location WC Detail",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/locationwsdetail": {
      "post": {
        "tags": ["Locations"],
        "summary": "Create WS peril",
        "description": "",
        "operationId": "createLocationWsDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LocationWsDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Location WS Details successfully created",
            "headers": {
              "Location": {
                "description": "Location of Location WS Details",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/buildingattribute/{buildingattributeid}": {
      "get": {
        "tags": ["Locations"],
        "summary": "Get building attribute",
        "description": "",
        "operationId": "getBuildingAttribute",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "buildingattributeid",
            "in": "path",
            "description": "ID number of the building attribute.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Building attribute successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/BuildingAttribute"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Locations"],
        "summary": "Update building attribute",
        "description": "",
        "operationId": "updateBuildingAttribute",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "buildingattributeid",
            "in": "path",
            "description": "ID number of the location building attribute record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/BuildingAttribute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Building attribute updated"
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/MetaLinks"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Locations"],
        "summary": "Delete building attribute",
        "description": "",
        "operationId": "deleteBuildingAttribute",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "buildingattributeid",
            "in": "path",
            "description": "ID number of the location building attribute record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Building attribute successfully deleted"
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}": {
      "get": {
        "tags": ["Locations"],
        "summary": "Get location",
        "description": "",
        "operationId": "getLocation",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " Information for a specified location is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/Location"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Locations"],
        "summary": "Update location",
        "description": "",
        "operationId": "updateLocation",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/Location"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Location updated"
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Locations"],
        "summary": "Delete location",
        "description": "",
        "operationId": "deleteLocation",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Location successfully deleted."
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/locationbidetail/{locationbidetailid}": {
      "get": {
        "tags": ["Locations"],
        "summary": "Get BI peril by location",
        "description": "",
        "operationId": "getLocationBiDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationbidetailid",
            "in": "path",
            "description": "ID number of the location bi detail record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns location BI detail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LocationBiDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Locations"],
        "summary": "Update BI peril",
        "description": "",
        "operationId": "updateLocationBiDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationbidetailid",
            "in": "path",
            "description": "ID number of the location bi detail record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LocationBiDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Bi detail successfully updated."
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/MetaLinks"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Locations"],
        "summary": "Delete BI peril",
        "description": "",
        "operationId": "deleteLocationBiDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationbidetailid",
            "in": "path",
            "description": "ID number of the location bi detail record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Bi detail successfully deleted"
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/locationcondition/{conditionid}": {
      "get": {
        "tags": ["Locations"],
        "summary": "Get location condition",
        "description": "",
        "operationId": "getLocationConditionById",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "conditionid",
            "in": "path",
            "description": "ID number of the location condition.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Building attribute successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/BuildingAttribute"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Locations"],
        "summary": "Update location condition",
        "description": "",
        "operationId": "updateLocationCondition",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "conditionid",
            "in": "path",
            "description": "ID number of the location condition record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LocationCondition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Location condition successfully updated"
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/MetaLinks"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Locations"],
        "summary": "Delete location condition",
        "description": "",
        "operationId": "deleteLocationCondition",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "conditionid",
            "in": "path",
            "description": "ID number of the location condition record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Location condition successfully deleted"
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/coverages/{coverageid}": {
      "get": {
        "tags": ["Locations"],
        "summary": "Gets location coverage",
        "description": "",
        "operationId": "getLocationCoverage",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "coverageid",
            "in": "path",
            "description": "ID number of the location coverage record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LocationCoverage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Locations"],
        "summary": "Update coverage",
        "description": "",
        "operationId": "updateLocationCoverage",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "coverageid",
            "in": "path",
            "description": "ID number of the location coverage record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LocationCoverage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Coverage successfully updated"
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/MetaLinks"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Locations"],
        "summary": "Delete location coverage",
        "description": "",
        "operationId": "deleteLocationCoverage",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "coverageid",
            "in": "path",
            "description": "ID number of the location coverage record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Location coverage successfully deleted."
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/locationeqdetail/{locationeqdetailid}": {
      "get": {
        "tags": ["Locations"],
        "summary": "Get EQ peril",
        "description": "",
        "operationId": "getLocationEqDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationeqdetailid",
            "in": "path",
            "description": "ID number of the location earthquake record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "EQ detail successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LocationEqDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Locations"],
        "summary": "Update EQ peril",
        "description": "",
        "operationId": "updateLocationEqDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationeqdetailid",
            "in": "path",
            "description": "ID number of the location earthquake record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LocationEqDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "EQ Detail Successfully updated"
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/MetaLinks"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Locations"],
        "summary": "Delete EQ peril",
        "description": "",
        "operationId": "deleteLocationEqDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationeqdetailid",
            "in": "path",
            "description": "ID number of the location earthquake record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "EQ detail successfully deleted."
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/locationfldetail/{locationfldetailid}": {
      "get": {
        "tags": ["Locations"],
        "summary": "Get FL peril",
        "description": "",
        "operationId": "getLocationFlDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationfldetailid",
            "in": "path",
            "description": "ID number of the location flood record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "FL detail successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LocationFlDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Locations"],
        "summary": "Update FL peril",
        "description": "",
        "operationId": "updateLocationFlDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationfldetailid",
            "in": "path",
            "description": "ID number of the location flood record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LocationFlDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "FL detail successfully updated"
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found."
          }
        }
      },
      "delete": {
        "tags": ["Locations"],
        "summary": "Delete FL peril",
        "description": "",
        "operationId": "deleteLocationFlDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationfldetailid",
            "in": "path",
            "description": "ID number of the location flood record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "FL detail successfully deleted"
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/locationfrdetail/{locationfrdetailid}": {
      "get": {
        "tags": ["Locations"],
        "summary": "Get location FR peril",
        "description": "",
        "operationId": "getLocationFrDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationfrdetailid",
            "in": "path",
            "description": "ID number of the location fire record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "FR detail successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LocationFrDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Locations"],
        "summary": "Update FR peril",
        "description": "",
        "operationId": "updateLocationFrDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationfrdetailid",
            "in": "path",
            "description": "ID number of the location fire record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LocationFrDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "FR detail successfully updated."
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Locations"],
        "summary": "Delete FR peril",
        "description": "",
        "operationId": "deleteLocationFrDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationfrdetailid",
            "in": "path",
            "description": "ID number of the location fire record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "FR detail successfully deleted"
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/cessions/{cessionid}": {
      "get": {
        "tags": ["Locations"],
        "summary": "Get reinsurance cession",
        "description": "",
        "operationId": "getLocationReinsuranceCessionDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cessionid",
            "in": "path",
            "description": "ID number of the cession.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ReinsuranceCession details successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ReinsuranceCession"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Locations"],
        "summary": "Update reinsurance cession",
        "description": "",
        "operationId": "updateLocationReinsuranceCession",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cessionid",
            "in": "path",
            "description": "ID number of the cession.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ReinsuranceCession"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Location reinsurance cession successfully updated"
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Locations"],
        "summary": "Delete reinsurance cession",
        "description": "",
        "operationId": "deleteLocationReinsuranceCession",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cessionid",
            "in": "path",
            "description": "ID number of the cession.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Location reinsurance cession successfully deleted."
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/locationtodetail/{locationtodetailid}": {
      "get": {
        "tags": ["Locations"],
        "summary": "Get TO peril",
        "description": "",
        "operationId": "getLocationToDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationtodetailid",
            "in": "path",
            "description": "ID number of the location tornado record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TO detail successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LocationToDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Locations"],
        "summary": "Update TO peril",
        "description": "",
        "operationId": "updateLocationToDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationtodetailid",
            "in": "path",
            "description": "ID number of the location tornado record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LocationToDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "TO detail successfully updated"
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/MetaLinks"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Locations"],
        "summary": "Delete TO peril",
        "description": "",
        "operationId": "deleteLocationToDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationtodetailid",
            "in": "path",
            "description": "ID number of the location tornado record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "TO detail successfully deleted"
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/locationtrdetail/{locationtrdetailid}": {
      "get": {
        "tags": ["Locations"],
        "summary": "Get TR peril",
        "description": "",
        "operationId": "getLocationTrDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationtrdetailid",
            "in": "path",
            "description": "ID number of the location terrorism record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Location TR detail successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LocationTrDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Locations"],
        "summary": "Update TR peril",
        "description": "",
        "operationId": "updateLocationTrDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationtrdetailid",
            "in": "path",
            "description": "ID number of the location terrorism record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LocationTrDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Location TR detail successfully updated."
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Locations"],
        "summary": "Delete TR peril",
        "description": "",
        "operationId": "deleteLocationTrDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationtrdetailid",
            "in": "path",
            "description": "ID number of the location terrorism record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Location TR detail successfully deleted."
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/locationwcdetail/{locationwcdetailid}": {
      "get": {
        "tags": ["Locations"],
        "summary": "Get WC peril",
        "description": "",
        "operationId": "getLocationWcDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationwcdetailid",
            "in": "path",
            "description": "ID number of the location worker compensation record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Location WC detail successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LocationWcDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Locations"],
        "summary": "Update WC peril",
        "description": "",
        "operationId": "updateLocationWcDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationwcdetailid",
            "in": "path",
            "description": "ID number of the location worker compensation record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LocationWcDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Location WC details successfully updated."
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Locations"],
        "summary": "Delete WC peril",
        "description": "",
        "operationId": "deleteLocationWcDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationwcdetailid",
            "in": "path",
            "description": "ID number of the location worker compensation record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Location WC detail successfully deleted."
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/locationwsdetail/{locationwsdetailid}": {
      "get": {
        "tags": ["Locations"],
        "summary": "Get WS peril",
        "description": "",
        "operationId": "getLocationWsDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationwsdetailid",
            "in": "path",
            "description": "ID number of the location windstorm record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Location WS Detail successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LocationWsDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Locations"],
        "summary": "Update WS peril",
        "description": "",
        "operationId": "updateLocationWsDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationwsdetailid",
            "in": "path",
            "description": "ID number of the location windstorm record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LocationWsDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Location WS Detail successfully updated."
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Locations"],
        "summary": "Delete WS peril",
        "description": "",
        "operationId": "deleteLocationWsDetail",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationwsdetailid",
            "in": "path",
            "description": "ID number of the location windstorm record.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Location WS Detail successfully deleted."
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/geocode": {
      "post": {
        "tags": ["Locations"],
        "summary": "Geocode address",
        "description": "",
        "operationId": "geoCodeByAddress",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/Address"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The geocoding of the address is successfully performed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/Address"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/geocode": {
      "post": {
        "tags": ["Locations"],
        "summary": "Geocode location",
        "description": "",
        "operationId": "geoCodeByLocationId",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LayerInfo"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created. The location geocod request is created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/Address"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/locations/{id}/policyConditions": {
      "get": {
        "tags": ["Locations"],
        "summary": "Get policy conditions by location",
        "description": "",
        "operationId": "getPolicyConditions",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " Policy conditions successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/PolicyCondition"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/data-upgrade": {
      "post": {
        "tags": ["Exposures"],
        "summary": "Upgrade Exposure / EDM Data Version",
        "description": "",
        "operationId": "post-v2-datasources-upgrade",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Specify the edm request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/EdmUpgradeRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine)."
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses": {
      "get": {
        "tags": ["Analyses"],
        "summary": "Get analyses",
        "description": "",
        "operationId": "getAnalysesResultsv2",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by a space with`ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userName",
            "in": "query",
            "description": "Name of user that ran the analysis.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "runDate",
            "in": "query",
            "description": "Date that the analysis was run.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All Analyses successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/AnalysisSearchResultV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Analyses"],
        "summary": "Delete analysis results",
        "description": "",
        "operationId": "deleteAnalysesv2",
        "responses": {
          "204": {
            "description": "A list of Analyses deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "length": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "location": {
                      "type": "string",
                      "format": "uri"
                    },
                    "language": {
                      "type": "object",
                      "properties": {
                        "language": {
                          "type": "string"
                        },
                        "script": {
                          "type": "string"
                        },
                        "country": {
                          "type": "string"
                        },
                        "variant": {
                          "type": "string"
                        },
                        "extensionKeys": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "unicodeLocaleAttributes": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "unicodeLocaleKeys": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "iso3Language": {
                          "type": "string"
                        },
                        "iso3Country": {
                          "type": "string"
                        },
                        "displayLanguage": {
                          "type": "string"
                        },
                        "displayScript": {
                          "type": "string"
                        },
                        "displayCountry": {
                          "type": "string"
                        },
                        "displayVariant": {
                          "type": "string"
                        },
                        "displayName": {
                          "type": "string"
                        }
                      }
                    },
                    "statusInfo": {
                      "type": "object",
                      "properties": {
                        "family": {
                          "type": "string",
                          "enum": [
                            "INFORMATIONAL",
                            "SUCCESSFUL",
                            "REDIRECTION",
                            "CLIENT_ERROR",
                            "SERVER_ERROR",
                            "OTHER"
                          ]
                        },
                        "statusCode": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "reasonPhrase": {
                          "type": "string"
                        }
                      }
                    },
                    "mediaType": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "subtype": {
                          "type": "string"
                        },
                        "parameters": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "wildcardType": {
                          "type": "boolean"
                        },
                        "wildcardSubtype": {
                          "type": "boolean"
                        }
                      }
                    },
                    "allowedMethods": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "cookies": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "version": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "path": {
                            "type": "string"
                          },
                          "domain": {
                            "type": "string"
                          },
                          "comment": {
                            "type": "string"
                          },
                          "maxAge": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "expiry": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "secure": {
                            "type": "boolean"
                          },
                          "httpOnly": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "entityTag": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string"
                        },
                        "weak": {
                          "type": "boolean"
                        }
                      }
                    },
                    "stringHeaders": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "lastModified": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "date": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "headers": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "entity": {
                      "type": "object"
                    },
                    "links": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "params": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "uri": {
                            "type": "string",
                            "format": "uri"
                          },
                          "title": {
                            "type": "string"
                          },
                          "uriBuilder": {
                            "type": "object"
                          },
                          "rel": {
                            "type": "string"
                          },
                          "rels": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Results\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/pate-batch": {
      "delete": {
        "tags": ["Analyses"],
        "summary": "Delete PATE treaties",
        "description": "",
        "operationId": "deletePateBatchv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted. PATE treaties for given analysis deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "length": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "location": {
                      "type": "string",
                      "format": "uri"
                    },
                    "language": {
                      "type": "object",
                      "properties": {
                        "language": {
                          "type": "string"
                        },
                        "script": {
                          "type": "string"
                        },
                        "country": {
                          "type": "string"
                        },
                        "variant": {
                          "type": "string"
                        },
                        "extensionKeys": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "unicodeLocaleAttributes": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "unicodeLocaleKeys": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "iso3Language": {
                          "type": "string"
                        },
                        "iso3Country": {
                          "type": "string"
                        },
                        "displayLanguage": {
                          "type": "string"
                        },
                        "displayScript": {
                          "type": "string"
                        },
                        "displayCountry": {
                          "type": "string"
                        },
                        "displayVariant": {
                          "type": "string"
                        },
                        "displayName": {
                          "type": "string"
                        }
                      }
                    },
                    "statusInfo": {
                      "type": "object",
                      "properties": {
                        "family": {
                          "type": "string",
                          "enum": [
                            "INFORMATIONAL",
                            "SUCCESSFUL",
                            "REDIRECTION",
                            "CLIENT_ERROR",
                            "SERVER_ERROR",
                            "OTHER"
                          ]
                        },
                        "statusCode": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "reasonPhrase": {
                          "type": "string"
                        }
                      }
                    },
                    "mediaType": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "subtype": {
                          "type": "string"
                        },
                        "parameters": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "wildcardType": {
                          "type": "boolean"
                        },
                        "wildcardSubtype": {
                          "type": "boolean"
                        }
                      }
                    },
                    "allowedMethods": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "cookies": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "version": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "path": {
                            "type": "string"
                          },
                          "domain": {
                            "type": "string"
                          },
                          "comment": {
                            "type": "string"
                          },
                          "maxAge": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "expiry": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "secure": {
                            "type": "boolean"
                          },
                          "httpOnly": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "entityTag": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string"
                        },
                        "weak": {
                          "type": "boolean"
                        }
                      }
                    },
                    "stringHeaders": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "lastModified": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "date": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "headers": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "entity": {
                      "type": "object"
                    },
                    "links": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "params": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "uri": {
                            "type": "string",
                            "format": "uri"
                          },
                          "title": {
                            "type": "string"
                          },
                          "uriBuilder": {
                            "type": "object"
                          },
                          "rel": {
                            "type": "string"
                          },
                          "rels": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Post Analysis Treaty Execution\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/pate-treaties": {
      "get": {
        "tags": ["Analyses"],
        "summary": "Get PATE treaties",
        "description": "",
        "operationId": "getPateListv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of treaties in the data source is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/PateSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Analyses"],
        "summary": "Delete PATE treaties by analysis",
        "description": "",
        "operationId": "deletePateListv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted. PATE treaties for analysis deleted."
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Post Analysis Treaty Execution\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/summary_report": {
      "post": {
        "tags": ["Analyses"],
        "summary": "Generate summary report",
        "description": "",
        "operationId": "summaryReportMetricsv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/AnalysisSummaryReportInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
            "headers": {
              "Location": {
                "description": "url containing identifier of the submitted workflow.",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Download Report\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/location-aal": {
      "get": {
        "tags": ["Analyses"],
        "summary": "Get location AAL",
        "description": "",
        "operationId": "getAALMetricsv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "perspective",
            "in": "query",
            "description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string",
              "default": "AAL DESC"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "maximum": 1000,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Location AAL for specified analysis successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LocationAALResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/analysis-region": {
      "get": {
        "tags": ["Analyses"],
        "summary": "Get region details",
        "description": "",
        "operationId": "getAnalysisRegionsv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of region details for specified analysis successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/AnalysisRegionSearchResultV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/cedants": {
      "get": {
        "tags": ["Analyses"],
        "summary": "Get cedants by analysis",
        "description": "",
        "operationId": "getCedantsByAnalysisv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "perspective",
            "in": "query",
            "description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Cedants in the analysis is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/CedantSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/ep/interpolate": {
      "get": {
        "tags": ["Analyses"],
        "summary": "Get EP interpolation results",
        "description": "",
        "operationId": "getEPInterpolateMetricResultsv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "perspective",
            "in": "query",
            "description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "treatyId",
            "in": "query",
            "description": "Treaty ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureId",
            "in": "query",
            "description": "Exposure ID",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureType",
            "in": "query",
            "description": "Exposure type",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "key",
            "in": "query",
            "description": "Metric Key name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "Metric Key value",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "metricType",
            "in": "query",
            "description": "Metric Type",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Interpolation EP results successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/MetricsOutput"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/ep": {
      "get": {
        "tags": ["Analyses"],
        "summary": "Get EP metrics",
        "description": "",
        "operationId": "getEPMetricsByAnalysisv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "perspective",
            "in": "query",
            "description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "treatyId",
            "in": "query",
            "description": "Treaty ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureId",
            "in": "query",
            "description": "Exposure ID",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureType",
            "in": "query",
            "description": "Exposure type",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "metricType",
            "in": "query",
            "description": "Metric Type",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of EP metrics for a specified analysis successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/MetricsOutput"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/elt": {
      "get": {
        "tags": ["Analyses"],
        "summary": "Get ELT",
        "description": "",
        "operationId": "getEventLossTableResultsv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "perspective",
            "in": "query",
            "description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page, maximum is 1000",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "treatyId",
            "in": "query",
            "description": "Treaty ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureId",
            "in": "query",
            "description": "Exposure ID",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureType",
            "in": "query",
            "description": "Exposure type",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "eventIds",
            "in": "query",
            "description": "Event IDs",
            "schema": {
              "maxItems": 25,
              "minItems": 0,
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report for specified analysis successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/EventLossItem"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/metrics": {
      "get": {
        "tags": ["Analyses"],
        "summary": "Get metrics",
        "description": "",
        "operationId": "getMetricsv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "metricType",
            "in": "query",
            "description": "metricType.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["STATS", "ELT", "EP"]
            }
          },
          {
            "name": "position",
            "in": "query",
            "description": "position.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "description": "granularity.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "default": "POLICY",
                "enum": ["POLICY"]
              }
            }
          },
          {
            "name": "epType",
            "in": "query",
            "description": "ep Type.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["OEP", "AEP", "TCE_AEP", "TCE_OEP"]
              }
            }
          },
          {
            "name": "returnPeriod",
            "in": "query",
            "description": "returnPeriod.",
            "schema": {
              "maxItems": 12,
              "minItems": 0,
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "filterCondition",
            "in": "query",
            "description": "Filter condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "maximum": 1000,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "metrics for specified analysis successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/MetricsResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/keylosses": {
      "get": {
        "tags": ["Analyses"],
        "summary": "Get key losses",
        "description": "",
        "operationId": "getNonEpKeyLossv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "perspective",
            "in": "query",
            "description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "treatyId",
            "in": "query",
            "description": "Treaty ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureId",
            "in": "query",
            "description": "Exposure ID",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureType",
            "in": "query",
            "description": "Exposure type",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Key Losses for specified analysis successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/KeyLossItem"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/plt": {
      "get": {
        "tags": ["Analyses"],
        "summary": "Get PLT",
        "description": "",
        "operationId": "getPeriodLossTableResultsv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "perspective",
            "in": "query",
            "description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page, maximum is 1000",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "treatyId",
            "in": "query",
            "description": "Treaty ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureId",
            "in": "query",
            "description": "Exposure ID",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureType",
            "in": "query",
            "description": "Exposure type",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PLT report for specified analysis successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/EventLossItem"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/perspectives": {
      "get": {
        "tags": ["Analyses"],
        "summary": "Get perspectives",
        "description": "",
        "operationId": "getPerspectivesForAnalysisv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureType",
            "in": "query",
            "description": "Exposure type",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Values of all available perspectives for a given analysis",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/EntityResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/sampledlosses": {
      "get": {
        "tags": ["Analyses"],
        "summary": "Get sampled losses",
        "description": "",
        "operationId": "getSampledLossv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "perspective",
            "in": "query",
            "description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "treatyId",
            "in": "query",
            "description": "Treaty ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureId",
            "in": "query",
            "description": "Exposure ID",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureType",
            "in": "query",
            "description": "Exposure type",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "events",
            "in": "query",
            "description": "EventIds list",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sampled Losses for specified analysis successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/SampledLossItem"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/stats": {
      "get": {
        "tags": ["Analyses"],
        "summary": "Get statistics",
        "description": "",
        "operationId": "getStatisticsResultsv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "perspective",
            "in": "query",
            "description": "Financial perspective.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "treatyId",
            "in": "query",
            "description": "Treaty ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureId",
            "in": "query",
            "description": "Exposure ID",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureType",
            "in": "query",
            "description": "Exposure type",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Statistics for specified analysis successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/StatisticsItem"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/treaties": {
      "get": {
        "tags": ["Analyses"],
        "summary": "Get treaties by analysis",
        "description": "",
        "operationId": "getTreatiesListv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of treaties in the Analysis is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/TreatySearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/treaty/{treatyID}": {
      "get": {
        "tags": ["Analyses"],
        "summary": "Get analysis treaty",
        "description": "",
        "operationId": "getTreatyByIdv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "treatyID",
            "in": "path",
            "description": "Treaty ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Treaty for a specified analysis is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/Treaty"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/map-perspective": {
      "post": {
        "tags": ["Analyses"],
        "summary": "Convert perspectives",
        "description": "",
        "operationId": "mapPerspectivev2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of the analysis on which you want to run Map Perspective workflow. Should be valid analysis id.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/MapPerspectiveInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
            "headers": {
              "Location": {
                "description": "workflowId",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "length": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "location": {
                      "type": "string",
                      "format": "uri"
                    },
                    "language": {
                      "type": "object",
                      "properties": {
                        "language": {
                          "type": "string"
                        },
                        "script": {
                          "type": "string"
                        },
                        "country": {
                          "type": "string"
                        },
                        "variant": {
                          "type": "string"
                        },
                        "extensionKeys": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "unicodeLocaleAttributes": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "unicodeLocaleKeys": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "iso3Language": {
                          "type": "string"
                        },
                        "iso3Country": {
                          "type": "string"
                        },
                        "displayLanguage": {
                          "type": "string"
                        },
                        "displayScript": {
                          "type": "string"
                        },
                        "displayCountry": {
                          "type": "string"
                        },
                        "displayVariant": {
                          "type": "string"
                        },
                        "displayName": {
                          "type": "string"
                        }
                      }
                    },
                    "statusInfo": {
                      "type": "object",
                      "properties": {
                        "family": {
                          "type": "string",
                          "enum": [
                            "INFORMATIONAL",
                            "SUCCESSFUL",
                            "REDIRECTION",
                            "CLIENT_ERROR",
                            "SERVER_ERROR",
                            "OTHER"
                          ]
                        },
                        "statusCode": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "reasonPhrase": {
                          "type": "string"
                        }
                      }
                    },
                    "mediaType": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "subtype": {
                          "type": "string"
                        },
                        "parameters": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "wildcardType": {
                          "type": "boolean"
                        },
                        "wildcardSubtype": {
                          "type": "boolean"
                        }
                      }
                    },
                    "allowedMethods": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "cookies": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "version": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "path": {
                            "type": "string"
                          },
                          "domain": {
                            "type": "string"
                          },
                          "comment": {
                            "type": "string"
                          },
                          "maxAge": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "expiry": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "secure": {
                            "type": "boolean"
                          },
                          "httpOnly": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "entityTag": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string"
                        },
                        "weak": {
                          "type": "boolean"
                        }
                      }
                    },
                    "stringHeaders": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "lastModified": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "date": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "headers": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "entity": {
                      "type": "object"
                    },
                    "links": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "params": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "uri": {
                            "type": "string",
                            "format": "uri"
                          },
                          "title": {
                            "type": "string"
                          },
                          "uriBuilder": {
                            "type": "object"
                          },
                          "rel": {
                            "type": "string"
                          },
                          "rels": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Financial Re-Mapping\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/pate": {
      "post": {
        "tags": ["Analyses"],
        "summary": "Analyze with PATE",
        "description": "",
        "operationId": "processPatev2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "groupInfoOnly",
            "in": "query",
            "description": "Group info only",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/PateInput"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
            "headers": {
              "Location": {
                "description": "workflowId",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Post Analysis Treaty Execution\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/rerun-ep": {
      "post": {
        "tags": ["Analyses"],
        "summary": "Rerun EP",
        "description": "",
        "operationId": "reRunEpv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of the analysis on which you want to run Rerun Ep workflow. Should be valid analysis id.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
            "headers": {
              "Location": {
                "description": "workflowId",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "length": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "location": {
                      "type": "string",
                      "format": "uri"
                    },
                    "language": {
                      "type": "object",
                      "properties": {
                        "language": {
                          "type": "string"
                        },
                        "script": {
                          "type": "string"
                        },
                        "country": {
                          "type": "string"
                        },
                        "variant": {
                          "type": "string"
                        },
                        "extensionKeys": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "unicodeLocaleAttributes": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "unicodeLocaleKeys": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "iso3Language": {
                          "type": "string"
                        },
                        "iso3Country": {
                          "type": "string"
                        },
                        "displayLanguage": {
                          "type": "string"
                        },
                        "displayScript": {
                          "type": "string"
                        },
                        "displayCountry": {
                          "type": "string"
                        },
                        "displayVariant": {
                          "type": "string"
                        },
                        "displayName": {
                          "type": "string"
                        }
                      }
                    },
                    "statusInfo": {
                      "type": "object",
                      "properties": {
                        "family": {
                          "type": "string",
                          "enum": [
                            "INFORMATIONAL",
                            "SUCCESSFUL",
                            "REDIRECTION",
                            "CLIENT_ERROR",
                            "SERVER_ERROR",
                            "OTHER"
                          ]
                        },
                        "statusCode": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "reasonPhrase": {
                          "type": "string"
                        }
                      }
                    },
                    "mediaType": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "subtype": {
                          "type": "string"
                        },
                        "parameters": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "wildcardType": {
                          "type": "boolean"
                        },
                        "wildcardSubtype": {
                          "type": "boolean"
                        }
                      }
                    },
                    "allowedMethods": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "cookies": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "version": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "path": {
                            "type": "string"
                          },
                          "domain": {
                            "type": "string"
                          },
                          "comment": {
                            "type": "string"
                          },
                          "maxAge": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "expiry": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "secure": {
                            "type": "boolean"
                          },
                          "httpOnly": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "entityTag": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string"
                        },
                        "weak": {
                          "type": "boolean"
                        }
                      }
                    },
                    "stringHeaders": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "lastModified": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "date": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "headers": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "entity": {
                      "type": "object"
                    },
                    "links": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "params": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "uri": {
                            "type": "string",
                            "format": "uri"
                          },
                          "title": {
                            "type": "string"
                          },
                          "uriBuilder": {
                            "type": "object"
                          },
                          "rel": {
                            "type": "string"
                          },
                          "rels": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Rerun Ep\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/climate-change": {
      "post": {
        "tags": ["Analyses"],
        "summary": "Analyze climate change",
        "description": "",
        "operationId": "runClimateChangev2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of the analysis on which you want to run climate change analysis. Should be valid analysis ID.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ClimateChangeInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
            "headers": {
              "Location": {
                "description": "workflowId",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "length": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "location": {
                      "type": "string",
                      "format": "uri"
                    },
                    "language": {
                      "type": "object",
                      "properties": {
                        "language": {
                          "type": "string"
                        },
                        "script": {
                          "type": "string"
                        },
                        "country": {
                          "type": "string"
                        },
                        "variant": {
                          "type": "string"
                        },
                        "extensionKeys": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "unicodeLocaleAttributes": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "unicodeLocaleKeys": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "iso3Language": {
                          "type": "string"
                        },
                        "iso3Country": {
                          "type": "string"
                        },
                        "displayLanguage": {
                          "type": "string"
                        },
                        "displayScript": {
                          "type": "string"
                        },
                        "displayCountry": {
                          "type": "string"
                        },
                        "displayVariant": {
                          "type": "string"
                        },
                        "displayName": {
                          "type": "string"
                        }
                      }
                    },
                    "statusInfo": {
                      "type": "object",
                      "properties": {
                        "family": {
                          "type": "string",
                          "enum": [
                            "INFORMATIONAL",
                            "SUCCESSFUL",
                            "REDIRECTION",
                            "CLIENT_ERROR",
                            "SERVER_ERROR",
                            "OTHER"
                          ]
                        },
                        "statusCode": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "reasonPhrase": {
                          "type": "string"
                        }
                      }
                    },
                    "mediaType": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "subtype": {
                          "type": "string"
                        },
                        "parameters": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "wildcardType": {
                          "type": "boolean"
                        },
                        "wildcardSubtype": {
                          "type": "boolean"
                        }
                      }
                    },
                    "allowedMethods": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "cookies": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "version": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "path": {
                            "type": "string"
                          },
                          "domain": {
                            "type": "string"
                          },
                          "comment": {
                            "type": "string"
                          },
                          "maxAge": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "expiry": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "secure": {
                            "type": "boolean"
                          },
                          "httpOnly": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "entityTag": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string"
                        },
                        "weak": {
                          "type": "boolean"
                        }
                      }
                    },
                    "stringHeaders": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "lastModified": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "date": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "headers": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "entity": {
                      "type": "object"
                    },
                    "links": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "params": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "uri": {
                            "type": "string",
                            "format": "uri"
                          },
                          "title": {
                            "type": "string"
                          },
                          "uriBuilder": {
                            "type": "object"
                          },
                          "rel": {
                            "type": "string"
                          },
                          "rels": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Add to Analysis Builder\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/simulate-losses": {
      "post": {
        "tags": ["Analyses"],
        "summary": "Simulate PLT analysis",
        "description": "",
        "operationId": "runELTToPLTConversionv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of the analysis on which you want to run ELT to PLT conversion workflow. Should be valid analysis ID.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/SimulateELTToPLTInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
            "headers": {
              "Location": {
                "description": "workflowId",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "length": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "location": {
                      "type": "string",
                      "format": "uri"
                    },
                    "language": {
                      "type": "object",
                      "properties": {
                        "language": {
                          "type": "string"
                        },
                        "script": {
                          "type": "string"
                        },
                        "country": {
                          "type": "string"
                        },
                        "variant": {
                          "type": "string"
                        },
                        "extensionKeys": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "unicodeLocaleAttributes": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "unicodeLocaleKeys": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "iso3Language": {
                          "type": "string"
                        },
                        "iso3Country": {
                          "type": "string"
                        },
                        "displayLanguage": {
                          "type": "string"
                        },
                        "displayScript": {
                          "type": "string"
                        },
                        "displayCountry": {
                          "type": "string"
                        },
                        "displayVariant": {
                          "type": "string"
                        },
                        "displayName": {
                          "type": "string"
                        }
                      }
                    },
                    "statusInfo": {
                      "type": "object",
                      "properties": {
                        "family": {
                          "type": "string",
                          "enum": [
                            "INFORMATIONAL",
                            "SUCCESSFUL",
                            "REDIRECTION",
                            "CLIENT_ERROR",
                            "SERVER_ERROR",
                            "OTHER"
                          ]
                        },
                        "statusCode": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "reasonPhrase": {
                          "type": "string"
                        }
                      }
                    },
                    "mediaType": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "subtype": {
                          "type": "string"
                        },
                        "parameters": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "wildcardType": {
                          "type": "boolean"
                        },
                        "wildcardSubtype": {
                          "type": "boolean"
                        }
                      }
                    },
                    "allowedMethods": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "cookies": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "version": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "path": {
                            "type": "string"
                          },
                          "domain": {
                            "type": "string"
                          },
                          "comment": {
                            "type": "string"
                          },
                          "maxAge": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "expiry": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "secure": {
                            "type": "boolean"
                          },
                          "httpOnly": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "entityTag": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string"
                        },
                        "weak": {
                          "type": "boolean"
                        }
                      }
                    },
                    "stringHeaders": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "lastModified": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "date": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "headers": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "entity": {
                      "type": "object"
                    },
                    "links": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "params": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "uri": {
                            "type": "string",
                            "format": "uri"
                          },
                          "title": {
                            "type": "string"
                          },
                          "uriBuilder": {
                            "type": "object"
                          },
                          "rel": {
                            "type": "string"
                          },
                          "rels": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"ELT to PLT Simulation\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}": {
      "put": {
        "tags": ["Analyses"],
        "summary": "Rename analysis",
        "description": "",
        "operationId": "runRenameAnalysisv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis to be renamed. \\ Should be valid analysis ID.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/RenameAnalysisInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
            "headers": {
              "Location": {
                "description": "workflowId",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "length": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "location": {
                      "type": "string",
                      "format": "uri"
                    },
                    "language": {
                      "type": "object",
                      "properties": {
                        "language": {
                          "type": "string"
                        },
                        "script": {
                          "type": "string"
                        },
                        "country": {
                          "type": "string"
                        },
                        "variant": {
                          "type": "string"
                        },
                        "extensionKeys": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "unicodeLocaleAttributes": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "unicodeLocaleKeys": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "iso3Language": {
                          "type": "string"
                        },
                        "iso3Country": {
                          "type": "string"
                        },
                        "displayLanguage": {
                          "type": "string"
                        },
                        "displayScript": {
                          "type": "string"
                        },
                        "displayCountry": {
                          "type": "string"
                        },
                        "displayVariant": {
                          "type": "string"
                        },
                        "displayName": {
                          "type": "string"
                        }
                      }
                    },
                    "statusInfo": {
                      "type": "object",
                      "properties": {
                        "family": {
                          "type": "string",
                          "enum": [
                            "INFORMATIONAL",
                            "SUCCESSFUL",
                            "REDIRECTION",
                            "CLIENT_ERROR",
                            "SERVER_ERROR",
                            "OTHER"
                          ]
                        },
                        "statusCode": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "reasonPhrase": {
                          "type": "string"
                        }
                      }
                    },
                    "mediaType": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "subtype": {
                          "type": "string"
                        },
                        "parameters": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "wildcardType": {
                          "type": "boolean"
                        },
                        "wildcardSubtype": {
                          "type": "boolean"
                        }
                      }
                    },
                    "allowedMethods": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "cookies": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "version": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "path": {
                            "type": "string"
                          },
                          "domain": {
                            "type": "string"
                          },
                          "comment": {
                            "type": "string"
                          },
                          "maxAge": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "expiry": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "secure": {
                            "type": "boolean"
                          },
                          "httpOnly": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "entityTag": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string"
                        },
                        "weak": {
                          "type": "boolean"
                        }
                      }
                    },
                    "stringHeaders": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "lastModified": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "date": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "headers": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "entity": {
                      "type": "object"
                    },
                    "links": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "params": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "uri": {
                            "type": "string",
                            "format": "uri"
                          },
                          "title": {
                            "type": "string"
                          },
                          "uriBuilder": {
                            "type": "object"
                          },
                          "rel": {
                            "type": "string"
                          },
                          "rels": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Rename Analysis\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Analyses"],
        "summary": "Delete analysis result",
        "description": "",
        "operationId": "deleteAnalysisv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Analysis deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "length": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "location": {
                      "type": "string",
                      "format": "uri"
                    },
                    "language": {
                      "type": "object",
                      "properties": {
                        "language": {
                          "type": "string"
                        },
                        "script": {
                          "type": "string"
                        },
                        "country": {
                          "type": "string"
                        },
                        "variant": {
                          "type": "string"
                        },
                        "extensionKeys": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "unicodeLocaleAttributes": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "unicodeLocaleKeys": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "iso3Language": {
                          "type": "string"
                        },
                        "iso3Country": {
                          "type": "string"
                        },
                        "displayLanguage": {
                          "type": "string"
                        },
                        "displayScript": {
                          "type": "string"
                        },
                        "displayCountry": {
                          "type": "string"
                        },
                        "displayVariant": {
                          "type": "string"
                        },
                        "displayName": {
                          "type": "string"
                        }
                      }
                    },
                    "statusInfo": {
                      "type": "object",
                      "properties": {
                        "family": {
                          "type": "string",
                          "enum": [
                            "INFORMATIONAL",
                            "SUCCESSFUL",
                            "REDIRECTION",
                            "CLIENT_ERROR",
                            "SERVER_ERROR",
                            "OTHER"
                          ]
                        },
                        "statusCode": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "reasonPhrase": {
                          "type": "string"
                        }
                      }
                    },
                    "mediaType": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "subtype": {
                          "type": "string"
                        },
                        "parameters": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "wildcardType": {
                          "type": "boolean"
                        },
                        "wildcardSubtype": {
                          "type": "boolean"
                        }
                      }
                    },
                    "allowedMethods": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "cookies": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "version": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "path": {
                            "type": "string"
                          },
                          "domain": {
                            "type": "string"
                          },
                          "comment": {
                            "type": "string"
                          },
                          "maxAge": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "expiry": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "secure": {
                            "type": "boolean"
                          },
                          "httpOnly": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "entityTag": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string"
                        },
                        "weak": {
                          "type": "boolean"
                        }
                      }
                    },
                    "stringHeaders": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "lastModified": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "date": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "headers": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "entity": {
                      "type": "object"
                    },
                    "links": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "params": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "uri": {
                            "type": "string",
                            "format": "uri"
                          },
                          "title": {
                            "type": "string"
                          },
                          "uriBuilder": {
                            "type": "object"
                          },
                          "rel": {
                            "type": "string"
                          },
                          "rels": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Results\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/convert-event-rate-loss": {
      "post": {
        "tags": ["Analyses"],
        "summary": "Convert event rates and losses",
        "description": "",
        "operationId": "convertAnalysisEventv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of the analysis on which you want to run convert event rate and loss workflow. Should be valid analysis ID.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ConvertEventInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
            "headers": {
              "Location": {
                "description": "workflowId",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "length": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "location": {
                      "type": "string",
                      "format": "uri"
                    },
                    "language": {
                      "type": "object",
                      "properties": {
                        "language": {
                          "type": "string"
                        },
                        "script": {
                          "type": "string"
                        },
                        "country": {
                          "type": "string"
                        },
                        "variant": {
                          "type": "string"
                        },
                        "extensionKeys": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "unicodeLocaleAttributes": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "unicodeLocaleKeys": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "iso3Language": {
                          "type": "string"
                        },
                        "iso3Country": {
                          "type": "string"
                        },
                        "displayLanguage": {
                          "type": "string"
                        },
                        "displayScript": {
                          "type": "string"
                        },
                        "displayCountry": {
                          "type": "string"
                        },
                        "displayVariant": {
                          "type": "string"
                        },
                        "displayName": {
                          "type": "string"
                        }
                      }
                    },
                    "statusInfo": {
                      "type": "object",
                      "properties": {
                        "family": {
                          "type": "string",
                          "enum": [
                            "INFORMATIONAL",
                            "SUCCESSFUL",
                            "REDIRECTION",
                            "CLIENT_ERROR",
                            "SERVER_ERROR",
                            "OTHER"
                          ]
                        },
                        "statusCode": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "reasonPhrase": {
                          "type": "string"
                        }
                      }
                    },
                    "mediaType": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "subtype": {
                          "type": "string"
                        },
                        "parameters": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "wildcardType": {
                          "type": "boolean"
                        },
                        "wildcardSubtype": {
                          "type": "boolean"
                        }
                      }
                    },
                    "allowedMethods": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "cookies": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "version": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "path": {
                            "type": "string"
                          },
                          "domain": {
                            "type": "string"
                          },
                          "comment": {
                            "type": "string"
                          },
                          "maxAge": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "expiry": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "secure": {
                            "type": "boolean"
                          },
                          "httpOnly": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "entityTag": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string"
                        },
                        "weak": {
                          "type": "boolean"
                        }
                      }
                    },
                    "stringHeaders": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "lastModified": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "date": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "headers": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "entity": {
                      "type": "object"
                    },
                    "links": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "params": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "uri": {
                            "type": "string",
                            "format": "uri"
                          },
                          "title": {
                            "type": "string"
                          },
                          "uriBuilder": {
                            "type": "object"
                          },
                          "rel": {
                            "type": "string"
                          },
                          "rels": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Convert Event Rates\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{analysisId}/convertcurrency": {
      "post": {
        "tags": ["Analyses"],
        "summary": "Convert currency by analysis",
        "description": "",
        "operationId": "convertResultCurrencyv2",
        "parameters": [
          {
            "name": "analysisId",
            "in": "path",
            "description": "ID number of analysis.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ConvertResultCurrencyInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
            "headers": {
              "Location": {
                "description": "workflowId",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The input data is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Convert Result Currency\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/aggregatePortfolios": {
      "get": {
        "tags": ["Aggregate Portfolios"],
        "summary": "Get aggregate portfolios",
        "description": "",
        "operationId": "searchAggregatePortfoliosv2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by a space with`ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of aggregate portfolios retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/AggregatePortfolioSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Aggregate Portfolios\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Aggregate Portfolios"],
        "summary": "Create aggregate portfolio",
        "description": "",
        "operationId": "createAggregatePortfoliov2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/AggregatePortfolio"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Aggregate portfolio created.",
            "headers": {
              "Location": {
                "description": "Aggregate portfolio resource",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Aggregate Portfolios\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/aggregatePortfolios/{id}": {
      "get": {
        "tags": ["Aggregate Portfolios"],
        "summary": "Get aggregate portfolio",
        "description": "",
        "operationId": "getAggregatePortfolioByIdv2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the aggregate portfolio.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Aggregate portfolio retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/AggregatePortfolioSearchItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Aggregate Portfolios\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Aggregate Portfolios"],
        "summary": "Update aggregate portfolio",
        "description": "",
        "operationId": "updateAggregatePortfoliov2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the aggregate portfolio.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/AggregatePortfolio"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Aggregate portfolio successfully updated."
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Aggregate Portfolios\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Aggregate Portfolios"],
        "summary": "Delete aggregate portfolio",
        "description": "",
        "operationId": "deleteAggregatePortfoliov2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the portfolio.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
            "headers": {
              "Location": {
                "description": "url containing identifier of the submitted workflow.",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Aggregate Portfolios\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/aggregatePortfolios/{id}/metrics": {
      "get": {
        "tags": ["Aggregate Portfolios"],
        "summary": "Get metrics by aggregate portfolio",
        "description": "",
        "operationId": "getAggregatePortfolioMetricsv2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the aggregate portfolio.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Metrics for a specified aggregate portfolio are successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/AggregatePortfolioMetrics"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Aggregate Portfolios\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/aggregatePortfolios/{id}/treaties": {
      "get": {
        "tags": ["Aggregate Portfolios"],
        "summary": "Get treaties by aggregate portfolio",
        "description": "",
        "operationId": "getAggregatePortfolioTreatiesv2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the aggregate portfolio.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Treaties applicable for a specified aggregate portfolio are successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/TreatySearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Aggregate Portfolios\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/aggregatePortfolios/{id}/countries": {
      "get": {
        "tags": ["Aggregate Portfolios"],
        "summary": "Get countries by aggregate portfolio",
        "description": "",
        "operationId": "getCountriesByAggregatePortfoliov2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the aggregate portfolio.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of countries retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/AggregatePortfolioCountryMetrics"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Aggregate Portfolios\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/aggregatePortfolios/{id}/aggregate-exposures-lists": {
      "get": {
        "tags": ["Aggregate Portfolios"],
        "summary": "Get aggregate exposures by aggregate",
        "description": "",
        "operationId": "searchAggregateExposuresv2",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the aggregate portfolio.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "query",
            "description": "Country to filter by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resolution",
            "in": "query",
            "description": "Resolution to filter by.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of aggregate exposure values retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/AggregateExposuresListSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Aggregate Portfolios\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/branches": {
      "get": {
        "tags": ["Branches"],
        "summary": "Get branches",
        "description": "",
        "operationId": "getBranches",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of branches in the data source is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/BranchSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Contract Tags\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Branches"],
        "summary": "Create branch",
        "description": "",
        "operationId": "createBranch",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/Branch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "New branch is created in the data source is successfully.",
            "headers": {
              "Location": {
                "description": "Location of the new Branch",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Contract Tags\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict. Resource already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/branches/{id}": {
      "get": {
        "tags": ["Branches"],
        "summary": "Get branch by ID",
        "description": "",
        "operationId": "getBranchById",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the branch.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Branch by Id in the data source is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/Branch"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Contract Tags\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Branch not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Branches"],
        "summary": "Update branch",
        "description": "",
        "operationId": "updateBranch",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the branch.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/Branch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Updated. branch is updated in the data source is successfully."
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Contract Tags\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Branches"],
        "summary": "Delete branch",
        "description": "",
        "operationId": "deleteBranch",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the branch.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Branch is deleted from the data source is successfully."
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Contract Tags\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/cedants": {
      "get": {
        "tags": ["Cedants"],
        "summary": "Get cedants",
        "description": "",
        "operationId": "getCedants",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of cedants in the data source is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/CedantSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Contract Tags\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Cedants"],
        "summary": "Create cedant",
        "description": "",
        "operationId": "createCedant",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/Cedant"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "New cedant is created in the data source is successfully.",
            "headers": {
              "Location": {
                "description": "Location of the new Cedant",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Contract Tags\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict. Resource already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/cedants/{id}": {
      "get": {
        "tags": ["Cedants"],
        "summary": "Get cedant",
        "description": "",
        "operationId": "getCedantById",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the cedant.",
            "required": true,
            "schema": {
              "maxLength": 2147483647,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cedant by Id in the data source is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/Cedant"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Contract Tags\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Cedant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Cedants"],
        "summary": "Update cedant",
        "description": "",
        "operationId": "updateCedant",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the cedant.",
            "required": true,
            "schema": {
              "maxLength": 2147483647,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/Cedant"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Cedant is updated in the data source is successfully."
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Contract Tags\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Cedants"],
        "summary": "Delete cedant",
        "description": "",
        "operationId": "deleteCedant",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the cedant.",
            "required": true,
            "schema": {
              "maxLength": 2147483647,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted. cedant is deleted from the data source is successfully."
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Contract Tags\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/policyConditions/{id}": {
      "get": {
        "tags": ["Policies"],
        "summary": "Get policy condition",
        "description": "",
        "operationId": "getPolicyConditionTemplates",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information for a specified policy condition is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/PolicyCondition"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/faclayers": {
      "get": {
        "tags": ["Utilities"],
        "summary": "Get facultataives",
        "description": "",
        "operationId": "getFacultatives",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of facultataives in the data source is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/FacultativeSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Facultative Cessions\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Utilities"],
        "summary": "Create facultative",
        "description": "",
        "operationId": "createFacultative",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/Facultative"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "New facultative is created in the data source is successfully.",
            "headers": {
              "Location": {
                "description": "Location of the new Facultative",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Facultative Cessions\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict. Resource already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/faclayers/{id}": {
      "get": {
        "tags": ["Utilities"],
        "summary": "Get facultative by ID",
        "description": "",
        "operationId": "getFacultativeById",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the faclutative.",
            "required": true,
            "schema": {
              "maxLength": 2147483647,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Facultative by Id in the data source is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/Facultative"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Facultative Cessions\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Facultative not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Utilities"],
        "summary": "Update facultative",
        "description": "",
        "operationId": "updateFacultative",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the facultative.",
            "required": true,
            "schema": {
              "maxLength": 2147483647,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/Facultative"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Facultative is updated in the data source is successfully."
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Facultative Cessions\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Utilities"],
        "summary": "Delete facultative",
        "description": "",
        "operationId": "deleteFacultative",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the facultative.",
            "required": true,
            "schema": {
              "maxLength": 2147483647,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted. Facultative is deleted from the data source successfully."
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Facultative Cessions\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/globaledit/dryrun": {
      "post": {
        "tags": ["Utilities"],
        "summary": "Update exposures dry run",
        "description": "",
        "operationId": "dryRun",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "exposureId",
            "in": "query",
            "description": "Exposure ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureType",
            "in": "query",
            "description": "Exposure type: ACCOUNT or PORTFOLIO.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "PORTFOLIO",
                "ACCOUNT",
                "LOCATION",
                "POLICY",
                "STEP_POLICY",
                "TREATY",
                "AGGPORTFOLIO"
              ]
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The bulk edit dry run was successfully performed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/globaledit": {
      "post": {
        "tags": ["Utilities"],
        "summary": "Update exposures",
        "description": "",
        "operationId": "globalEdit",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "exposureId",
            "in": "query",
            "description": "Exposure ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exposureType",
            "in": "query",
            "description": "Exposure type: ACCOUNT or PORTFOLIO.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "PORTFOLIO",
                "ACCOUNT",
                "LOCATION",
                "POLICY",
                "STEP_POLICY",
                "TREATY",
                "AGGPORTFOLIO"
              ]
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
            "headers": {
              "Location": {
                "description": "workflowId",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/lobs": {
      "get": {
        "tags": ["Line of Business"],
        "summary": "Get lines of business",
        "operationId": "getLineOfBusinesss",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get List of lineOfBusinesses in the data source is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LineOfBusinessSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Contract Tags\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Line of Business"],
        "summary": "Create line of business",
        "description": "",
        "operationId": "createLineOfBusiness",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LineOfBusiness"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "New LineOfBusiness is created in the data source is successfully.",
            "headers": {
              "Location": {
                "description": "Account resource",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Contract Tags\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/lobs/{id}": {
      "get": {
        "tags": ["Line of Business"],
        "summary": "Get line of business by ID",
        "description": "",
        "operationId": "getLineOfBusinessById",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the LineOfBusiness.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "LineOfBusiness by Id in the data source is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LineOfBusiness"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Contract Tags\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Line of Business"],
        "summary": "Update line of business",
        "description": "",
        "operationId": "updateLineOfBusiness",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LineOfBusiness"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "LineOfBusiness is updated in the data source is successfully."
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Contract Tags\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Line of Business"],
        "summary": "Delete line of business",
        "description": "",
        "operationId": "deleteLineOfBusiness",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the location.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "LineOfBusiness is deleted from the data source is successfully."
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Contract Tags\" action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/policyConditions": {
      "get": {
        "tags": ["Policy Conditions"],
        "summary": "Get policy conditions",
        "description": "",
        "operationId": "getAllPolicyConditions",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieves all policy conditions in the EDM",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/PolicyCondition"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/policies/{id}/policyConditions/{conditionid}/backfill": {
      "post": {
        "tags": ["Policies"],
        "summary": "Back fill policy condition",
        "description": "",
        "operationId": "backFillPolicyCondition",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "conditionid",
            "in": "path",
            "description": "ID number of the Policy Condition.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine)."
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/policies/copy": {
      "post": {
        "tags": ["Policies"],
        "summary": "Copy policy",
        "description": "",
        "operationId": "copyPolicy",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/CopyPolicyInfo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Existing policy is successfully copied.",
            "headers": {
              "Location": {
                "description": "Policy id of the copy policy",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/policies": {
      "get": {
        "tags": ["Policies"],
        "summary": "Get policies",
        "description": "",
        "operationId": "searchPolicies",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of policies is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/PolicySearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Policies"],
        "summary": "Create policy",
        "description": "",
        "operationId": "createPolicy",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/Policy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Policy is successfully created.",
            "headers": {
              "Location": {
                "description": "Location of the new policy",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/policies/{id}/policyConditions": {
      "post": {
        "tags": ["Policies"],
        "summary": "Create policy condition",
        "description": "",
        "operationId": "createPolicyCondition",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/PolicyCondition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Condition for a specified policy is successfully created.",
            "headers": {
              "Location": {
                "description": "location of the new policy condition",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/policies/{id}/policyConditions/{conditionid}/criteria": {
      "post": {
        "tags": ["Policies"],
        "summary": "Creates policy condition criteria",
        "description": "",
        "operationId": "createPolicyConditionCriteria",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "conditionid",
            "in": "path",
            "description": "ID number of the Policy Condition.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/PolicyConditionCriteria"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Policy condition successfully created",
            "headers": {
              "Location": {
                "description": "Location of the new policy condition criteria",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/policies/{id}/coverages": {
      "post": {
        "tags": ["Policies"],
        "summary": "Create policy coverage",
        "description": "",
        "operationId": "createPolicyCoverage",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/PolicyCoverage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Policy coverage successfully created.",
            "headers": {
              "Location": {
                "description": "Location of the new policy coverage",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/policies/{id}/cessions": {
      "post": {
        "tags": ["Policies"],
        "summary": "Create reinsurance cession",
        "description": "",
        "operationId": "createPolicyReinsuranceCession",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ReinsuranceCession"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Reinsurance cession for a specified policy is successfully created.",
            "headers": {
              "Location": {
                "description": "Location of the new policy reinsurance cession",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/policies/{id}": {
      "get": {
        "tags": ["Policies"],
        "summary": "Get policy",
        "description": "",
        "operationId": "getPolicy",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information on a specified policy is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/Policy"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Policies"],
        "summary": "Update policy",
        "description": "",
        "operationId": "updatePolicy",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/Policy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Policy successfully updated"
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Policies"],
        "summary": "Delete policy",
        "description": "",
        "operationId": "deletePolicy",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Policy successfully deleted"
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/policies/{id}/policyConditions/{conditionid}": {
      "get": {
        "tags": ["Policies"],
        "summary": "Get policy condition",
        "description": "",
        "operationId": "getPolicyCondition",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "conditionid",
            "in": "path",
            "description": "ID number of the Policy Condition.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information for a condition specified by its ID for a policy specified by its ID is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/PolicyCondition"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Policies"],
        "summary": "Update policy condition",
        "description": "",
        "operationId": "updatePolicyCondition",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "conditionid",
            "in": "path",
            "description": "ID number of the Policy Condition.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/PolicyCondition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Policy condition successfully updated"
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Policies"],
        "summary": "Delete policy condition",
        "description": "",
        "operationId": "deletePolicyCondition",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "conditionid",
            "in": "path",
            "description": "ID number of the Policy Condition.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Policy condition successfully deleted"
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/policies/{id}/policyConditions/{conditionid}/criteria/{criteriaid}": {
      "get": {
        "tags": ["Policies"],
        "summary": "Get policy condition criteria",
        "description": "",
        "operationId": "getPolicyConditionCriteria",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "conditionid",
            "in": "path",
            "description": "ID number of the Policy Condition.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "criteriaid",
            "in": "path",
            "description": "ID number of the Policy Condition Criteria.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information for the specified policy condition criteria is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/PolicyConditionCriteria"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Policies"],
        "summary": "Update policy condition criteria",
        "description": "",
        "operationId": "updatePolicyConditionCriteria",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "conditionid",
            "in": "path",
            "description": "ID number of the Policy Condition.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "criteriaid",
            "in": "path",
            "description": "ID number of the Policy Condition Criteria.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/PolicyConditionCriteria"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Policy condition criteria successfully updated."
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Policies"],
        "summary": "Delete policy condition criteria",
        "description": "",
        "operationId": "deletePolicyConditionCriteria",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "conditionid",
            "in": "path",
            "description": "ID number of the Policy Condition.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "criteriaid",
            "in": "path",
            "description": "ID number of the Policy Condition Criteria.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Policy condition criteria successfully deleted"
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/policies/{id}/coverages/{coverageid}": {
      "get": {
        "tags": ["Policies"],
        "summary": "Get policy coverage",
        "description": "",
        "operationId": "getPolicyCoverage",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "coverageid",
            "in": "path",
            "description": "ID number of the Policy Coverage.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information on a specified poliy coverage is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/PolicyCoverage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Policies"],
        "summary": "Update policy coverage",
        "description": "",
        "operationId": "updatePolicyCoverage",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "coverageid",
            "in": "path",
            "description": "ID number of the Policy Coverage.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/PolicyCoverage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Policy coverage successfully updated."
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Policies"],
        "summary": "Delete policy coverage",
        "description": "",
        "operationId": "deletePolicyCoverage",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "coverageid",
            "in": "path",
            "description": "ID number of the Policy Coverage.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Policy coverage successfully deleted"
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/policies/{id}/cessions/{cessionid}": {
      "get": {
        "tags": ["Policies"],
        "summary": "Get reinsurance cession",
        "description": "",
        "operationId": "getPolicyReinsuranceCession",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cessionid",
            "in": "path",
            "description": "ID number of the Cession.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reinsurance cession retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ReinsuranceCession"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Policies"],
        "summary": "Update reinsurance cession",
        "description": "",
        "operationId": "updatePolicyReinsuranceCession",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cessionid",
            "in": "path",
            "description": "ID number of the Cession.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ReinsuranceCession"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Reinsurance cession successfully updated"
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Policies"],
        "summary": "Delete reinsurance cession",
        "description": "",
        "operationId": "deletePolicyReinsuranceCession",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cessionid",
            "in": "path",
            "description": "ID number of the Cession.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Reinsurance cession successfully deleted"
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/policies/{id}/policyConditions/{conditionid}/locationconditions": {
      "get": {
        "tags": ["Policies"],
        "summary": "Get location conditions",
        "description": "",
        "operationId": "getLocationConditions",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "conditionid",
            "in": "path",
            "description": "ID number of the Policy Condition.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Location conditions for a specified policy condition are successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/LocationCondition"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/policies/{id}/surplustreaties": {
      "get": {
        "tags": ["Policies"],
        "summary": "Get surplus treaties",
        "description": "",
        "operationId": "getSurplusTreaties",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID number of the policy.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of surplus treaties for a specified policy is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/Treaty"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/dataServers/{serverId}/": {
      "get": {
        "tags": ["DataServers"],
        "summary": "Get SQL Server instances",
        "description": "",
        "operationId": "searchDbInstancesv2",
        "parameters": [
          {
            "in": "path",
            "name": "serverId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by a space with`ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string",
              "default": "datasourceName ASC"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "tenant DB instance list is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ServerInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "RMS_Auth": []
          }
        ]
      }
    },
    "/dataServers/{serverId}/databases/{databaseId}/unregister": {
      "post": {
        "tags": ["Databases"],
        "summary": "Deregister EDM",
        "description": "",
        "operationId": "deregisterDatabasev2",
        "parameters": [
          {
            "name": "databaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serverId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine)."
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "RMS_Auth": []
          }
        ]
      }
    },
    "/dataServers/{serverId}/databases": {
      "get": {
        "tags": ["Databases"],
        "summary": "Get data modules on Data Bridge",
        "description": "",
        "operationId": "getAvailableDatabasesv2",
        "parameters": [
          {
            "name": "serverId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by a space with`ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List all available EDMs from DB instance is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/DataBridgeDatabaseSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "RMS_Auth": []
          }
        ]
      }
    },
    "/dataServers/{serverId}/databases/{databaseId}/register": {
      "post": {
        "tags": ["Databases"],
        "summary": "Register EDM",
        "description": "",
        "operationId": "registerDatabaseV2",
        "parameters": [
          {
            "name": "serverId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "databaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/DataBridgeRegisterInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine)."
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all\n  required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "RMS_Auth": []
          }
        ]
      }
    },
    "/dataServers/{serverId}/archives": {
      "get": {
        "tags": ["Archives"],
        "parameters": [
          {
            "in": "path",
            "name": "serverId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },

          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ArchiveSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Some of the provided parameters were not valid."
          },
          "410": {
            "description": "Not found. The entity you are trying to interact with does not exist."
          },
          "500": {
            "description": "Internal Server Error. If the problem persists you may want to contact the Administrator."
          }
        }
      }
    },
    "/dataServers/{serverId}/archives/{archiveId}": {
      "delete": {
        "tags": ["Archives"],
        "parameters": [
          {
            "in": "path",
            "name": "serverId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "archiveId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": ["Archives"],
        "parameters": [
          {
            "in": "path",
            "name": "serverId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "archiveId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ArchiveDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Some of the provided parameters were not valid."
          },
          "410": {
            "description": "Not found. The entity you are trying to interact with does not exist."
          },
          "500": {
            "description": "Internal Server Error. If the problem persists you may want to contact the Administrator."
          }
        }
      }
    },
    "/dataServers/{serverId}/archives/{archiveId}/restore": {
      "post": {
        "tags": ["Archives"],
        "parameters": [
          {
            "in": "path",
            "name": "serverId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "archiveId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/RestoreArchiveRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted: Riskdata Job is created",
            "headers": {
              "Location": {
                "description": "location of the job with jobId",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/domains/{domainname}/tablespaces/{tablespace}/entities/{entity}": {
      "get": {
        "tags": ["Domains"],
        "summary": "Get entity by domain tablespace",
        "description": "",
        "operationId": "getEntitiesMetaOrValuesv1",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "domainname",
            "in": "path",
            "description": "Name of the domain.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tablespace",
            "in": "path",
            "description": "Name of the tablespace.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entity",
            "in": "path",
            "description": "Name of the entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata for an entity in a domain tablespace is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/EntityMeta"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Domains"],
        "summary": "Create currency",
        "description": "",
        "operationId": "createCurrencyv1",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "domainname",
            "in": "path",
            "description": "Name of the domain.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tablespace",
            "in": "path",
            "description": "Name of the tablespace.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entity",
            "in": "path",
            "description": "Name of the entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/KeyValueStore"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created. New Currency is created in the data source successfully.",
            "headers": {
              "Location": {
                "description": "Location of the Currency resource.",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict. Resource already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/domains": {
      "get": {
        "tags": ["Domains"],
        "summary": "Get domains",
        "description": "",
        "operationId": "getDomainsv1",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of domains is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/DomainReference"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/domains/{domainname}/tablespaces/{tablespace}/entities": {
      "get": {
        "tags": ["Domains"],
        "summary": "Get entities by domain tablespace",
        "description": "",
        "operationId": "getEntitiesv1",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "domainname",
            "in": "path",
            "description": "Name of the domain.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tablespace",
            "in": "path",
            "description": "Name of the tablespace.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of entities for a domain tablespace is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/DomainReference"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/domains/{domainname}/tablespaces/{tablespace}/entities/{entity}/meta": {
      "get": {
        "tags": ["Domains"],
        "summary": "Get attributes domain tablespace entity",
        "description": "",
        "operationId": "getEntityAttributesv1",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "domainname",
            "in": "path",
            "description": "Name of the domain.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tablespace",
            "in": "path",
            "description": "Name of the tablespace.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entity",
            "in": "path",
            "description": "Name of the entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "in": "query",
            "description": "Name of the metadata tag.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Attributes for a specified entry in a domain tablespace are successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/DomainResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/domains/{domainname}/tablespaces/{tablespace}/entities/{entity}/values": {
      "get": {
        "tags": ["Domains"],
        "summary": "Get entity values",
        "description": "",
        "operationId": "getEntityValuesv1",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "domainname",
            "in": "path",
            "description": "Name of the domain.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tablespace",
            "in": "path",
            "description": "Name of the tablespace.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entity",
            "in": "path",
            "description": "Name of the entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma delimited list of fields to be fetched. Defaults to all.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "in": "query",
            "description": "Name of the metadata tag.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributename",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },

          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional attribute to filter the values. Defaults to returning all values.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Values for a specified domain/tablespaces/entity is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/EntityResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/domains/{domainname}/tablespaces/{tablespace}/entities/{entity}/hazards": {
      "get": {
        "tags": ["Domains"],
        "summary": "Get hazards",
        "description": "",
        "operationId": "getHazardsv1",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "domainname",
            "in": "path",
            "description": "Name of the domain.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tablespace",
            "in": "path",
            "description": "Name of the tablespace.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entity",
            "in": "path",
            "description": "Name of the entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jsonfield",
            "in": "query",
            "description": "Name of the field user wants to fetch in the hazards.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "option",
            "in": "query",
            "description": "Optional attribute to filter the values. Defaults to returning all values.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "in": "query",
            "description": "Name of the metadata tag.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },

          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of hazards for a specified domain/tablespaces/entity is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/EntityResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/domains/{domainname}/tablespaces/{tablespace}/entities/{entity}/secondarymodifiers": {
      "get": {
        "tags": ["Domains"],
        "summary": "Get secondary modifiers",
        "description": "",
        "operationId": "getSecondaryModifiersv1",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "domainname",
            "in": "path",
            "description": "Name of the domain.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tablespace",
            "in": "path",
            "description": "Name of the tablespace.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entity",
            "in": "path",
            "description": "Name of the entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jsonfield",
            "in": "query",
            "description": "Name of the field user wants to fetch in the secondary modifiers.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "option",
            "in": "query",
            "description": "Optional attribute to filter the values. Defaults to returning all values.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "in": "query",
            "description": "Name of the metadata tag.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
            "schema": {
              "type": "string"
            }
          },

          {
            "name": "sort",
            "in": "query",
            "description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of retrieved records to display on the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offSet",
            "in": "query",
            "description": "Number of the page displaying the returned records, \\ starting at _0_.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of secondary modifiers for a specified domain/tablespaces/entity is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/SecondaryModifierResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all \\ required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/exposures/{exposureId}/domains/{domainname}/tablespaces": {
      "get": {
        "tags": ["Domains"],
        "summary": "Get tablespaces",
        "description": "",
        "operationId": "getTablespacesv1",
        "parameters": [
          {
            "name": "exposureId",
            "in": "path",
            "description": "Data source name",
            "required": true,
            "schema": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            }
          },
          {
            "name": "domainname",
            "in": "path",
            "description": "Name of the domain.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of table spaces for a domain is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/DomainReference"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "https://raw.githubusercontent.com/RMS/rms-developers/product/drafts/.assets/irp/components.json#/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "rms_bearer_token": {
        "type": "http",
        "description": "RMS tenant specific bearer token to make authorized requests with temporary life span",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "rms_api_key": {
        "type": "apiKey",
        "name": "Authorization",
        "description": "RMS tenant specific api key to make authorized requests",
        "in": "header"
      }
    }
  }
}
