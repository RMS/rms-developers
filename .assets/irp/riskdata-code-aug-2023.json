{
    "openapi": "3.0.1",
    "paths": {
      "/geohaz/v1/jobs/{jobId}": {
        "get": {
          "tags": [
            "GeoHaz"
          ],
          "summary": "Get job or operation specified by ID",
          "description": "Retrieves information on a specified job or operation by its ID.",
          "operationId": "getGeoHazJob",
          "parameters": [
            {
              "name": "jobId",
              "in": "path",
              "description": "Uniquely identifies the job",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/JobDetailResponse"
                  }
                }
              }
            },
            "204": {
              "description": "No content"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "422": {
              "description": "Unprocessable",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "patch": {
          "tags": [
            "GeoHaz"
          ],
          "summary": "Update geo haz job specified by ID",
          "description": "Update geo haz job by its ID.",
          "operationId": "updateGeoHazJob",
          "parameters": [
            {
              "name": "jobId",
              "in": "path",
              "description": "Uniquely identifies the job",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PatchJobRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "description": "Job successfully updated."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "422": {
              "description": "Unprocessable",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/geohaz/v1/jobs": {
        "get": {
          "tags": [
            "GeoHaz"
          ],
          "summary": "Retrieve and filter a list of jobs",
          "description": "Retrieves a list of jobs filtered by the specified parameters",
          "operationId": "getGeoHazJob_1",
          "parameters": [
            {
              "name": "filter",
              "in": "query",
              "description": "Filters applied to the query results using condition types as shown. \n\n`Relational : (result field name) (relational operator) (value) eg. jobId=\"100\"` \n\n`Boolean : (condition) (boolean operator) (condition) eg. jobId=\"100\" AND status=\"FINISHED\"`",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sort",
              "in": "query",
              "description": "Specify **`ASC`** to display the results in alphabetical or numerical ascending order or **`DESC`** to display the results in descending order.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Number of retrieved records to display on the page.",
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32",
                "default": 100
              }
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Number of the page displaying the returned records, starting at 0.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 0
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/JobResponse"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "post": {
          "tags": [
            "GeoHaz"
          ],
          "summary": "Create a new geo haz job",
          "description": "Create a new geo haz job",
          "operationId": "runGeoHazJob",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeoHaz"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Geo haz job created",
              "headers": {
                "Location": {
                  "description": "location of the job with jobId",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/grouping/v1/jobs/{jobId}": {
        "get": {
          "tags": [
            "Grouping"
          ],
          "summary": "Get job operation specified by ID",
          "description": "Retrieves information on a specified job or operation by its ID.",
          "operationId": "getGroupingJob",
          "parameters": [
            {
              "name": "jobId",
              "in": "path",
              "description": "Uniquely identifies the job",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/JobDetailResponse"
                  }
                }
              }
            },
            "204": {
              "description": "No content"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "422": {
              "description": "Unprocessable",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Grouping"
          ],
          "summary": "Update Grouping job specified by ID",
          "description": "Update Grouping job by its ID.",
          "operationId": "updateGroupingJob",
          "parameters": [
            {
              "name": "jobId",
              "in": "path",
              "description": "Uniquely identifies the job",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PatchJobRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "description": "Job successfully updated."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "422": {
              "description": "Unprocessable",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/grouping/v1/jobs": {
        "get": {
          "tags": [
            "Grouping"
          ],
          "summary": "Retrieve and filter a list of jobs",
          "description": "Retrieves a list of jobs filtered by the specified parameters",
          "operationId": "getGroupingJob_1",
          "parameters": [
            {
              "name": "filter",
              "in": "query",
              "description": "Filters applied to the query results using condition types as shown. \n\n`Relational : (result field name) (relational operator) (value) eg. jobId=\"100\"` \n\n`Boolean : (condition) (boolean operator) (condition) eg. jobId=\"100\" AND status=\"FINISHED\"`",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sort",
              "in": "query",
              "description": "Specify **`ASC`** to display the results in alphabetical or numerical ascending order or **`DESC`** to display the results in descending order.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Number of retrieved records to display on the page.",
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32",
                "default": 100
              }
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Number of the page displaying the returned records, starting at 0.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 0
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/JobResponse"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "post": {
          "tags": [
            "Grouping"
          ],
          "summary": "Create a new grouping job",
          "description": "Create a new grouping job",
          "operationId": "runGroupingJob",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAnalysisGroupRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Grouping job created",
              "headers": {
                "Location": {
                  "description": "location of the job with jobId",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/model/v1/jobs/{jobId}": {
        "get": {
          "tags": [
            "Model"
          ],
          "summary": "Get job or operation specified by ID",
          "description": "Retrieves information on a specified job or operation by its ID.",
          "operationId": "getModelJobs",
          "parameters": [
            {
              "name": "jobId",
              "in": "path",
              "description": "Uniquely identifies the job",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/JobDetailResponse"
                  }
                }
              }
            },
            "204": {
              "description": "No content"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "422": {
              "description": "Unprocessable",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Model"
          ],
          "summary": "Update model job specified by ID",
          "description": "Update model job by its ID.",
          "operationId": "updateModelJob",
          "parameters": [
            {
              "name": "jobId",
              "in": "path",
              "description": "Uniquely identifies the job",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchJobRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "description": "Job successfully updated."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "422": {
              "description": "Unprocessable",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/model/v1/jobs": {
        "get": {
          "tags": [
            "Model"
          ],
          "summary": "Retrieve and filter a list of jobs",
          "description": "Retrieves a list of jobs filtered by the specified parameters",
          "operationId": "getModelJobs_1",
          "parameters": [
            {
              "name": "filter",
              "in": "query",
              "description": "Filters applied to the query results using condition types as shown. \n\n`Relational : (result field name) (relational operator) (value) eg. jobId=\"100\"` \n\n`Boolean : (condition) (boolean operator) (condition) eg. jobId=\"100\" AND status=\"FINISHED\"`",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sort",
              "in": "query",
              "description": "Specify **`ASC`** to display the results in alphabetical or numerical ascending order or **`DESC`** to display the results in descending order.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Number of retrieved records to display on the page.",
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32",
                "default": 100
              }
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Number of the page displaying the returned records, starting at 0.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 0
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/JobResponse"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "post": {
          "tags": [
            "Model"
          ],
          "summary": "Create a new model job",
          "description": "Create a new model job",
          "operationId": "runModelJob",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Model"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Model job created",
              "headers": {
                "Location": {
                  "description": "location of the job with jobId",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/accounts": {
        "get": {
          "tags": [
            "Accounts"
          ],
          "summary": "Get accounts",
          "description": "Retrieves list of accounts for a given exposureId filtered by the specified parameters.",
          "operationId": "getAccounts",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators: \n* Comparison : `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical : `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List : `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching : `q=[attribute][comparison operator][pattern]`, e.g.  `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`To learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sort",
              "in": "query",
              "description": "Specify comma-delimited field names followed by a space with`ASC`(to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Number of retrieved records to display on the page.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Number of the page displaying the returned records, starting at '0'.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "allowDeepFilters",
              "in": "query",
              "description": "If This search was triggered from portfolio starting at '0'.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccountSearch"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "post": {
          "tags": [
            "Accounts"
          ],
          "summary": "Create account",
          "description": "Creates a new account in Risk Modeler.",
          "operationId": "createAccount",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Account created.",
              "headers": {
                "Location": {
                  "description": "Account resource",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/accounts/{id}": {
        "get": {
          "tags": [
            "Accounts"
          ],
          "summary": "Get account",
          "description": "Retrieves information on an account specified by its ID.",
          "operationId": "getAccount",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the account.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Account"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "put": {
          "tags": [
            "Accounts"
          ],
          "summary": "Update account",
          "description": "Updates a account specified by its ID with new information.",
          "operationId": "updateAccount",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the account.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "Validation updated."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Accounts"
          ],
          "summary": "Delete account",
          "description": "Deletes an account specified by its ID.",
          "operationId": "deleteAccount",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the account.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "202": {
              "description": "Accepted",
              "headers": {
                "Location": {
                  "description": "workflowId",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/accounts/{id}/validatemedia": {
        "get": {
          "tags": [
            "Accounts"
          ],
          "summary": "Get validation file by account",
          "description": "Retrieves account validation file specified by account ID",
          "operationId": "downloadValidationAccountFile",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the account.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "*/*": {
                  "schema": {
                    "type": "object"
                  }
                },
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/accounts/{id}/metrics": {
        "get": {
          "tags": [
            "Accounts"
          ],
          "summary": "Get metrics for a specified account",
          "description": "Retrieves metrics for an account specified by its ID.",
          "operationId": "getAccountMetrics",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the account.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Metrics for a specified account are successfully retrieved.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccountMetrics"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/accounts/{id}/countries": {
        "get": {
          "tags": [
            "Accounts"
          ],
          "summary": "Get list of countries covered by a specified account",
          "description": "Gets list of countries covered by an account specified by its ID.",
          "operationId": "getCountriesByAccount",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the account.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "List of countries retrieved.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CountryMetrics"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/accounts/{id}/surplustreatieslocation": {
        "get": {
          "tags": [
            "Accounts"
          ],
          "summary": "Get location level surplus treaties for a specified account",
          "description": "Retrieves location level surplus treaties for an account specified by its ID.",
          "operationId": "getLocationSurplusTreaties",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the account.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Treaty"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/accounts/{id}/sites": {
        "get": {
          "tags": [
            "Accounts"
          ],
          "summary": "Get site names for a specified account",
          "description": "Retrieves a list of site names for an account specified by its ID.",
          "operationId": "getSiteNames",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the account.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "List of site names retrieved.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/accounts/{id}/validate": {
        "get": {
          "tags": [
            "Accounts"
          ],
          "summary": "Validate account",
          "description": "Retrieves validation on an account specified by its ID.",
          "operationId": "validateAccount",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the account.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LocationConditionValidationInfo"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/aggregateportfolios": {
        "get": {
          "tags": [
            "Aggregate Portfolios"
          ],
          "summary": "Get aggregate portfolios",
          "description": "Retrieves list of aggregate portfolios filtered by the specified parameters.",
          "operationId": "searchAggregatePortfolios",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators: \n* Comparison : `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical : `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List : `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching : `q=[attribute][comparison operator][pattern]`, e.g.  `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`To learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sort",
              "in": "query",
              "description": "Specify comma-delimited field names followed by a space with`ASC`(to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Number of retrieved records to display on the page.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Number of the page displaying the returned records, starting at '0'.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AggregatePortfolioSearchItem"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "post": {
          "tags": [
            "Aggregate Portfolios"
          ],
          "summary": "Create a new aggregate portfolio",
          "description": "Creates a new aggregate portfolio.",
          "operationId": "createAggregatePortfolio",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AggregatePortfolio"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Aggregate portfolio successfully created.",
              "headers": {
                "Location": {
                  "description": "Aggregate portfolio resource",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/aggregateportfolios/{id}": {
        "get": {
          "tags": [
            "Aggregate Portfolios"
          ],
          "summary": "Get aggregate portfolio",
          "description": "Retrieves an aggregate portfolios by id.",
          "operationId": "getAggregatePortfolioById",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the aggregate portfolio.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AggregatePortfolioSearchItem"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "put": {
          "tags": [
            "Aggregate Portfolios"
          ],
          "summary": "Update a specified aggregate portfolio",
          "description": "Updates a aggregate portfolio specified by its ID with new information.",
          "operationId": "updateAggregatePortfolio",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the aggregate portfolio.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AggregatePortfolio"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "Aggregate portfolio successfully updated."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Aggregate Portfolios"
          ],
          "summary": "Delete a specified aggregate portfolio",
          "description": "Deletes an aggregate portfolio specified by its ID.",
          "operationId": "deleteAggregatePortfolio",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the aggregate portfolio.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "202": {
              "description": "Accepted",
              "headers": {
                "Location": {
                  "description": "url containing identifier of the submitted workflow.",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/aggregateportfolios/{id}/metrics": {
        "get": {
          "tags": [
            "Aggregate Portfolios"
          ],
          "summary": "Get metrics for a specified aggregate portfolio",
          "description": "Retrieves metrics for a aggregate portfolio specified by its ID.",
          "operationId": "getAggregatePortfolioMetrics",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the aggregate portfolio.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AggregatePortfolioMetrics"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/aggregateportfolios/{id}/treaties": {
        "get": {
          "tags": [
            "Aggregate Portfolios"
          ],
          "summary": "Get treaties applicable by aggregate portfolio",
          "description": "Retrieves treaties applicable for an aggregate portfolio specified by its ID.",
          "operationId": "getAggregatePortfolioTreaties",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the aggregate portfolio.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Treaty"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/aggregateportfolios/{id}/countries": {
        "get": {
          "tags": [
            "Aggregate Portfolios"
          ],
          "summary": "Get countries covered by aggregate portfolio",
          "description": "Gets list of countries covered by an aggregate portfolio specified by its ID.",
          "operationId": "getCountriesByAggregatePortfolio",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the aggregate portfolio.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AggregatePortfolioCountryMetrics"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/aggregateportfolios/{id}/aggregate-exposures-lists": {
        "get": {
          "tags": [
            "Aggregate Portfolios"
          ],
          "summary": "Get list of aggregate exposure values",
          "description": "Retrieves list of aggregate exposure values for a specific aggregate portfolio, country and resolution.",
          "operationId": "searchAggregateExposures",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the aggregate portfolio.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "countryCode",
              "in": "query",
              "description": "Country to filter by.",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "resolution",
              "in": "query",
              "description": "Resolution to filter by.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AggregateExposuresList"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/analyses/{analysisId}/location-aal": {
        "get": {
          "tags": [
            "Analyses"
          ],
          "summary": "Get Location AAL",
          "operationId": "getAALMetrics",
          "parameters": [
            {
              "name": "analysisId",
              "in": "path",
              "description": "ID number of analysis.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "perspective",
              "in": "query",
              "description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sort",
              "in": "query",
              "description": "Specify comma-delimited field names followed by 'ASC' (to display the results in alphabetical or numerical ascending order) or 'DESC' (to display the results in descending order.)",
              "schema": {
                "type": "string",
                "default": "AAL DESC"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Number of retrieved records to display on the page, maximum is 1000",
              "schema": {
                "maximum": 1000,
                "type": "integer",
                "format": "int32",
                "default": 100
              }
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Number of the page displaying the returned records, starting at '0'.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 0
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LocationAAL"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/analyses/{analysisId}/ep/interpolate": {
        "get": {
          "tags": [
            "Analyses"
          ],
          "summary": "Get EP Interpolation results",
          "description": "Retrieves EP Interpolation data for the given metric input values",
          "operationId": "getEPInterpolateMetricResults",
          "parameters": [
            {
              "name": "analysisId",
              "in": "path",
              "description": "ID number of analysis.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "perspective",
              "in": "query",
              "description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "treatyId",
              "in": "query",
              "description": "Treaty ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "exposureResourceId",
              "in": "query",
              "description": "Id of the Exposure Resource",
              "schema": {
                "minimum": 0,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "exposureResourceType",
              "in": "query",
              "description": "Exposure resource type",
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "key",
              "in": "query",
              "description": "Metric Key name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "value",
              "in": "query",
              "description": "Metric Key value",
              "schema": {
                "type": "number",
                "format": "double"
              }
            },
            {
              "name": "metricType",
              "in": "query",
              "description": "Metric Type",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EPInterpolateResult"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/analyses/{analysisId}/ep": {
        "get": {
          "tags": [
            "Analyses"
          ],
          "summary": "Get EP Metrics",
          "operationId": "getEPMetricsByAnalysis",
          "parameters": [
            {
              "name": "analysisId",
              "in": "path",
              "description": "ID number of analysis.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "perspective",
              "in": "query",
              "description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "treatyId",
              "in": "query",
              "description": "Treaty ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "exposureResourceId",
              "in": "query",
              "description": "Id of the Exposure Resource",
              "schema": {
                "minimum": 0,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "exposureResourceType",
              "in": "query",
              "description": "Exposure resource type",
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "metricType",
              "in": "query",
              "description": "Metric Type",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/MetricsOutput"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/analyses/{analysisId}/elt": {
        "get": {
          "tags": [
            "Analyses"
          ],
          "summary": "Get ELT",
          "operationId": "getEventLossTableResults",
          "parameters": [
            {
              "name": "analysisId",
              "in": "path",
              "description": "ID number of analysis.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "perspective",
              "in": "query",
              "description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Number of retrieved records to display on the page, maximum is 100000",
              "schema": {
                "maximum": 100000,
                "minimum": 1,
                "type": "integer",
                "format": "int32",
                "default": 100
              }
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Number of the page displaying the returned records, starting at '0'.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 0
              }
            },
            {
              "name": "treatyId",
              "in": "query",
              "description": "Treaty ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "exposureResourceId",
              "in": "query",
              "description": "Id of the Exposure Resource",
              "schema": {
                "minimum": 0,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "exposureResourceType",
              "in": "query",
              "description": "Exposure resource type",
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "eventIds",
              "in": "query",
              "description": "Event IDs",
              "schema": {
                "maxItems": 25,
                "minItems": 0,
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/EventLossItem"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/analyses/{analysisId}/metrics": {
        "get": {
          "tags": [
            "Analyses"
          ],
          "summary": "Get metrics",
          "operationId": "getMetrics",
          "parameters": [
            {
              "name": "analysisId",
              "in": "path",
              "description": "ID number of analysis.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "metricType",
              "in": "query",
              "description": "metricType",
              "required": true,
              "schema": {
                "type": "string",
                "enum": [
                  "STATS",
                  "ELT",
                  "EP",
                  "MARGINAL_EP",
                  "MARGINAL_STATS"
                ]
              }
            },
            {
              "name": "position",
              "in": "query",
              "description": "position",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            {
              "name": "granularity",
              "in": "query",
              "description": "granularity",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "default": "policy",
                  "enum": [
                    "ACCOUNT",
                    "POLICY"
                  ]
                }
              }
            },
            {
              "name": "epType",
              "in": "query",
              "description": "ep Type",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "OEP",
                    "AEP",
                    "TCE_AEP",
                    "TCE_OEP"
                  ]
                }
              }
            },
            {
              "name": "returnPeriod",
              "in": "query",
              "description": "returnPeriod",
              "schema": {
                "maxItems": 13,
                "minItems": 0,
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            {
              "name": "filterCondition",
              "in": "query",
              "description": "Filter condition",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sort",
              "in": "query",
              "description": "Specify comma-delimited field names followed by 'ASC' (to display the results in alphabetical or numerical ascending order) or 'DESC' (to display the results in descending order.)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Number of retrieved records to display on the page, maximum is 1000",
              "schema": {
                "maximum": 1000,
                "type": "integer",
                "format": "int32",
                "default": 100
              }
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Number of the page displaying the returned records, starting at '0'.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 0
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MetricsResultResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/analyses/{analysisId}/keylosses": {
        "get": {
          "tags": [
            "Analyses"
          ],
          "summary": "Get Key losses",
          "operationId": "getNonEpKeyLoss",
          "parameters": [
            {
              "name": "analysisId",
              "in": "path",
              "description": "ID number of analysis.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "perspective",
              "in": "query",
              "description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "treatyId",
              "in": "query",
              "description": "Treaty ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "exposureResourceId",
              "in": "query",
              "description": "Id of the Exposure Resource",
              "schema": {
                "minimum": 0,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "exposureResourceType",
              "in": "query",
              "description": "Exposure resource type",
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/KeyLossItem"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/analyses/{analysisId}/plt": {
        "get": {
          "tags": [
            "Analyses"
          ],
          "summary": "Get PLT",
          "operationId": "getPeriodLossTableResults",
          "parameters": [
            {
              "name": "analysisId",
              "in": "path",
              "description": "ID number of analysis.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "perspective",
              "in": "query",
              "description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Number of retrieved records to display on the page, maximum is 100000",
              "schema": {
                "maximum": 100000,
                "type": "integer",
                "format": "int32",
                "default": 100
              }
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Number of the page displaying the returned records, starting at '0'.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 0
              }
            },
            {
              "name": "eventIds",
              "in": "query",
              "description": "Event IDs",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "treatyId",
              "in": "query",
              "description": "Treaty ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "exposureResourceId",
              "in": "query",
              "description": "Id of the Exposure Resource",
              "schema": {
                "minimum": 0,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "exposureResourceType",
              "in": "query",
              "description": "Exposure resource type",
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PeriodLossItem"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/analyses/{analysisId}/perspectives": {
        "get": {
          "tags": [
            "Analyses"
          ],
          "summary": "Get perspectives",
          "operationId": "getPerspectivesForAnalysis",
          "parameters": [
            {
              "name": "analysisId",
              "in": "path",
              "description": "ID number of analysis.",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "exposureResourceType",
              "in": "query",
              "description": "Exposure resource type",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EntityItem"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/analyses/{analysisId}/sampledlosses": {
        "get": {
          "tags": [
            "Analyses"
          ],
          "summary": "Get Sampled losses",
          "operationId": "getSampledLoss",
          "parameters": [
            {
              "name": "analysisId",
              "in": "path",
              "description": "ID number of analysis.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "perspective",
              "in": "query",
              "description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Number of retrieved records to display on the page.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "treatyId",
              "in": "query",
              "description": "Treaty ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "exposureResourceId",
              "in": "query",
              "description": "Id of the Exposure Resource",
              "schema": {
                "minimum": 0,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "exposureResourceType",
              "in": "query",
              "description": "Exposure resource type",
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "events",
              "in": "query",
              "description": "EventIds list",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SampledLossItem"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/analyses/{analysisId}/stats": {
        "get": {
          "tags": [
            "Analyses"
          ],
          "summary": "Get statistics",
          "operationId": "getStatisticsResults",
          "parameters": [
            {
              "name": "analysisId",
              "in": "path",
              "description": "ID number of analysis.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "perspective",
              "in": "query",
              "description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "treatyId",
              "in": "query",
              "description": "Treaty ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "exposureResourceId",
              "in": "query",
              "description": "Id of the Exposure Resource",
              "schema": {
                "minimum": 0,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "exposureResourceType",
              "in": "query",
              "description": "Exposure resource type",
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/StatisticsItem"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/analyses/{analysisId}/map-perspective": {
        "post": {
          "tags": [
            "Analyses"
          ],
          "summary": "Map perspective for given analysis",
          "description": "Submit a job to map perspectives on an analysis",
          "operationId": "mapPerspective",
          "parameters": [
            {
              "name": "analysisId",
              "in": "path",
              "description": "Id number of the analysis on which you want to run Map Perspective workflow. Should be valid analysis id.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapPerspectiveInput"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "description": "Accepted",
              "headers": {
                "Location": {
                  "description": "workflowId",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "length": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "location": {
                        "type": "string",
                        "format": "uri"
                      },
                      "language": {
                        "type": "object",
                        "properties": {
                          "language": {
                            "type": "string"
                          },
                          "displayName": {
                            "type": "string"
                          },
                          "script": {
                            "type": "string"
                          },
                          "country": {
                            "type": "string"
                          },
                          "variant": {
                            "type": "string"
                          },
                          "extensionKeys": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "unicodeLocaleAttributes": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "unicodeLocaleKeys": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "iso3Language": {
                            "type": "string"
                          },
                          "iso3Country": {
                            "type": "string"
                          },
                          "displayLanguage": {
                            "type": "string"
                          },
                          "displayScript": {
                            "type": "string"
                          },
                          "displayCountry": {
                            "type": "string"
                          },
                          "displayVariant": {
                            "type": "string"
                          }
                        }
                      },
                      "lastModified": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "date": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "statusInfo": {
                        "type": "object",
                        "properties": {
                          "family": {
                            "type": "string",
                            "enum": [
                              "INFORMATIONAL",
                              "SUCCESSFUL",
                              "REDIRECTION",
                              "CLIENT_ERROR",
                              "SERVER_ERROR",
                              "OTHER"
                            ]
                          },
                          "reasonPhrase": {
                            "type": "string"
                          },
                          "statusCode": {
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      },
                      "links": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string"
                            },
                            "rel": {
                              "type": "string"
                            },
                            "rels": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "uriBuilder": {
                              "type": "object"
                            },
                            "title": {
                              "type": "string"
                            },
                            "uri": {
                              "type": "string",
                              "format": "uri"
                            },
                            "params": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "mediaType": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "subtype": {
                            "type": "string"
                          },
                          "parameters": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "wildcardType": {
                            "type": "boolean"
                          },
                          "wildcardSubtype": {
                            "type": "boolean"
                          }
                        }
                      },
                      "allowedMethods": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "entityTag": {
                        "type": "object",
                        "properties": {
                          "value": {
                            "type": "string"
                          },
                          "weak": {
                            "type": "boolean"
                          }
                        }
                      },
                      "stringHeaders": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "cookies": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            },
                            "version": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "path": {
                              "type": "string"
                            },
                            "domain": {
                              "type": "string"
                            },
                            "comment": {
                              "type": "string"
                            },
                            "maxAge": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "expiry": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "secure": {
                              "type": "boolean"
                            },
                            "httpOnly": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      "status": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "metadata": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          }
                        }
                      },
                      "entity": {
                        "type": "object"
                      },
                      "headers": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/analyses/{analysisId}/rerun-ep": {
        "post": {
          "tags": [
            "Analyses"
          ],
          "summary": "Rerun Ep for given analysis",
          "description": "Submits a single Rerun Ep workflow task and returns a response object containing workflow id.",
          "operationId": "reRunEp",
          "parameters": [
            {
              "name": "analysisId",
              "in": "path",
              "description": "Id number of the analysis on which you want to run Rerun Ep workflow. Should be valid analysis id.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "202": {
              "description": "Accepted",
              "headers": {
                "Location": {
                  "description": "workflowId",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/analyses/{analysisId}/climate-change": {
        "post": {
          "tags": [
            "Analyses"
          ],
          "summary": "Run climate change for this analysis",
          "description": "Submits a single climate change workflow task and returns a response object containing workflow id.",
          "operationId": "runClimateChange",
          "parameters": [
            {
              "name": "analysisId",
              "in": "path",
              "description": "Id number of the analysis on which you want to run climate change analysis. Should be valid analysis Id.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClimateChangeInput"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "description": "Accepted",
              "headers": {
                "Location": {
                  "description": "workflowId",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/analyses/{analysisId}/simulate-losses": {
        "post": {
          "tags": [
            "Analyses"
          ],
          "summary": "Run ELT to PLT conversion for the analysis",
          "description": "Submits a single ELT to PLT conversion workflow task and returns a response object containing workflow id.",
          "operationId": "runELTToPLTConversion",
          "parameters": [
            {
              "name": "analysisId",
              "in": "path",
              "description": "Id number of the analysis on which you want to run ELT to PLT conversion workflow. Should be valid analysis Id.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimulateELTToPLTInput"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "description": "Accepted",
              "headers": {
                "Location": {
                  "description": "workflowId",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/analyses/{analysisId}/bulk-delete-pate": {
        "post": {
          "tags": [
            "Analyses"
          ],
          "summary": "Delete PATE treaties",
          "description": "Delete given list of treaties",
          "operationId": "bulkDeletePate",
          "parameters": [
            {
              "name": "analysisId",
              "in": "path",
              "description": "ID number of analysis.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PateBatchInputRequest"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "Deleted. PATE treaties for given analysis deleted."
            },
            "400": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/analyses/{analysisId}/pate-treaties": {
        "get": {
          "tags": [
            "Analyses"
          ],
          "summary": "Get PATE treaties",
          "description": "Retrieves a list of the pate treaties for a specified analysis",
          "operationId": "getPateList",
          "parameters": [
            {
              "name": "analysisId",
              "in": "path",
              "description": "ID number of analysis.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Number of retrieved records to display on the page, maximum is 1000",
              "schema": {
                "maximum": 1000,
                "type": "integer",
                "format": "int32",
                "default": 100
              }
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Number of the page displaying the returned records, starting at '0'.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 0
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Pate"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Analyses"
          ],
          "summary": "Deletes PATE treaties by analysis",
          "operationId": "deletePateList",
          "parameters": [
            {
              "name": "analysisId",
              "in": "path",
              "description": "ID number of analysis.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Deleted. PATE treaties for analysis deleted."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/analyses/{analysisId}/treaties": {
        "get": {
          "tags": [
            "Analyses"
          ],
          "summary": "Get treaties by analysis",
          "operationId": "getTreatiesList",
          "parameters": [
            {
              "name": "analysisId",
              "in": "path",
              "description": "ID number of analysis.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Number of retrieved records to display on the page, maximum is 1000",
              "schema": {
                "maximum": 1000,
                "type": "integer",
                "format": "int32",
                "default": 100
              }
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Number of the page displaying the returned records, starting at '0'.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 0
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Treaty"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/analyses/{analysisId}/treaty/{treatyId}": {
        "get": {
          "tags": [
            "Analyses"
          ],
          "summary": "Get analysis treaty",
          "description": "Retrieve treaty information based on given analysis and treaty.",
          "operationId": "getTreatyById",
          "parameters": [
            {
              "name": "analysisId",
              "in": "path",
              "description": "ID number of analysis.",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "treatyId",
              "in": "path",
              "description": "Treaty ID",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Treaty"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/analyses/{analysisId}/pate": {
        "post": {
          "tags": [
            "Analyses"
          ],
          "summary": "Processes an existing analysis for running a pate engine",
          "description": "Places an analysis into a queue, Processes an existing analysis for running a pate engine.",
          "operationId": "processPate",
          "parameters": [
            {
              "name": "analysisId",
              "in": "path",
              "description": "ID number of analysis.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "groupInfoOnly",
              "in": "query",
              "description": "Group info only",
              "schema": {
                "type": "boolean",
                "default": true
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PateInput"
                }
              }
            }
          },
          "responses": {
            "202": {
              "description": "Accepted",
              "headers": {
                "Location": {
                  "description": "workflowId",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/analyses/bulk-delete": {
        "post": {
          "tags": [
            "Analyses"
          ],
          "summary": "Delete analysis results",
          "operationId": "bulkDeleteAnalyses",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "maxItems": 10,
                  "minItems": 1,
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "A list of Analyses deleted."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/analyses/{analysisId}/convert-event-rate-loss": {
        "post": {
          "tags": [
            "Analyses"
          ],
          "summary": "Convert event rates and/or adjust losses for given analysis",
          "description": "Submits a single convert event rate and/or loss workflow task and returns a response object containing workflow id.",
          "operationId": "convertAnalysisEvent",
          "parameters": [
            {
              "name": "analysisId",
              "in": "path",
              "description": "Id number of the analysis on which you want to run convert event rate and loss workflow. Should be valid analysis Id.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConvertEventInput"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "description": "Accepted",
              "headers": {
                "Location": {
                  "description": "workflowId",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/analyses/{analysisId}": {
        "put": {
          "tags": [
            "Analyses"
          ],
          "summary": "Run rename-analysis on this analysis",
          "description": "Submits a rename-analysis workflow task and returns a response object containing workflow id.",
          "operationId": "runRenameAnalysis",
          "parameters": [
            {
              "name": "analysisId",
              "in": "path",
              "description": "Id number of the analysis on which you want to run rename-analysis. Should be valid analysis Id.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RenameAnalysisInput"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "description": "Accepted",
              "headers": {
                "Location": {
                  "description": "workflowId",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "length": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "location": {
                        "type": "string",
                        "format": "uri"
                      },
                      "language": {
                        "type": "object",
                        "properties": {
                          "language": {
                            "type": "string"
                          },
                          "displayName": {
                            "type": "string"
                          },
                          "script": {
                            "type": "string"
                          },
                          "country": {
                            "type": "string"
                          },
                          "variant": {
                            "type": "string"
                          },
                          "extensionKeys": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "unicodeLocaleAttributes": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "unicodeLocaleKeys": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "iso3Language": {
                            "type": "string"
                          },
                          "iso3Country": {
                            "type": "string"
                          },
                          "displayLanguage": {
                            "type": "string"
                          },
                          "displayScript": {
                            "type": "string"
                          },
                          "displayCountry": {
                            "type": "string"
                          },
                          "displayVariant": {
                            "type": "string"
                          }
                        }
                      },
                      "lastModified": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "date": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "statusInfo": {
                        "type": "object",
                        "properties": {
                          "family": {
                            "type": "string",
                            "enum": [
                              "INFORMATIONAL",
                              "SUCCESSFUL",
                              "REDIRECTION",
                              "CLIENT_ERROR",
                              "SERVER_ERROR",
                              "OTHER"
                            ]
                          },
                          "reasonPhrase": {
                            "type": "string"
                          },
                          "statusCode": {
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      },
                      "links": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string"
                            },
                            "rel": {
                              "type": "string"
                            },
                            "rels": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "uriBuilder": {
                              "type": "object"
                            },
                            "title": {
                              "type": "string"
                            },
                            "uri": {
                              "type": "string",
                              "format": "uri"
                            },
                            "params": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "mediaType": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "subtype": {
                            "type": "string"
                          },
                          "parameters": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "wildcardType": {
                            "type": "boolean"
                          },
                          "wildcardSubtype": {
                            "type": "boolean"
                          }
                        }
                      },
                      "allowedMethods": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "entityTag": {
                        "type": "object",
                        "properties": {
                          "value": {
                            "type": "string"
                          },
                          "weak": {
                            "type": "boolean"
                          }
                        }
                      },
                      "stringHeaders": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "cookies": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            },
                            "version": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "path": {
                              "type": "string"
                            },
                            "domain": {
                              "type": "string"
                            },
                            "comment": {
                              "type": "string"
                            },
                            "maxAge": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "expiry": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "secure": {
                              "type": "boolean"
                            },
                            "httpOnly": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      "status": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "metadata": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          }
                        }
                      },
                      "entity": {
                        "type": "object"
                      },
                      "headers": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Analyses"
          ],
          "summary": "Deletes a specified Analysis",
          "description": "Deletes an Analysis specified by its id",
          "operationId": "deleteAnalysis",
          "parameters": [
            {
              "name": "analysisId",
              "in": "path",
              "description": "ID number of analysis.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Analysis deleted successfully"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/analyses": {
        "get": {
          "tags": [
            "Analyses"
          ],
          "summary": "Get analyses",
          "operationId": "getAnalyses",
          "parameters": [
            {
              "name": "filter",
              "in": "query",
              "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators: \n* Comparison : `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical : `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List : `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching : `q=[attribute][comparison operator][pattern]`, e.g.  `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`To learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sort",
              "in": "query",
              "description": "Specify comma-delimited field names followed by a space with`ASC`(to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Number of retrieved records to display on the page, maximum is 1000",
              "schema": {
                "maximum": 1000,
                "type": "integer",
                "format": "int32",
                "default": 100
              }
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Number of the page displaying the returned records, starting at '0'.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 0
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Analysis"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/analyses/{analysisId}/analysis-region": {
        "get": {
          "tags": [
            "Analyses"
          ],
          "summary": "Get region details",
          "operationId": "getAnalysisRegions",
          "parameters": [
            {
              "name": "analysisId",
              "in": "path",
              "description": "ID number of analysis.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AnalysisRegion"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/analyses/{analysisId}/cedants": {
        "get": {
          "tags": [
            "Analyses"
          ],
          "summary": "Get cedants by analysis",
          "operationId": "getCedants",
          "parameters": [
            {
              "name": "analysisId",
              "in": "path",
              "description": "ID number of analysis.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "perspective",
              "in": "query",
              "description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Cedant"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/branches": {
        "get": {
          "tags": [
            "Branches"
          ],
          "summary": "Get list of branches",
          "description": "Retrieves a list of the branches in a specified data source.",
          "operationId": "getBranches",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filters applied to the query results using condition types as shown. **Relational : (result field name) (relational operator) (value)** eg. id=100 , id!=100 , id>100 | **Boolean : (condition) (boolean operator) (condition)** eg. id=100 AND name=\"xyz\" , id=100 OR type=\"abc\" | **In List : (result field name) (IN / NOT IN) (values list)** eg. id IN (1,2,3) , name NOT IN (\"abc\",\"xyz\") | **Matching : (result field name) (LIKE / NOT LIKE) (pattern)** eg. name LIKE \"abc* \" , type NOT LIKE \"* xyz* \"",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sort",
              "in": "query",
              "description": "Specify comma-delimited field names followed by 'ASC' (to display the results in alphabetical or numerical ascending order) or 'DESC' (to display the results in descending order.)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Number of retrieved records to display on the page.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Number of the page displaying the returned records, starting at '0'.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Branch"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "post": {
          "tags": [
            "Branches"
          ],
          "summary": "Create new Branch",
          "description": "Creates new Branch in a specified data source.",
          "operationId": "createBranch",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Branch"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "New branch is created in the data source successfully.",
              "headers": {
                "Location": {
                  "description": "Location of the new Branch",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/branches/{id}": {
        "get": {
          "tags": [
            "Branches"
          ],
          "summary": "Get branch by id",
          "description": "Retrieves a branch by id in a specified data source.",
          "operationId": "getBranchById",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID of the branch.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Branch"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "put": {
          "tags": [
            "Branches"
          ],
          "summary": "Updates existing Branch ",
          "description": "Updates existing Branch in a specified data source.",
          "operationId": "updateBranch",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID of the branch.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Branch"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "Branch is updated in the data source successfully."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Branches"
          ],
          "summary": "Deletes existing Branch ",
          "description": "Deletes existing Branch in a specified data source.",
          "operationId": "deleteBranch",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID of the branch.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Branch is deleted from the data source successfully."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/cedants": {
        "get": {
          "tags": [
            "Cedants"
          ],
          "summary": "Get cedants",
          "description": "Retrieves a list of the cedants in a specified exposure.",
          "operationId": "getCedants_1",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators: \n* Comparison : `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical : `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List : `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching : `q=[attribute][comparison operator][pattern]`, e.g.  `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`To learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sort",
              "in": "query",
              "description": "Specify comma-delimited field names followed by a space with`ASC`(to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Number of retrieved records to display on the page.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Number of the page displaying the returned records, starting at '0'.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Cedant"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "post": {
          "tags": [
            "Cedants"
          ],
          "summary": "Create cedant ",
          "description": "Creates new Cedant in a specified exposure.",
          "operationId": "createCedant",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cedant"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "New cedant is created in the exposure successfully.",
              "headers": {
                "Location": {
                  "description": "Location of the new Cedant",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "409": {
              "description": "Conflict. Resource already exists.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/cedants/{id}": {
        "get": {
          "tags": [
            "Cedants"
          ],
          "summary": "Get cedant",
          "description": "Retrieves a cedant by id in a specified exposure.",
          "operationId": "getCedantById",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID of the cedant.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Cedant"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "put": {
          "tags": [
            "Cedants"
          ],
          "summary": "Update cedant ",
          "description": "Updates existing Cedant in a specified exposure.",
          "operationId": "updateCedant",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID of the cedant.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cedant"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "Cedant is updated in the exposure successfully."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Cedants"
          ],
          "summary": "Delete cedant ",
          "description": "Deletes existing Cedant in a specified exposure.",
          "operationId": "deleteCedant",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID of the cedant.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Cedant is deleted from the exposure successfully."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/dataservers": {
        "get": {
          "tags": [
            "DataServers"
          ],
          "summary": "Get SQL server instances",
          "description": "Get list of all tenant DB instance based on query parameters",
          "operationId": "searchDbInstances",
          "parameters": [
            {
              "name": "filter",
              "in": "query",
              "description": "Filters applied to the query results using condition types as shown. **Relational : (result field name) (relational operator) (value)** eg. id=100 , id!=100 , id>100 | **Boolean : (condition) (boolean operator) (condition)** eg. id=100 AND name=\"xyz\" , id=100 OR type=\"abc\" | **In List : (result field name) (IN / NOT IN) (values list)** eg. id IN (1,2,3) , name NOT IN (\"abc\",\"xyz\") | **Matching : (result field name) (LIKE / NOT LIKE) (pattern)** eg. name LIKE \"abc* \" , type NOT LIKE \"* xyz* \"",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/DataServer"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposuresets/{exposureSetId}/exposures": {
        "post": {
          "tags": [
            "Exposures"
          ],
          "summary": "Create Exposure / EDM",
          "operationId": "createExposures",
          "parameters": [
            {
              "name": "exposureSetId",
              "in": "path",
              "description": "Id for exposure set",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateExposureRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "description": "Accepted: A job with the specified ID for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
              "headers": {
                "Location": {
                  "description": "url containing identifier of the submitted workflow.",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}": {
        "get": {
          "tags": [
            "Exposures"
          ],
          "summary": "Get exposure/EDM by Id",
          "description": "Get list of Exposures based on query and pagination criteria.",
          "operationId": "searchExposureById",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Exposure"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Exposures"
          ],
          "summary": "Delete Exposure",
          "operationId": "deleteExposure",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "202": {
              "description": "Accepted",
              "headers": {
                "Location": {
                  "description": "Resource Location",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures": {
        "get": {
          "tags": [
            "Exposures"
          ],
          "summary": "Get exposures/EDMs",
          "description": "Get list of EDMs based on query and pagination criteria.",
          "operationId": "searchExposures",
          "parameters": [
            {
              "name": "filter",
              "in": "query",
              "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators: \n* Comparison : `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical : `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List : `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching : `q=[attribute][comparison operator][pattern]`, e.g.  `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`To learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sort",
              "in": "query",
              "description": "Specify 'ASC' to display the results in alphabetical or numerical ascending order or 'DESC' to display the results in descending order.",
              "schema": {
                "type": "string",
                "default": "name ASC"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Number of retrieved records to display on the page.",
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32",
                "default": 100
              }
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Number of the page displaying the returned records, starting at '0'.",
              "schema": {
                "minimum": 0,
                "type": "integer",
                "format": "int32",
                "default": 0
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Exposure"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/data-upgrade": {
        "post": {
          "tags": [
            "Exposures"
          ],
          "summary": "Upgrade Exposure / EDM Data Version",
          "operationId": "upgradeExposure",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpgradeExposureRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "description": "Accepted",
              "headers": {
                "Location": {
                  "description": "Resource Location",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposuresets": {
        "get": {
          "tags": [
            "ExposureSets"
          ],
          "summary": "Get ExposureSets",
          "operationId": "searchExposureSets",
          "parameters": [
            {
              "name": "filter",
              "in": "query",
              "description": "Filters applied to the query results using condition types as shown. **Relational : (result field name) (relational operator) (value)** eg. id=100 , id!=100 , id>100 | **Boolean : (condition) (boolean operator) (condition)** eg. id=100 AND name=\"xyz\" , id=100 OR type=\"abc\" | **In List : (result field name) (IN / NOT IN) (values list)** eg. id IN (1,2,3) , name NOT IN (\"abc\",\"xyz\") | **Matching : (result field name) (LIKE / NOT LIKE) (pattern)** eg. name LIKE \"abc* \" , type NOT LIKE \"* xyz* \"",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sort",
              "in": "query",
              "description": "Specify comma-delimited field names followed by a space with`ASC`(to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Number of retrieved records to display on the page.",
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32",
                "default": 100
              }
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Number of the page displaying the returned records, starting at '0'.",
              "schema": {
                "minimum": 0,
                "type": "integer",
                "format": "int32",
                "default": 0
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ExposureSet"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "post": {
          "tags": [
            "ExposureSets"
          ],
          "summary": "Create Exposure Set",
          "operationId": "createExposureSet",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExposureSet"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Success",
              "headers": {
                "Location": {
                  "description": "Resource Location",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden: Access to this resource is denied.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposuresets/{exposureSetId}": {
        "get": {
          "tags": [
            "ExposureSets"
          ],
          "summary": "Get Exposure Set by Id",
          "operationId": "getExposureSetById",
          "parameters": [
            {
              "name": "exposureSetId",
              "in": "path",
              "description": "Id for ExposureSet",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ExposureSet"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "patch": {
          "tags": [
            "ExposureSets"
          ],
          "summary": "Update Exposure Set",
          "operationId": "updateExposureSet",
          "parameters": [
            {
              "name": "exposureSetId",
              "in": "path",
              "description": "Id for ExposureSet",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "Specify the patch request input",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PatchExposureSetRequest"
                  }
                }
              }
            }
          },
          "responses": {
            "204": {
              "description": "Updated"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/faclayers": {
        "get": {
          "tags": [
            "Utilities"
          ],
          "summary": "Get facultatives",
          "operationId": "getFacultatives",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators: \n* Comparison : `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical : `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List : `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching : `q=[attribute][comparison operator][pattern]`, e.g.  `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`To learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sort",
              "in": "query",
              "description": "Specify comma-delimited field names followed by a space with`ASC`(to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Number of retrieved records to display on the page.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Number of the page displaying the returned records, starting at '0'.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Facultative"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "post": {
          "tags": [
            "Utilities"
          ],
          "summary": "Create facultative",
          "operationId": "createFacultative",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Facultative"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "New facultative is created in the exposure  successfully.",
              "headers": {
                "Location": {
                  "description": "Location of the new Facultative",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "409": {
              "description": "Conflict. Resource already exists.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/faclayers/{id}": {
        "get": {
          "tags": [
            "Utilities"
          ],
          "summary": "Get facultative by ID",
          "operationId": "getFacultativeById",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID of the faclutative.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Facultative"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "put": {
          "tags": [
            "Utilities"
          ],
          "summary": "Update facultative",
          "operationId": "updateFacultative",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID of the faclutative.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Facultative"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "Facultative is updated in the exposure successfully."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Utilities"
          ],
          "summary": "Delete facultative ",
          "operationId": "deleteFacultative",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID of the faclutative.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Facultative is deleted from the exposure successfully."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/globaledit/dryrun": {
        "post": {
          "tags": [
            "Utilities"
          ],
          "summary": "Update exposures dry run",
          "operationId": "dryRun",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "exposureResourceId",
              "in": "query",
              "description": "Id of the Exposure Resource",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "exposureResourceType",
              "in": "query",
              "description": "Exposure Resource type: ACCOUNT or PORTFOLIO.",
              "required": true,
              "schema": {
                "type": "string",
                "enum": [
                  "PORTFOLIO",
                  "ACCOUNT",
                  "LOCATION",
                  "POLICY",
                  "STEP_POLICY",
                  "TREATY",
                  "AGGPORTFOLIO"
                ]
              }
            }
          ],
          "requestBody": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/globaledit": {
        "post": {
          "tags": [
            "Utilities"
          ],
          "summary": "Update exposures",
          "operationId": "edit",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "exposureResourceId",
              "in": "query",
              "description": "Id of the Exposure Resource",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "exposureResourceType",
              "in": "query",
              "description": "Exposure Resource type: ACCOUNT or PORTFOLIO.",
              "required": true,
              "schema": {
                "type": "string",
                "enum": [
                  "PORTFOLIO",
                  "ACCOUNT",
                  "LOCATION",
                  "POLICY",
                  "STEP_POLICY",
                  "TREATY",
                  "AGGPORTFOLIO"
                ]
              }
            }
          ],
          "requestBody": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "description": "Accepted",
              "headers": {
                "Location": {
                  "description": "workflowId",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/jobs/{jobId}": {
        "get": {
          "tags": [
            "RiskData"
          ],
          "summary": "Get job or operation specified by ID",
          "description": "Retrieves information on a specified job or operation by its ID.",
          "operationId": "getRiskDataJob",
          "parameters": [
            {
              "name": "jobId",
              "in": "path",
              "description": "Uniquely identifies the job",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/JobDetailResponse"
                  }
                }
              }
            },
            "204": {
              "description": "No content"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "422": {
              "description": "Unprocessable",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "patch": {
          "tags": [
            "RiskData"
          ],
          "summary": "Update risk data job specified by ID",
          "description": "Update risk data job by its ID.",
          "operationId": "updateRiskDataJob",
          "parameters": [
            {
              "name": "jobId",
              "in": "path",
              "description": "Uniquely identifies the job",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PatchJobRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "description": "Job successfully updated."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "422": {
              "description": "Unprocessable",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/jobs": {
        "get": {
          "tags": [
            "RiskData"
          ],
          "summary": "Retrieve and filter a list of jobs",
          "description": "Retrieves a list of jobs filtered by the specified parameters",
          "operationId": "getRiskDataJob_1",
          "parameters": [
            {
              "name": "filter",
              "in": "query",
              "description": "Filters applied to the query results using condition types as shown. \n\n`Relational : (result field name) (relational operator) (value) eg. jobId=\"100\"` \n\n`Boolean : (condition) (boolean operator) (condition) eg. jobId=\"100\" AND status=\"FINISHED\"`",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sort",
              "in": "query",
              "description": "Specify **`ASC`** to display the results in alphabetical or numerical ascending order or **`DESC`** to display the results in descending order.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Number of retrieved records to display on the page.",
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32",
                "default": 100
              }
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Number of the page displaying the returned records, starting at 0.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 0
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/JobResponse"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/lobs": {
        "get": {
          "tags": [
            "Line of Business"
          ],
          "summary": "Get lines of business",
          "description": "Retrieves a list of the lineOfBusinesses in a specified exposure.",
          "operationId": "getLinesOfBusiness",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators: \n* Comparison : `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical : `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List : `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching : `q=[attribute][comparison operator][pattern]`, e.g.  `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`To learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sort",
              "in": "query",
              "description": "Specify comma-delimited field names followed by a space with`ASC`(to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Number of retrieved records to display on the page.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Number of the page displaying the returned records, starting at '0'.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LineOfBusiness"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "post": {
          "tags": [
            "Line of Business"
          ],
          "summary": "Create line of business",
          "description": "Creates new LineOfBusiness in a specified exposure.",
          "operationId": "createLineOfBusiness",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LineOfBusiness"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "New LineOfBusiness is created in the exposure successfully.",
              "headers": {
                "Location": {
                  "description": "Location of the new LineOfBusiness",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/lobs/{id}": {
        "get": {
          "tags": [
            "Line of Business"
          ],
          "summary": "Get line of business by ID",
          "description": "Retrieves a LineOfBusiness by id in a specified exposure.",
          "operationId": "getLineOfBusinessById",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID of the LineOfBusiness.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LineOfBusiness"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "put": {
          "tags": [
            "Line of Business"
          ],
          "summary": "Update line of business",
          "description": "Updates existing LineOfBusiness in a specified exposure.",
          "operationId": "updateLineOfBusiness",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID of the LineOfBusiness.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LineOfBusiness"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "LineOfBusiness is updated in the exposure successfully."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Line of Business"
          ],
          "summary": "Delete line of business",
          "description": "Deletes existing LineOfBusiness in a specified exposure.",
          "operationId": "deleteLineOfBusiness",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID of the LineOfBusiness.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "LineOfBusiness is deleted from the exposure successfully."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/locations/{id}/buildingattribute": {
        "post": {
          "tags": [
            "Locations"
          ],
          "summary": "Creates a new building attribute",
          "operationId": "createBuildingAttribute",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuildingAttribute"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Building attribute successfully created",
              "headers": {
                "Location": {
                  "description": "Location of the new building attribute",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/locations": {
        "get": {
          "tags": [
            "Locations"
          ],
          "summary": "Get locations",
          "description": "Retrieves list of locations filtered by the specified parameters",
          "operationId": "searchLocations",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filters applied to the query results using condition types as shown. **Relational : (result field name) (relational operator) (value)** eg. id=100 , id!=100 , id>100 | **Boolean : (condition) (boolean operator) (condition)** eg. id=100 AND name=\"xyz\" , id=100 OR type=\"abc\" | **In List : (result field name) (IN / NOT IN) (values list)** eg. id IN (1,2,3) , name NOT IN (\"abc\",\"xyz\") | **Matching : (result field name) (LIKE / NOT LIKE) (pattern)** eg. name LIKE \"abc* \" , type NOT LIKE \"* xyz* \"",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sort",
              "in": "query",
              "description": "Specify comma-delimited field names followed by 'ASC' (to display the results in alphabetical or numerical ascending order) or 'DESC' (to display the results in descending order.)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Number of retrieved records to display on the page.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Number of the page displaying the returned records, starting at '0'.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "withflzone",
              "in": "query",
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LocationSearchItem"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "post": {
          "tags": [
            "Locations"
          ],
          "summary": "Create location",
          "operationId": "createLocation",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Created. New location is successfully created.",
              "headers": {
                "Location": {
                  "description": "URL for the new location",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/locations/{id}/locationbidetail": {
        "post": {
          "tags": [
            "Locations"
          ],
          "summary": "Create BI peril",
          "description": "Create a new bi detail",
          "operationId": "createLocationBiDetail",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationBiDetail"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Bi detail successfully created.",
              "headers": {
                "Location": {
                  "description": "Location of the new bi detail",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/locations/{id}/locationconditions": {
        "post": {
          "tags": [
            "Locations"
          ],
          "summary": "Creates location condition",
          "operationId": "createLocationCondition",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationCondition"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Location condition successfully created",
              "headers": {
                "Location": {
                  "description": "Location of the new location condition",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/locations/{id}/locationcoverages": {
        "post": {
          "tags": [
            "Locations"
          ],
          "summary": "Creates coverage",
          "operationId": "createLocationCoverage",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationCoverage"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Coverage successfully created.",
              "headers": {
                "Location": {
                  "description": "Location of the new coverage",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/locations/{id}/locationeqdetail": {
        "post": {
          "tags": [
            "Locations"
          ],
          "summary": "Creates EQ peril",
          "operationId": "createLocationEqDetail",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationEqDetail"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "EQ detail successfully created.",
              "headers": {
                "Location": {
                  "description": "Location of the new EQ detail",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/locations/{id}/locationfldetail": {
        "post": {
          "tags": [
            "Locations"
          ],
          "summary": "Creates FL peril",
          "operationId": "createLocationFlDetail",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationFlDetail"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Created",
              "headers": {
                "Location": {
                  "description": "Location of the new FL detail",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/locations/{id}/locationfrdetail": {
        "post": {
          "tags": [
            "Locations"
          ],
          "summary": "Creates FR peril",
          "operationId": "createLocationFrDetail",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationFrDetail"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "FR Detail successfully created",
              "headers": {
                "Location": {
                  "description": "Location of new FR detail",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/locations/{id}/locationcessions": {
        "post": {
          "tags": [
            "Locations"
          ],
          "summary": "Creates location reinsurance cession",
          "operationId": "createLocationReinsuranceCession",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReinsuranceCession"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Created. New location reinsurance cession is successfully created.",
              "headers": {
                "Location": {
                  "description": "url of the new location reinsurance cession",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/locations/{id}/locationtodetail": {
        "post": {
          "tags": [
            "Locations"
          ],
          "summary": "Creates Location TO peril",
          "operationId": "createLocationToDetail",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationToDetail"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "TO detail successfully created",
              "headers": {
                "Location": {
                  "description": "Location of the new TO detail",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/locations/{id}/locationtrdetail": {
        "post": {
          "tags": [
            "Locations"
          ],
          "summary": "Creates TR peril",
          "operationId": "createLocationTrDetail",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationTrDetail"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Location TR details successfully created.",
              "headers": {
                "Location": {
                  "description": "Location of Location TR Details",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/locations/{id}/locationwcdetail": {
        "post": {
          "tags": [
            "Locations"
          ],
          "summary": "Create WC peril",
          "operationId": "createLocationWcDetail",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationWcDetail"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Location WC details successfully created",
              "headers": {
                "Location": {
                  "description": "Location of Location WC Detail",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/locations/{id}/locationwsdetail": {
        "post": {
          "tags": [
            "Locations"
          ],
          "summary": "Creates WS peril",
          "operationId": "createLocationWsDetail",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationWsDetail"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Location WS Details successfully created",
              "headers": {
                "Location": {
                  "description": "Location of Location WS Details",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/locations/{id}/buildingattribute/{buildingattributeid}": {
        "get": {
          "tags": [
            "Locations"
          ],
          "summary": "Get building attribute",
          "operationId": "getBuildingAttribute",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "buildingattributeid",
              "in": "path",
              "description": "ID number of the building attribute.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BuildingAttribute"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "put": {
          "tags": [
            "Locations"
          ],
          "summary": "Update building attribute",
          "operationId": "updateBuildingAttribute",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "buildingattributeid",
              "in": "path",
              "description": "ID number of the location building attribute record.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuildingAttribute"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "Building attribute updated"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Locations"
          ],
          "summary": "Delete building attribute",
          "operationId": "deleteBuildingAttribute",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "buildingattributeid",
              "in": "path",
              "description": "ID number of the location building attribute record.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Building attribute successfully deleted"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/locations/{id}": {
        "get": {
          "tags": [
            "Locations"
          ],
          "summary": "Get location details by location id",
          "operationId": "getLocationById",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Location"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "put": {
          "tags": [
            "Locations"
          ],
          "summary": "Updates location",
          "operationId": "updateLocation",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "Location updated"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Locations"
          ],
          "summary": "Delete location",
          "operationId": "deleteLocation",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Location successfully deleted."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/locations/{id}/locationbidetail/{locationbidetailid}": {
        "get": {
          "tags": [
            "Locations"
          ],
          "summary": "Get BI peril by location",
          "operationId": "getLocationBiDetail",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "locationbidetailid",
              "in": "path",
              "description": "ID number of the location bi detail record.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns location bi detail",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LocationBiDetail"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "put": {
          "tags": [
            "Locations"
          ],
          "summary": "Updates bi detail",
          "description": "Updates bi detail",
          "operationId": "updateLocationBiDetail",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "locationbidetailid",
              "in": "path",
              "description": "ID number of the location bi detail record.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationBiDetail"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "Bi detail successfully updated."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MetaLinks"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Locations"
          ],
          "summary": "Deletes a location bi detail",
          "description": "Deletes a location bi detail",
          "operationId": "deleteLocationBiDetail",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "locationbidetailid",
              "in": "path",
              "description": "ID number of the location bi detail record.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Bi detail successfully deleted"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/locations/{id}/locationconditions/{conditionid}": {
        "get": {
          "tags": [
            "Locations"
          ],
          "summary": "Gets a location condition",
          "description": "Gets a location condition",
          "operationId": "getLocationConditionById",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "conditionid",
              "in": "path",
              "description": "ID number of the location condition.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Building attribute successfully retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LocationCondition"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "put": {
          "tags": [
            "Locations"
          ],
          "summary": "Updates location condition",
          "description": "Updates location condition",
          "operationId": "updateLocationCondition",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "conditionid",
              "in": "path",
              "description": "ID number of the location condition record.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationCondition"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "Location condition successfully updated"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MetaLinks"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Locations"
          ],
          "summary": "Deletes a location condition",
          "description": "Deletes a location condition",
          "operationId": "deleteLocationCondition",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "conditionid",
              "in": "path",
              "description": "ID number of the location condition record.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Location condition successfully deleted"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/locations/{id}/locationcoverages/{coverageid}": {
        "get": {
          "tags": [
            "Locations"
          ],
          "summary": "Gets a location coverage",
          "description": "Gets a location coverage",
          "operationId": "getLocationCoverage",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "coverageid",
              "in": "path",
              "description": "ID number of the location coverage record.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LocationCoverage"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "put": {
          "tags": [
            "Locations"
          ],
          "summary": "Updates coverage",
          "description": "Updates coverage",
          "operationId": "updateLocationCoverage",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "coverageid",
              "in": "path",
              "description": "ID number of the location coverage record.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationCoverage"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "Coverage successfully updated"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MetaLinks"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Locations"
          ],
          "summary": "Deletes a location coverage",
          "description": "Deletes a location coverage",
          "operationId": "deleteLocationCoverage",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "coverageid",
              "in": "path",
              "description": "ID number of the location coverage record.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Location coverage successfully deleted."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/locations/{id}/locationeqdetail/{locationeqdetailid}": {
        "get": {
          "tags": [
            "Locations"
          ],
          "summary": "Gets a location EQ detail",
          "description": "Gets a location EQ detail",
          "operationId": "getLocationEqDetail",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "locationeqdetailid",
              "in": "path",
              "description": "ID number of the location earthquake record.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "EQ detail successfully retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LocationEqDetail"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "put": {
          "tags": [
            "Locations"
          ],
          "summary": "Updates EQ detail",
          "description": "Updates EQ detail",
          "operationId": "updateLocationEqDetail",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "locationeqdetailid",
              "in": "path",
              "description": "ID number of the location earthquake record.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationEqDetail"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "EQ Detail Successfully updated"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MetaLinks"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Locations"
          ],
          "summary": "Deletes a location EQ detail",
          "description": "Deletes a location EQ detail",
          "operationId": "deleteLocationEqDetail",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "locationeqdetailid",
              "in": "path",
              "description": "ID number of the location earthquake record.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "EQ detail successfully deleted."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/locations/{id}/locationfldetail/{locationfldetailid}": {
        "get": {
          "tags": [
            "Locations"
          ],
          "summary": "Gets a location FL detail",
          "description": "Gets a location FL detail",
          "operationId": "getLocationFlDetail",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "locationfldetailid",
              "in": "path",
              "description": "ID number of the location flood record.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "FL detail successfully retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LocationFlDetail"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "put": {
          "tags": [
            "Locations"
          ],
          "summary": "Updates FL detail",
          "description": "Updates FL detail",
          "operationId": "updateLocationFlDetail",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "locationfldetailid",
              "in": "path",
              "description": "ID number of the location flood record.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationFlDetail"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "FL detail successfully updated"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found."
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Locations"
          ],
          "summary": "Deletes a location FL detail",
          "description": "Deletes a location FL detail",
          "operationId": "deleteLocationFlDetail",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "locationfldetailid",
              "in": "path",
              "description": "ID number of the location flood record.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "FL detail successfully deleted"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/locations/{id}/locationfrdetail/{locationfrdetailid}": {
        "get": {
          "tags": [
            "Locations"
          ],
          "summary": "Gets a location FR detail",
          "description": "Gets a location FR detail",
          "operationId": "getLocationFrDetail",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "locationfrdetailid",
              "in": "path",
              "description": "ID number of the location fire record.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "FR detail successfully retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LocationFrDetail"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "put": {
          "tags": [
            "Locations"
          ],
          "summary": "Updates FR detail",
          "description": "Updates FR detail",
          "operationId": "updateLocationFrDetail",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "locationfrdetailid",
              "in": "path",
              "description": "ID number of the location fire record.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationFrDetail"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "FR detail successfully updated."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Locations"
          ],
          "summary": "Deletes a location FR detail",
          "description": "Deletes a location FR detail",
          "operationId": "deleteLocationFrDetail",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "locationfrdetailid",
              "in": "path",
              "description": "ID number of the location fire record.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "FR detail successfully deleted"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/locations/{id}/locationcessions/{cessionid}": {
        "get": {
          "tags": [
            "Locations"
          ],
          "summary": "Gets ReinsuranceCession details by cession id.",
          "description": "Gets ReinsuranceCession details by cession id.",
          "operationId": "getLocationReinsuranceCessionDetail",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "cessionid",
              "in": "path",
              "description": "ID number of the cession.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "ReinsuranceCession details successfully returned.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ReinsuranceCession"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "put": {
          "tags": [
            "Locations"
          ],
          "summary": "Updates a location reinsurance cession",
          "description": "Updates a location reinsurance cession",
          "operationId": "updateLocationReinsuranceCession",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "cessionid",
              "in": "path",
              "description": "ID number of the cession.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReinsuranceCession"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "Location reinsurance cession successfully updated"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Locations"
          ],
          "summary": "Deletes a location reinsurance cession",
          "description": "Deletes a location reinsurance cession",
          "operationId": "deleteLocationReinsuranceCession",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "cessionid",
              "in": "path",
              "description": "ID number of the cession.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Location reinsurance cession successfully deleted."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/locations/{id}/locationtodetail/{locationtodetailid}": {
        "get": {
          "tags": [
            "Locations"
          ],
          "summary": "Gets a location TO detail",
          "description": "Gets a location TO detail",
          "operationId": "getLocationToDetail",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "locationtodetailid",
              "in": "path",
              "description": "ID number of the location tornado record.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "TO detail successfully retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LocationToDetail"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "put": {
          "tags": [
            "Locations"
          ],
          "summary": "Updates TO detail",
          "description": "Updates TO detail",
          "operationId": "updateLocationToDetail",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "locationtodetailid",
              "in": "path",
              "description": "ID number of the location tornado record.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationToDetail"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "TO detail successfully updated"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MetaLinks"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Locations"
          ],
          "summary": "Deletes a location TO detail",
          "description": "Deletes a location TO detail",
          "operationId": "deleteLocationToDetail",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "locationtodetailid",
              "in": "path",
              "description": "ID number of the location tornado record.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "TO detail successfully deleted"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/locations/{id}/locationtrdetail/{locationtrdetailid}": {
        "get": {
          "tags": [
            "Locations"
          ],
          "summary": "Gets a location TR detail",
          "description": "Gets a location TR detail",
          "operationId": "getLocationTrDetail",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "locationtrdetailid",
              "in": "path",
              "description": "ID number of the location terrorism record.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Location TR detail successfully retrieved.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LocationTrDetail"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "put": {
          "tags": [
            "Locations"
          ],
          "summary": "Updates a location TR detail",
          "description": "Updates a location TR detail",
          "operationId": "updateLocationTrDetail",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "locationtrdetailid",
              "in": "path",
              "description": "ID number of the location terrorism record.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationTrDetail"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "Location TR detail successfully updated."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Locations"
          ],
          "summary": "Deletes a location terrorism detail",
          "description": "Deletes a location TR detail",
          "operationId": "deleteLocationTrDetail",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "locationtrdetailid",
              "in": "path",
              "description": "ID number of the location terrorism record.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Location TR detail successfully deleted."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/locations/{id}/locationwcdetail/{locationwcdetailid}": {
        "get": {
          "tags": [
            "Locations"
          ],
          "summary": "Gets a location WC detail",
          "description": "Gets a location WC detail",
          "operationId": "getLocationWcDetail",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "locationwcdetailid",
              "in": "path",
              "description": "ID number of the location worker compensation record.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Location WC detail successfully retrieved.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LocationWcDetail"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "put": {
          "tags": [
            "Locations"
          ],
          "summary": "Updates a location WC detail",
          "description": "Updates a location WC detail",
          "operationId": "updateLocationWcDetail",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "locationwcdetailid",
              "in": "path",
              "description": "ID number of the location worker compensation record.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationWcDetail"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "Location WC details successfully updated."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Locations"
          ],
          "summary": "Deletes a location WC detail",
          "description": "Deletes a location WC detail",
          "operationId": "deleteLocationWcDetail",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "locationwcdetailid",
              "in": "path",
              "description": "ID number of the location worker compensation record.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Location WC detail successfully deleted."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/locations/{id}/locationwsdetail/{locationwsdetailid}": {
        "get": {
          "tags": [
            "Locations"
          ],
          "summary": "Gets a location WS detail",
          "description": "Gets a location WS detail",
          "operationId": "getLocationWsDetail",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "locationwsdetailid",
              "in": "path",
              "description": "ID number of the location windstorm record.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Location WS Detail successfully retrieved.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LocationWsDetail"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "put": {
          "tags": [
            "Locations"
          ],
          "summary": "Updates a location WS detail",
          "description": "Updates a location WS detail",
          "operationId": "updateLocationWsDetail",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "locationwsdetailid",
              "in": "path",
              "description": "ID number of the location windstorm record.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationWsDetail"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "Location WS Detail successfully updated."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Locations"
          ],
          "summary": "Deletes a Location WS Detail",
          "description": "Deletes a Location WS Detail",
          "operationId": "deleteLocationWsDetail",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "locationwsdetailid",
              "in": "path",
              "description": "ID number of the location windstorm record.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Location WS Detail successfully deleted."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/locations/{id}/geocode": {
        "post": {
          "tags": [
            "Locations"
          ],
          "summary": "Geocode a location",
          "description": "Geocodes a single location by ID.",
          "operationId": "geoCodeByLocationId",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LayerInfo"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Created. The location geocod request is created successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Address"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/locations/{id}/policyconditions": {
        "get": {
          "tags": [
            "Locations"
          ],
          "summary": "Get policy conditions for a location",
          "description": "Retrieves policy conditions for a location",
          "operationId": "getPolicyConditions",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "location Id",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": " Policy conditions successfully retrieved.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PolicyCondition"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/policyconditions": {
        "get": {
          "tags": [
            "Policy Conditions"
          ],
          "summary": "Get policy conditions",
          "description": "Retrieves all policy conditions in the EDM.",
          "operationId": "getAllPolicyConditions",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PolicyCondition"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/policyconditions/{conditionid}": {
        "get": {
          "tags": [
            "Policy Conditions"
          ],
          "summary": "Get policy condition",
          "operationId": "getPolicyCondition",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "conditionid",
              "in": "path",
              "description": "ID number of the Policy Condition",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PolicyCondition"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/policies/{id}/policyconditions/{conditionid}/backfill": {
        "post": {
          "tags": [
            "Policies"
          ],
          "summary": "Back fill policy condition",
          "operationId": "backFillPolicyCondition",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the Policy",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "conditionid",
              "in": "path",
              "description": "ID number of the Policy Condition",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "202": {
              "description": "Accepted"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/policies": {
        "get": {
          "tags": [
            "Policies"
          ],
          "summary": "Get policies",
          "description": "Retrieves list of policies filtered by the specified parameters.",
          "operationId": "searchPolicies",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Optional attribute to filter the values. Defaults to returning all values.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sort",
              "in": "query",
              "description": "Specify comma-delimited field names followed by 'ASC' (to display the results in alphabetical or numerical ascending order) or 'DESC' (to display the results in descending order.)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Number of retrieved records to display on the page.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Number of the page displaying the returned records, starting at '0'.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "List of policies is successfully retrieved.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Policy"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "post": {
          "tags": [
            "Policies"
          ],
          "summary": "Create a policy",
          "description": "Creates a policy.",
          "operationId": "createPolicy",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Policy is successfully created.",
              "headers": {
                "Location": {
                  "description": "Location of the new policy",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/policies/{id}/policyconditions": {
        "post": {
          "tags": [
            "Policies"
          ],
          "summary": "Create policy condition",
          "description": "Creates a condition for a policy specified by its ID.",
          "operationId": "createPolicyCondition",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the Policy",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyCondition"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Condition for a specified policy is successfully created.",
              "headers": {
                "Location": {
                  "description": "location of the new policy condition",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/policies/{id}/policyconditions/{conditionid}/criteria": {
        "post": {
          "tags": [
            "Policies"
          ],
          "summary": "Create policy condition criteria",
          "description": "Creates a policy condition criteria",
          "operationId": "createPolicyConditionCriteria",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the Policy",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "conditionid",
              "in": "path",
              "description": "ID number of the Policy Condition",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyConditionCriteria"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Policy condition successfully created",
              "headers": {
                "Location": {
                  "description": "Location of the new policy condition criteria",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/policies/{id}/coverages": {
        "post": {
          "tags": [
            "Policies"
          ],
          "summary": "Create a coverage for a specified policy",
          "description": "Creates a coverage for a policy specified by its ID.",
          "operationId": "createPolicyCoverage",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the policy.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyCoverage"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Policy coverage successfully created.",
              "headers": {
                "Location": {
                  "description": "Location of the new policy coverage",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/policies/{id}/cessions": {
        "post": {
          "tags": [
            "Policies"
          ],
          "summary": "Create a reinsurance cession for a specified policy",
          "description": "Creates a reinsurance cession for a policy specified by its ID.",
          "operationId": "createPolicyReinsuranceCession",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the policy.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReinsuranceCession"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Reinsurance cession for a specified policy is successfully created.",
              "headers": {
                "Location": {
                  "description": "Location of the new policy reinsurance cession",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/policies/{id}": {
        "get": {
          "tags": [
            "Policies"
          ],
          "summary": "Get information on a specified policy",
          "description": "Retrieves information on a specified policy by its ID",
          "operationId": "getPolicy",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the policy.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Information on a specified policy is successfully retrieved.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Policy"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "put": {
          "tags": [
            "Policies"
          ],
          "summary": "Update a specified policy",
          "description": "Updates a policy specified by its ID.",
          "operationId": "updatePolicy",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the policy.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "Policy successfully updated"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Policies"
          ],
          "summary": "Delete a specified policy",
          "description": "Deletes a policy specified by its ID.",
          "operationId": "deletePolicy",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the policy.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Policy successfully deleted"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/policies/{id}/policyconditions/{conditionid}": {
        "put": {
          "tags": [
            "Policies"
          ],
          "summary": "Updates policy condition",
          "description": "Updates a condition specified by its ID for a policy specified by its ID.",
          "operationId": "updatePolicyCondition",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the Policy",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "conditionid",
              "in": "path",
              "description": "ID number of the Policy Condition",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyCondition"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "Policy condition successfully updated"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Policies"
          ],
          "summary": "Delete policy condition",
          "description": "Deletes a policy condition",
          "operationId": "deletePolicyCondition",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the Policy",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "conditionid",
              "in": "path",
              "description": "ID number of the Policy Condition",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Policy condition successfully deleted"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/policies/{id}/policyconditions/{conditionid}/criteria/{criteriaid}": {
        "get": {
          "tags": [
            "Policies"
          ],
          "summary": "Get policy condition criteria",
          "operationId": "getPolicyConditionCriteria",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the Policy",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "conditionid",
              "in": "path",
              "description": "ID number of the Policy Condition",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "criteriaid",
              "in": "path",
              "description": "ID number of the Policy Condition Criteria",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PolicyConditionCriteria"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "put": {
          "tags": [
            "Policies"
          ],
          "summary": "Update policy condition criteria",
          "description": "Updates policy condition criteria",
          "operationId": "updatePolicyConditionCriteria",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the Policy",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "conditionid",
              "in": "path",
              "description": "ID number of the Policy Condition",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "criteriaid",
              "in": "path",
              "description": "ID number of the Policy Condition Criteria",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyConditionCriteria"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "Policy condition criteria successfully updated."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Policies"
          ],
          "summary": "Delete policy condition criteria",
          "description": "Deletes a policy condition criteria",
          "operationId": "deletePolicyConditionCriteria",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the Policy",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "conditionid",
              "in": "path",
              "description": "ID number of the Policy Condition",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "criteriaid",
              "in": "path",
              "description": "ID number of the Policy Condition Criteria",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Policy condition criteria successfully deleted"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/policies/{id}/coverages/{coverageid}": {
        "get": {
          "tags": [
            "Policies"
          ],
          "summary": "Get details on a specified policy coverage",
          "description": "Retrieves information for a coverage based on its ID for a policy specified by its ID.",
          "operationId": "getPolicyCoverage",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the policy.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "coverageid",
              "in": "path",
              "description": "ID number of the Policy Coverage.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Information on a specified poliy coverage is successfully retrieved.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PolicyCoverage"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "put": {
          "tags": [
            "Policies"
          ],
          "summary": "Update a specified policy coverage",
          "description": "Updates a coverage specified by its ID for a policy specified by its ID.",
          "operationId": "updatePolicyCoverage",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the policy.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "coverageid",
              "in": "path",
              "description": "ID number of the Policy Coverage.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyCoverage"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "Policy coverage successfully updated."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Policies"
          ],
          "summary": "Delete a specified policy coverage",
          "description": "Deletes a coverage specified by its ID for a policy specified by its ID.",
          "operationId": "deletePolicyCoverage",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the policy.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "coverageid",
              "in": "path",
              "description": "ID number of the Policy Coverage.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Policy coverage successfully deleted"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/policies/{id}/cessions/{cessionid}": {
        "get": {
          "tags": [
            "Policies"
          ],
          "summary": "Get a specified reinsurance cession for a specified policy",
          "description": "Retrieves information for reinsurance cession specified by its ID for a policy specified by its ID.",
          "operationId": "getPolicyReinsuranceCession",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the policy.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "cessionid",
              "in": "path",
              "description": "ID number of the Cession.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Reinsurance cession retrieved.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ReinsuranceCession"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "put": {
          "tags": [
            "Policies"
          ],
          "summary": "Update a specified reinsurance cession for a specified policy",
          "description": "Updates a reinsurance cession specified by its ID for a policy specified by its ID.",
          "operationId": "updatePolicyReinsuranceCession",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the policy.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "cessionid",
              "in": "path",
              "description": "ID number of the Cession.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReinsuranceCession"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "Reinsurance cession successfully updated"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Policies"
          ],
          "summary": "Delete a specified reinsurance cession for a specified policy",
          "description": "Deletes a reinsurance cession specified by its ID for a policy specified by its ID.",
          "operationId": "deletePolicyReinsuranceCession",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the policy.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "cessionid",
              "in": "path",
              "description": "ID number of the Cession.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Reinsurance cession successfully deleted"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/policies/{id}/policyconditions/{conditionid}/locationconditions": {
        "get": {
          "tags": [
            "Policies"
          ],
          "summary": "Get location conditions",
          "description": "Retrieves location conditions for a specified condition associated with a specified policy.",
          "operationId": "getLocationConditions",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the Policy",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "conditionid",
              "in": "path",
              "description": "ID number of the Policy Condition",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LocationCondition"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/policies/{id}/surplustreaties": {
        "get": {
          "tags": [
            "Policies"
          ],
          "summary": "Get surplus treaties for a specified policy",
          "description": "Retrieves list of surplus treaties for a policy specified by its ID.",
          "operationId": "getSurplusTreaties",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the policy.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "List of surplus treaties for a specified policy is successfully retrieved.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Treaty"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/portfolios": {
        "get": {
          "tags": [
            "Portfolios"
          ],
          "summary": "Get list of portfolios",
          "description": "Retrieves list of portfolios filtered by the specified parameters.",
          "operationId": "searchPortfolios",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filters applied to the query results using condition types as shown. **Relational : (result field name) (relational operator) (value)** eg. id=100 , id!=100 , id>100 | **Boolean : (condition) (boolean operator) (condition)** eg. id=100 AND name=\"xyz\" , id=100 OR type=\"abc\" | **In List : (result field name) (IN / NOT IN) (values list)** eg. id IN (1,2,3) , name NOT IN (\"abc\",\"xyz\") | **Matching : (result field name) (LIKE / NOT LIKE) (pattern)** eg. name LIKE \"abc* \" , type NOT LIKE \"* xyz* \"",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sort",
              "in": "query",
              "description": "Specify 'ASC' to display the results in alphabetical or numerical ascending order or 'DESC' to display the results in descending order.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Number of retrieved records to display on the page.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Number of the page displaying the returned records, starting at '0'.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "List of portfolios retrieved.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PortfolioSearch"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "post": {
          "tags": [
            "Portfolios"
          ],
          "summary": "Create a new portfolio",
          "description": "Creates a new portfolio.",
          "operationId": "createPortfolio",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Portfolio created.",
              "headers": {
                "Location": {
                  "description": "Portfolio resource",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/portfolios/{id}": {
        "get": {
          "tags": [
            "Portfolios"
          ],
          "summary": "Get a specified portfolio",
          "description": "Retrieves information on an portfolio specified by its ID.",
          "operationId": "getPortfolio",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the portfolio.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Portfolio information retrieved.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Portfolio"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Portfolios"
          ],
          "summary": "Delete a specified portfolio",
          "description": "Deletes an portfolio specified by its ID.",
          "operationId": "deletePortfolio",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the portfolio.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "deleteType",
              "in": "query",
              "description": " Specify the delete type of portfolio ( 'PORTFOLIO_INFO' | 'PORTFOLIO_ALL_ACCOUNTS' | 'PORTFOLIO_EXCEPT_ACCOUNTS' ).",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "description": "Portfolio successfully deleted.",
              "headers": {
                "Location": {
                  "description": "url containing identifier of the submitted workflow.",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Portfolios"
          ],
          "summary": "Update a specified portfolio",
          "description": "Updates a portfolio specified by its ID with new information.",
          "operationId": "updatePortfolio",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the portfolio.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "Portfolio successfully updated."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/portfolios/{id}/metrics": {
        "get": {
          "tags": [
            "Portfolios"
          ],
          "summary": "Get metrics for a specified portfolio",
          "description": "Retrieves metrics for a portfolio specified by its ID.",
          "operationId": "getPortfolioMetrics",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the portfolio.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Metrics for a specified portfolio are successfully retrieved.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PortfolioMetrics"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/portfolios/{id}/filteredaccounts": {
        "put": {
          "tags": [
            "Portfolios"
          ],
          "summary": "Manage filtered accounts in an already existing portfolio",
          "description": "Manage filtered accounts in an already existing portfolio.",
          "operationId": "manageFilteredAccounts",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the portfolio.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioFilteredAccountsInput"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Portfolio accounts with filter updated."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/portfolios/{id}/accounts": {
        "patch": {
          "tags": [
            "Portfolios"
          ],
          "summary": "Manage accounts in an already existing portfolio",
          "description": "Manage accounts in an already existing portfolio.",
          "operationId": "managePortfolioAccounts",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the portfolio.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioAccountsInput"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Portfolio account updated."
            },
            "400": {
              "description": "Bad Request: Please check that you are provided all required values.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Portfolios\" action.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/producers": {
        "get": {
          "tags": [
            "Producers"
          ],
          "summary": "Get Producers",
          "description": "Retrieves a list of the producers in a specified exposure.",
          "operationId": "getProducers",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators: \n* Comparison : `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical : `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List : `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching : `q=[attribute][comparison operator][pattern]`, e.g.  `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`To learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sort",
              "in": "query",
              "description": "Specify comma-delimited field names followed by a space with`ASC`(to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Number of retrieved records to display on the page.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Number of the page displaying the returned records, starting at '0'.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Producer"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "post": {
          "tags": [
            "Producers"
          ],
          "summary": "Create Producer",
          "description": "Creates new Producer in a specified exposure.",
          "operationId": "createProducer",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Producer"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "New producer is created in the exposure successfully.",
              "headers": {
                "Location": {
                  "description": "location of the new Producer ",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "409": {
              "description": "Conflict. Resource already exists.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/producers/{id}": {
        "get": {
          "tags": [
            "Producers"
          ],
          "summary": "Get Producer by Id",
          "description": "Retrieves a Producer by id in a specified exposure.",
          "operationId": "getProducerById",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "Id of the Producer.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Producer"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "put": {
          "tags": [
            "Producers"
          ],
          "summary": "Updates Producer",
          "description": "Updates existing Producer in a specified exposure.",
          "operationId": "updateProducer",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "Id of the Producer.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Producer"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "Producer is updated in the exposure successfully."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Producers"
          ],
          "summary": "Delete Producer",
          "description": "Deletes existing Producer in a specified exposure.",
          "operationId": "deleteProducer",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "Id of the Producer.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Producer is deleted from the exposure successfully."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/steppolicies": {
        "get": {
          "tags": [
            "Step Policies"
          ],
          "summary": "Get list of step policies",
          "description": "Retrieves list of step policies filtered by the specified parameters.",
          "operationId": "searchStepPolicies",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators: \n* Comparison : `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical : `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List : `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching : `q=[attribute][comparison operator][pattern]`, e.g.  `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`To learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sort",
              "in": "query",
              "description": "Specify comma-delimited field names followed by 'ASC' (to display the results in alphabetical or numerical ascending order) or 'DESC' (to display the results in descending order.)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Number of retrieved records to display on the page.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Number of the page displaying the returned records, starting at '0'.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/StepPolicy"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "post": {
          "tags": [
            "Step Policies"
          ],
          "summary": "Create a step policy",
          "description": "Creates a step policy.",
          "operationId": "createStepPolicy",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StepPolicy"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Step Policy is successfully created.",
              "headers": {
                "Location": {
                  "description": "Location of the new step policy",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/steppolicies/{id}": {
        "get": {
          "tags": [
            "Step Policies"
          ],
          "summary": "Get information on a specified step policy",
          "description": "Retrieves information on a specified step policy by its ID",
          "operationId": "getStepPolicy",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the step policy.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Information on a specified step policy is successfully retrieved.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StepPolicy"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "put": {
          "tags": [
            "Step Policies"
          ],
          "summary": "Update a specified step policy",
          "description": "Updates a step policy specified by its ID.",
          "operationId": "updateStepPolicy",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the step policy.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StepPolicy"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "Step policy successfully updated"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Step Policies"
          ],
          "summary": "Delete a specified step policy",
          "description": "Deletes a step policy specified by its ID.",
          "operationId": "deleteStepPolicy",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID number of the step policy.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Step policy successfully deleted"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/treaties/lob/batch": {
        "post": {
          "tags": [
            "Treaties"
          ],
          "summary": "Run batch of creating/deleting treaty lobs",
          "description": "Runs creating/deleting treaty lobs in a batch.",
          "operationId": "batchProcessTreatyLobs",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BatchRequest"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Treaty batch executed.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "length": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "location": {
                          "type": "string",
                          "format": "uri"
                        },
                        "language": {
                          "type": "object",
                          "properties": {
                            "language": {
                              "type": "string"
                            },
                            "displayName": {
                              "type": "string"
                            },
                            "script": {
                              "type": "string"
                            },
                            "country": {
                              "type": "string"
                            },
                            "variant": {
                              "type": "string"
                            },
                            "extensionKeys": {
                              "uniqueItems": true,
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "unicodeLocaleAttributes": {
                              "uniqueItems": true,
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "unicodeLocaleKeys": {
                              "uniqueItems": true,
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "iso3Language": {
                              "type": "string"
                            },
                            "iso3Country": {
                              "type": "string"
                            },
                            "displayLanguage": {
                              "type": "string"
                            },
                            "displayScript": {
                              "type": "string"
                            },
                            "displayCountry": {
                              "type": "string"
                            },
                            "displayVariant": {
                              "type": "string"
                            }
                          }
                        },
                        "lastModified": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "date": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "statusInfo": {
                          "type": "object",
                          "properties": {
                            "family": {
                              "type": "string",
                              "enum": [
                                "INFORMATIONAL",
                                "SUCCESSFUL",
                                "REDIRECTION",
                                "CLIENT_ERROR",
                                "SERVER_ERROR",
                                "OTHER"
                              ]
                            },
                            "reasonPhrase": {
                              "type": "string"
                            },
                            "statusCode": {
                              "type": "integer",
                              "format": "int32"
                            }
                          }
                        },
                        "links": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string"
                              },
                              "rel": {
                                "type": "string"
                              },
                              "rels": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "uriBuilder": {
                                "type": "object"
                              },
                              "title": {
                                "type": "string"
                              },
                              "uri": {
                                "type": "string",
                                "format": "uri"
                              },
                              "params": {
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "mediaType": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string"
                            },
                            "subtype": {
                              "type": "string"
                            },
                            "parameters": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "wildcardType": {
                              "type": "boolean"
                            },
                            "wildcardSubtype": {
                              "type": "boolean"
                            }
                          }
                        },
                        "allowedMethods": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "entityTag": {
                          "type": "object",
                          "properties": {
                            "value": {
                              "type": "string"
                            },
                            "weak": {
                              "type": "boolean"
                            }
                          }
                        },
                        "stringHeaders": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "cookies": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              },
                              "version": {
                                "type": "integer",
                                "format": "int32"
                              },
                              "path": {
                                "type": "string"
                              },
                              "domain": {
                                "type": "string"
                              },
                              "comment": {
                                "type": "string"
                              },
                              "maxAge": {
                                "type": "integer",
                                "format": "int32"
                              },
                              "expiry": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "secure": {
                                "type": "boolean"
                              },
                              "httpOnly": {
                                "type": "boolean"
                              }
                            }
                          }
                        },
                        "status": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "metadata": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "array",
                            "items": {
                              "type": "object"
                            }
                          }
                        },
                        "entity": {
                          "type": "object"
                        },
                        "headers": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "array",
                            "items": {
                              "type": "object"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/treaties/{id}/lob": {
        "post": {
          "tags": [
            "Treaties"
          ],
          "summary": "Creates a treaty line of business",
          "description": "Creates a location treaty line of business",
          "operationId": "createTreatyLob",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Treaty ID",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TreatyLineOfBusiness"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Treaty line of business created.",
              "headers": {
                "Location": {
                  "description": "location of the new policy condition criteria",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/treaties/{id}/lob/{lobid}": {
        "get": {
          "tags": [
            "Treaties"
          ],
          "summary": "Gets a treaty line of business",
          "description": "Gets a treaty line of business",
          "operationId": "getTreatyLob",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Treaty ID",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "lobid",
              "in": "path",
              "description": "ID of the LineOfBusiness.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Treaty line of business retrieved.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LineOfBusiness"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Treaties"
          ],
          "summary": "Deletes a treaty line of business",
          "description": "Deletes a treaty line of business",
          "operationId": "deleteTreatyLob",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Treaty ID",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "lobid",
              "in": "path",
              "description": "ID of the LineOfBusiness.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Treaty line of business deleted."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/treaties/{treatyId}/lossoccurrences": {
        "get": {
          "tags": [
            "Treaties"
          ],
          "summary": "Get list of treaty loss occurrences by treaty ID",
          "description": "Retrieves a list of the treaty loss occurrences in a specified data source.",
          "operationId": "getLossOccurrences",
          "parameters": [
            {
              "name": "treatyId",
              "in": "path",
              "description": "Treaty ID",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "List of treaty loss occurrences retrieved.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LossOccurrence"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "post": {
          "tags": [
            "Treaties"
          ],
          "summary": "Create a treaty loss occurrence",
          "description": "Returns the URL location of the created treaty loss occurrence resource",
          "operationId": "createLossOccurrence",
          "parameters": [
            {
              "name": "treatyId",
              "in": "path",
              "description": "Treaty ID",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LossOccurrence"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "treaty loss occurrence created.",
              "headers": {
                "Location": {
                  "description": "treaty loss occurrence",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/treaties/{treatyId}/lossoccurrences/{lossOccurrenceId}": {
        "get": {
          "tags": [
            "Treaties"
          ],
          "summary": "Get a treaty loss occurrence by ID",
          "description": "Retrieves treaty loss occurrence in a specified data source.",
          "operationId": "getLossOccurrence",
          "parameters": [
            {
              "name": "treatyId",
              "in": "path",
              "description": "Treaty ID",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "lossOccurrenceId",
              "in": "path",
              "description": "Treaty loss occurrence Id.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Treaty loss occurrences retrieved.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LossOccurrence"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "put": {
          "tags": [
            "Treaties"
          ],
          "summary": "Update a treaty loss occurrence",
          "description": "Update a treaty loss occurrence",
          "operationId": "updateLossOccurrence",
          "parameters": [
            {
              "name": "treatyId",
              "in": "path",
              "description": "Treaty ID",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "lossOccurrenceId",
              "in": "path",
              "description": "Treaty loss occurrence Id.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LossOccurrence"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "Treaty loss occurrence updated."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Treaties"
          ],
          "summary": "Delete a treaty loss occurrence",
          "operationId": "deleteLossOccurrence",
          "parameters": [
            {
              "name": "treatyId",
              "in": "path",
              "description": "Treaty ID",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "lossOccurrenceId",
              "in": "path",
              "description": "Treaty loss occurrence Id.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Treaty loss occurrence deleted."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/treaties": {
        "get": {
          "tags": [
            "Treaties"
          ],
          "summary": "Get list of Treaties with optional filters",
          "description": "Get list of Treaties with optional filters.",
          "operationId": "getTreatiesByFilters",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filters applied to the query results using condition types as shown. **Relational : (result field name) (relational operator) (value)** eg. id=100 , id!=100 , id>100 | **Boolean : (condition) (boolean operator) (condition)** eg. id=100 AND name=\"xyz\" , id=100 OR type=\"abc\" | **In List : (result field name) (IN / NOT IN) (values list)** eg. id IN (1,2,3) , name NOT IN (\"abc\",\"xyz\") | **Matching : (result field name) (LIKE / NOT LIKE) (pattern)** eg. name LIKE \"abc* \" , type NOT LIKE \"* xyz* \"",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sort",
              "in": "query",
              "description": "Specify comma-delimited field names followed by a space with`ASC`(to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Number of retrieved records to display on the page.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Number of the page displaying the returned records, starting at '0'.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "List of treaties retrieved.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Treaty"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "post": {
          "tags": [
            "Treaties"
          ],
          "summary": "Create a treaty",
          "description": "Returns the URL location of the created Treaty resource",
          "operationId": "createTreaty",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Treaty"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Treaty created.",
              "headers": {
                "Location": {
                  "description": "Treaty",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/treaties/{id}": {
        "get": {
          "tags": [
            "Treaties"
          ],
          "summary": "Get treaty by Id",
          "description": "Retrieve a treaty in a specified data source.",
          "operationId": "getTreaty",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "Treaty ID",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Treaty retrieved.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Treaty"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "put": {
          "tags": [
            "Treaties"
          ],
          "summary": "Update a treaty",
          "description": "Update a treaty",
          "operationId": "updateTreaty",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "Treaty ID",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Treaty"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "Treaty updated."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Treaties"
          ],
          "summary": "Delete a treaty",
          "operationId": "deleteTreaty",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "Treaty ID",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Treaty deleted."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/treaties/count": {
        "get": {
          "tags": [
            "Treaties"
          ],
          "summary": "Get total treaty count",
          "description": "Retrieves total treaty count for specified datasource.",
          "operationId": "getExposureCount",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Treaty count successfully retrieved.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/treaties/getbytype": {
        "get": {
          "tags": [
            "Treaties"
          ],
          "summary": "Get list of treaties",
          "description": "Retrieves a list of the treaties in a specified data source.",
          "operationId": "getTreaties",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "type",
              "in": "query",
              "description": "Type of treaty.",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "exposureResourceType",
              "in": "query",
              "description": "Type of exposure. Specify 'POL' for policy and 'LOC' for location.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "List of treaties retrieved.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Treaty"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/underwriters": {
        "get": {
          "tags": [
            "Underwriters"
          ],
          "summary": "Get underwriters",
          "operationId": "getUnderwriters",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filters query results by evaluating the value of expressions. The service supports four types of operators: \n* Comparison : `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical : `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List : `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching : `q=[attribute][comparison operator][pattern]`, e.g.  `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`To learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sort",
              "in": "query",
              "description": "Specify comma-delimited field names followed by a space with`ASC`(to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Number of retrieved records to display on the page.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Number of the page displaying the returned records, starting at '0'.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UnderWriter"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "post": {
          "tags": [
            "Underwriters"
          ],
          "summary": "Create UnderWriter",
          "operationId": "createUnderwriter",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnderWriter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "New UnderWriter is created in the exposure successfully.",
              "headers": {
                "Location": {
                  "description": "Location of the new UnderWriter",
                  "style": "simple",
                  "schema": {
                    "type": "string",
                    "format": "URI"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "409": {
              "description": "Conflict. Resource already exists.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      },
      "/v1/exposures/{exposureId}/underwriters/{id}": {
        "get": {
          "tags": [
            "Underwriters"
          ],
          "summary": "Get UnderWriter by Id",
          "operationId": "getUnderwriterById",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID of the Underwriter.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UnderWriter"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "put": {
          "tags": [
            "Underwriters"
          ],
          "summary": "Updates UnderWriter",
          "operationId": "updateUnderwriter",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID of the Underwriter.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnderWriter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "UnderWriter is updated in the exposure successfully."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Underwriters"
          ],
          "summary": "Delete UnderWriter ",
          "operationId": "deleteUnderwriter",
          "parameters": [
            {
              "name": "exposureId",
              "in": "path",
              "description": "ID for exposure",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "ID of the Underwriter.",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "UnderWriter is deleted from the exposure successfully."
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "404": {
              "description": "The requested resource was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "RMS_Auth": []
            }
          ]
        }
      }
    },
    "components": {
      "schemas": {
        "Details": {
          "type": "object",
          "properties": {
            "resources": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Uri"
              }
            },
            "summary": {
              "type": "string"
            }
          }
        },
        "JobDetailResponse": {
          "type": "object",
          "properties": {
            "jobId": {
              "type": "string"
            },
            "userName": {
              "type": "string"
            },
            "status": {
              "type": "string",
              "enum": [
                "QUEUED",
                "RUNNING",
                "FINISHED",
                "FAILED",
                "CANCELLED",
                "PENDING",
                "CANCELLING",
                "CANCEL_REQUESTED"
              ]
            },
            "submittedAt": {
              "type": "string"
            },
            "startedAt": {
              "type": "string"
            },
            "endedAt": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "progress": {
              "type": "integer",
              "format": "int32"
            },
            "details": {
              "$ref": "#/components/schemas/Details"
            },
            "tasks": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Task"
              }
            }
          }
        },
        "Task": {
          "type": "object",
          "properties": {
            "taskId": {
              "type": "string"
            },
            "guid": {
              "type": "string",
              "format": "uuid"
            },
            "jobId": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "submittedAt": {
              "type": "string"
            },
            "createdAt": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "percentComplete": {
              "type": "integer",
              "format": "int32"
            },
            "priorTaskGuids": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "output": {
              "$ref": "#/components/schemas/TaskOutput"
            }
          }
        },
        "TaskErrorMessage": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            }
          }
        },
        "TaskOutput": {
          "type": "object",
          "properties": {
            "summary": {
              "type": "string"
            },
            "errors": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TaskErrorMessage"
              }
            },
            "log": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "Uri": {
          "type": "object",
          "properties": {
            "uri": {
              "type": "string"
            }
          }
        },
        "ErrorMessage": {
          "type": "object",
          "properties": {
            "code": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "logId": {
              "type": "string"
            }
          }
        },
        "JobResponse": {
          "type": "object",
          "properties": {
            "jobId": {
              "type": "string"
            },
            "userName": {
              "type": "string"
            },
            "status": {
              "type": "string",
              "enum": [
                "QUEUED",
                "RUNNING",
                "FINISHED",
                "FAILED",
                "CANCELLED",
                "PENDING",
                "CANCELLING",
                "CANCEL_REQUESTED"
              ]
            },
            "submittedAt": {
              "type": "string"
            },
            "startedAt": {
              "type": "string"
            },
            "endedAt": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "progress": {
              "type": "integer",
              "format": "int32"
            },
            "details": {
              "$ref": "#/components/schemas/Details"
            }
          }
        },
        "GeoHaz": {
          "required": [
            "resourceType",
            "resourceUri",
            "settings"
          ],
          "type": "object",
          "properties": {
            "resourceUri": {
              "type": "string",
              "example": "riskdata/v1/exposures/1/portfolio/1"
            },
            "resourceType": {
              "type": "string",
              "enum": [
                "portfolio",
                "account"
              ]
            },
            "settings": {
              "$ref": "#/components/schemas/GeoHazSettings"
            }
          }
        },
        "GeoHazSettings": {
          "required": [
            "layers"
          ],
          "type": "object",
          "properties": {
            "layers": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LayerInfo"
              }
            }
          }
        },
        "LayerInfo": {
          "required": [
            "engineType",
            "name",
            "type",
            "version"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "engineType": {
              "type": "string"
            },
            "version": {
              "type": "string"
            },
            "layerOptions": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "PatchJobRequest": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "enum": [
                "CANCELLED"
              ]
            },
            "priority": {
              "type": "string",
              "enum": [
                "veryhigh",
                "high",
                "medium",
                "low",
                "verylow"
              ]
            }
          }
        },
        "AnalysisGroupSettings": {
          "required": [
            "analysisName",
            "currency",
            "numOfSimulations",
            "propagateDetailedLosses",
            "simulateToPLT"
          ],
          "type": "object",
          "properties": {
            "forceGroupType": {
              "type": "string"
            },
            "reportingWindowStart": {
              "maxLength": 2147483647,
              "minLength": 1,
              "type": "string"
            },
            "numOfSimulations": {
              "type": "integer",
              "format": "int64"
            },
            "simulationWindowStart": {
              "maxLength": 2147483647,
              "minLength": 1,
              "type": "string"
            },
            "simulationWindowEnd": {
              "maxLength": 2147483647,
              "minLength": 1,
              "type": "string"
            },
            "simulateToPLT": {
              "type": "boolean"
            },
            "propagateDetailedLosses": {
              "type": "boolean"
            },
            "regionPerilSimulationSet": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RegionPerilSimulation"
              }
            },
            "analysisName": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s:-])*\\w$|^\\w*$",
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "currency": {
              "$ref": "#/components/schemas/Currency"
            }
          }
        },
        "CreateAnalysisGroupRequest": {
          "required": [
            "resourceType",
            "resourceUris",
            "settings"
          ],
          "type": "object",
          "properties": {
            "resourceType": {
              "type": "string",
              "enum": [
                "analyses"
              ]
            },
            "resourceUris": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "settings": {
              "$ref": "#/components/schemas/AnalysisGroupSettings"
            }
          }
        },
        "Currency": {
          "required": [
            "asOfDate",
            "code",
            "scheme",
            "vintage"
          ],
          "type": "object",
          "properties": {
            "code": {
              "type": "string"
            },
            "scheme": {
              "type": "string"
            },
            "asOfDate": {
              "type": "string"
            },
            "vintage": {
              "type": "string"
            }
          }
        },
        "RegionPerilSimulation": {
          "required": [
            "simulationPeriods",
            "simulationSetId"
          ],
          "type": "object",
          "properties": {
            "perilCode": {
              "type": "string"
            },
            "modelVersion": {
              "type": "string"
            },
            "eventRateSchemeId": {
              "type": "integer",
              "format": "int32"
            },
            "regionCode": {
              "type": "string"
            },
            "simulationSetId": {
              "type": "integer",
              "format": "int64"
            },
            "simulationPeriods": {
              "type": "integer",
              "format": "int64"
            },
            "modelRegionCode": {
              "type": "string"
            },
            "eltAnalysisId": {
              "type": "integer",
              "format": "int64"
            },
            "engineVersion": {
              "type": "string"
            }
          }
        },
        "AlmModelSettings": {
          "required": [
            "almProfileIds",
            "currency"
          ],
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/ModelJobSettings"
            },
            {
              "type": "object",
              "properties": {
                "almProfileIds": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  }
                },
                "analysisMode": {
                  "type": "string"
                },
                "portEltByGeoidByLobByCedant": {
                  "type": "boolean"
                },
                "portStatsByGeoidByLobByCedant": {
                  "type": "boolean"
                },
                "portStatsByGeoidByCedant": {
                  "type": "boolean"
                }
              }
            }
          ]
        },
        "DlmModelSettings": {
          "required": [
            "currency",
            "franchiseDeductible",
            "minLossThreshold",
            "numMaxLossEvent",
            "treatConstructionOccupancyAsUnknown"
          ],
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/ModelJobSettings"
            },
            {
              "type": "object",
              "properties": {
                "outputProfileId": {
                  "type": "integer",
                  "format": "int32"
                },
                "climateChangeVariationId": {
                  "maximum": 68,
                  "minimum": 0,
                  "type": "integer",
                  "format": "int32"
                },
                "franchiseDeductible": {
                  "type": "boolean"
                },
                "minLossThreshold": {
                  "minimum": 0,
                  "exclusiveMinimum": false,
                  "type": "number",
                  "format": "double"
                },
                "treatConstructionOccupancyAsUnknown": {
                  "type": "boolean"
                },
                "numMaxLossEvent": {
                  "maximum": 5000,
                  "minimum": 1,
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          ]
        },
        "Model": {
          "required": [
            "resourceType",
            "resourceUri",
            "settings",
            "type"
          ],
          "type": "object",
          "properties": {
            "resourceUri": {
              "type": "string",
              "example": "riskdata/v1/exposures/1/portfolio/1"
            },
            "resourceType": {
              "type": "string",
              "enum": [
                "portfolio",
                "account",
                "aggregate portfolio"
              ]
            },
            "type": {
              "type": "string",
              "description": "model type",
              "example": "One of ALM or DLM or HD"
            },
            "settings": {
              "$ref": "#/components/schemas/ModelJobSettings"
            }
          }
        },
        "ModelJobSettings": {
          "required": [
            "currency",
            "type"
          ],
          "type": "object",
          "properties": {
            "currency": {
              "$ref": "#/components/schemas/Currency"
            },
            "modelProfileId": {
              "type": "integer",
              "format": "int32"
            },
            "eventRateSchemeId": {
              "type": "integer",
              "format": "int32"
            },
            "treatyIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "name": {
              "maxLength": 64,
              "minLength": 0,
              "pattern": "^\\w((?!--)[\\w\\s:-])*\\w$|^\\w*$",
              "type": "string"
            },
            "type": {
              "type": "string"
            }
          },
          "discriminator": {
            "propertyName": "type",
            "mapping": {
              "DLM": "#/components/schemas/DlmModelSettings",
              "HD": "#/components/schemas/DlmModelSettings",
              "ALM": "#/components/schemas/AlmModelSettings"
            }
          }
        },
        "Account": {
          "required": [
            "accountNumber"
          ],
          "type": "object",
          "properties": {
            "accountId": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "accountName": {
              "type": "string"
            },
            "accountNumber": {
              "type": "string"
            },
            "cedant": {
              "$ref": "#/components/schemas/CedantInfo"
            },
            "producer": {
              "$ref": "#/components/schemas/ProducerInfo"
            },
            "underWriter": {
              "$ref": "#/components/schemas/UnderWriterInfo"
            },
            "branch": {
              "$ref": "#/components/schemas/BranchInfo"
            },
            "userId1": {
              "type": "string"
            },
            "userId2": {
              "type": "string"
            },
            "userId3": {
              "type": "string"
            },
            "userId4": {
              "type": "string"
            },
            "userText1": {
              "type": "string"
            },
            "userText2": {
              "type": "string"
            },
            "createDate": {
              "type": "string",
              "readOnly": true
            },
            "stampDate": {
              "type": "string",
              "readOnly": true
            },
            "isValid": {
              "type": "boolean"
            },
            "uri": {
              "type": "string",
              "readOnly": true
            }
          }
        },
        "BranchInfo": {
          "required": [
            "branchId",
            "branchName"
          ],
          "type": "object",
          "properties": {
            "branchId": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "branchName": {
              "maxLength": 30,
              "minLength": 0,
              "type": "string"
            }
          }
        },
        "CedantInfo": {
          "required": [
            "cedantId",
            "cedantName"
          ],
          "type": "object",
          "properties": {
            "cedantId": {
              "maxLength": 20,
              "minLength": 0,
              "pattern": "^\\w([\\w-]*\\w|)$",
              "type": "string"
            },
            "cedantName": {
              "maxLength": 40,
              "minLength": 0,
              "type": "string"
            }
          }
        },
        "ProducerInfo": {
          "required": [
            "producerId",
            "producerName"
          ],
          "type": "object",
          "properties": {
            "producerId": {
              "maxLength": 20,
              "minLength": 0,
              "pattern": "^\\w([\\w-]*\\w|)$",
              "type": "string"
            },
            "producerName": {
              "maxLength": 40,
              "minLength": 1,
              "type": "string"
            }
          }
        },
        "UnderWriterInfo": {
          "required": [
            "underwriterId",
            "underwriterName"
          ],
          "type": "object",
          "properties": {
            "underwriterId": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "underwriterName": {
              "maxLength": 30,
              "minLength": 0,
              "type": "string"
            }
          }
        },
        "AccountMetrics": {
          "type": "object",
          "properties": {
            "totalLocations": {
              "type": "integer",
              "format": "int32"
            },
            "totalPolicies": {
              "type": "integer",
              "format": "int32"
            },
            "totalEmployees": {
              "type": "number",
              "format": "double"
            },
            "totalInsuredValue": {
              "$ref": "#/components/schemas/Amount"
            },
            "perilsExposed": {
              "type": "string"
            },
            "linkedAccount": {
              "$ref": "#/components/schemas/Account"
            },
            "linkedDatasource": {
              "type": "string"
            },
            "accountName": {
              "type": "string"
            },
            "accountNumber": {
              "type": "string"
            },
            "owner": {
              "type": "string"
            },
            "Underwriter": {
              "type": "string"
            },
            "producer": {
              "type": "string"
            },
            "branch": {
              "type": "string"
            },
            "cedant": {
              "type": "string"
            },
            "geocodeVersion": {
              "type": "string"
            },
            "hazardVersion": {
              "type": "string"
            },
            "createDate": {
              "type": "string"
            },
            "totalReports": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "Amount": {
          "type": "object",
          "properties": {
            "value": {
              "type": "number",
              "format": "double"
            },
            "currencyCode": {
              "type": "string"
            }
          }
        },
        "AccountSearch": {
          "required": [
            "accountNumber"
          ],
          "type": "object",
          "properties": {
            "accountId": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "accountName": {
              "type": "string"
            },
            "accountNumber": {
              "type": "string"
            },
            "cedant": {
              "$ref": "#/components/schemas/CedantInfo"
            },
            "producer": {
              "$ref": "#/components/schemas/ProducerInfo"
            },
            "underWriter": {
              "$ref": "#/components/schemas/UnderWriterInfo"
            },
            "branch": {
              "$ref": "#/components/schemas/BranchInfo"
            },
            "userId1": {
              "type": "string"
            },
            "userId2": {
              "type": "string"
            },
            "userId3": {
              "type": "string"
            },
            "userId4": {
              "type": "string"
            },
            "userText1": {
              "type": "string"
            },
            "userText2": {
              "type": "string"
            },
            "createDate": {
              "type": "string",
              "readOnly": true
            },
            "stampDate": {
              "type": "string",
              "readOnly": true
            },
            "isValid": {
              "type": "boolean"
            },
            "uri": {
              "type": "string",
              "readOnly": true
            },
            "locationsCount": {
              "type": "integer",
              "format": "int32"
            },
            "geocodeVersion": {
              "type": "string"
            },
            "hazardVersion": {
              "type": "string"
            },
            "ownerName": {
              "type": "string"
            },
            "resultsCount": {
              "type": "integer",
              "format": "int32"
            },
            "policyExpirationDate": {
              "type": "string"
            },
            "policyExpirationStatus": {
              "type": "string",
              "enum": [
                "OPEN",
                "EXPIRING_SOON",
                "EXPIRED"
              ]
            },
            "totalTIV": {
              "type": "number",
              "format": "float"
            },
            "reportsCount": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "ExposureValue": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int32"
            },
            "code": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          }
        },
        "CountryMetrics": {
          "type": "object",
          "properties": {
            "country": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "locationCount": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "LineOfBusinessInfo": {
          "required": [
            "lobId",
            "lobName"
          ],
          "type": "object",
          "properties": {
            "lobId": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "lobName": {
              "maxLength": 20,
              "minLength": 0,
              "type": "string"
            }
          }
        },
        "LossOccurrence": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "treatyId": {
              "type": "integer",
              "format": "int32"
            },
            "uri": {
              "type": "string",
              "readOnly": true
            },
            "regionPeril": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "lossOccurrenceTime": {
              "type": "integer",
              "format": "int32"
            },
            "lossOccurrenceRadius": {
              "type": "integer",
              "format": "int32"
            },
            "radiusUnit": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "multiLossOccurrence": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "operationType": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "INSERT",
                "UPDATE",
                "DELETE"
              ]
            }
          }
        },
        "Treaty": {
          "required": [
            "attachmentLevel",
            "cedant",
            "treatyNumber",
            "treatyType"
          ],
          "type": "object",
          "properties": {
            "treatyId": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "uri": {
              "type": "string",
              "readOnly": true
            },
            "treatyNumber": {
              "maxLength": 20,
              "minLength": 0,
              "type": "string"
            },
            "treatyName": {
              "maxLength": 40,
              "minLength": 0,
              "type": "string"
            },
            "cedant": {
              "$ref": "#/components/schemas/CedantInfo"
            },
            "producer": {
              "$ref": "#/components/schemas/ProducerInfo"
            },
            "treatyType": {
              "type": "string",
              "enum": [
                "CATA",
                "QUOT",
                "SURP",
                "WORK",
                "CORP",
                "STOP",
                "NCAT"
              ]
            },
            "currency": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "attachmentBasis": {
              "type": "string",
              "enum": [
                "L",
                "R"
              ]
            },
            "attachmentLevel": {
              "type": "string",
              "enum": [
                "PORT",
                "ACCT",
                "POL",
                "LOC"
              ]
            },
            "premium": {
              "type": "number",
              "format": "double"
            },
            "occurrenceLimit": {
              "type": "number",
              "format": "double"
            },
            "attachmentPoint": {
              "type": "number",
              "format": "double"
            },
            "riskLimit": {
              "type": "number",
              "format": "double"
            },
            "retentionAmount": {
              "type": "number",
              "format": "double"
            },
            "percentagePlaced": {
              "type": "number",
              "format": "double"
            },
            "effectiveDate": {
              "type": "string"
            },
            "expirationDate": {
              "type": "string"
            },
            "percentageRetention": {
              "type": "number",
              "format": "double"
            },
            "percentageRiShare": {
              "type": "number",
              "format": "double"
            },
            "percentageCovered": {
              "type": "number",
              "format": "double"
            },
            "priority": {
              "type": "integer",
              "format": "int32"
            },
            "numberOfReinstatements": {
              "type": "integer",
              "format": "int32"
            },
            "reinstatementCharge": {
              "type": "number",
              "format": "double"
            },
            "maolAmount": {
              "type": "number",
              "format": "double"
            },
            "isValid": {
              "type": "boolean"
            },
            "userId1": {
              "type": "string"
            },
            "userId2": {
              "type": "string"
            },
            "lobs": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LineOfBusinessInfo"
              }
            },
            "aggregateDeductible": {
              "type": "number",
              "format": "double"
            },
            "aggregateLimit": {
              "type": "number",
              "format": "double"
            },
            "lossOccurrences": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LossOccurrence"
              }
            }
          }
        },
        "LocationConditionValidationInfo": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            },
            "policyNumber": {
              "type": "string"
            },
            "locationNumber": {
              "type": "string"
            },
            "locationName": {
              "type": "string"
            },
            "condition1": {
              "type": "string"
            },
            "condition2": {
              "type": "string"
            }
          }
        },
        "AggregatePortfolio": {
          "required": [
            "aggregatePortfolioName",
            "aggregatePortfolioNumber",
            "cedant",
            "peril"
          ],
          "type": "object",
          "properties": {
            "aggregatePortfolioId": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "aggregatePortfolioNumber": {
              "maxLength": 20,
              "minLength": 0,
              "type": "string"
            },
            "aggregatePortfolioName": {
              "maxLength": 40,
              "minLength": 0,
              "type": "string"
            },
            "source": {
              "maxLength": 10,
              "minLength": 0,
              "type": "string"
            },
            "cedant": {
              "$ref": "#/components/schemas/CedantInfo"
            },
            "currency": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "createDate": {
              "type": "string",
              "readOnly": true
            },
            "peril": {
              "type": "string",
              "enum": [
                "EQ",
                "FLOOD",
                "WINDSTORM",
                "SEVERE_CONVECTIVE_STORM_WINTER_STORM",
                "WILDFIRE"
              ]
            },
            "uri": {
              "type": "string",
              "readOnly": true
            }
          }
        },
        "AggregatePortfolioSearchItem": {
          "required": [
            "aggregatePortfolioName",
            "aggregatePortfolioNumber",
            "cedant",
            "peril"
          ],
          "type": "object",
          "properties": {
            "aggregatePortfolioId": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "aggregatePortfolioNumber": {
              "maxLength": 20,
              "minLength": 0,
              "type": "string"
            },
            "aggregatePortfolioName": {
              "maxLength": 40,
              "minLength": 0,
              "type": "string"
            },
            "source": {
              "maxLength": 10,
              "minLength": 0,
              "type": "string"
            },
            "cedant": {
              "$ref": "#/components/schemas/CedantInfo"
            },
            "currency": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "createDate": {
              "type": "string",
              "readOnly": true
            },
            "peril": {
              "type": "string",
              "enum": [
                "EQ",
                "FLOOD",
                "WINDSTORM",
                "SEVERE_CONVECTIVE_STORM_WINTER_STORM",
                "WILDFIRE"
              ]
            },
            "uri": {
              "type": "string",
              "readOnly": true
            },
            "ownerName": {
              "type": "string"
            }
          }
        },
        "AggregatePortfolioMetrics": {
          "type": "object",
          "properties": {
            "totalAggregateExposures": {
              "type": "integer",
              "format": "int32"
            },
            "perilsExposed": {
              "type": "string"
            },
            "total": {
              "type": "number",
              "format": "double"
            },
            "name": {
              "type": "string"
            },
            "number": {
              "type": "string"
            },
            "source": {
              "type": "string"
            },
            "currency": {
              "type": "string"
            },
            "createDate": {
              "type": "string"
            },
            "owner": {
              "type": "string"
            },
            "cedant": {
              "type": "string"
            }
          }
        },
        "AggregatePortfolioCountryMetrics": {
          "type": "object",
          "properties": {
            "countryMetrics": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "AlmErrorMessage": {
          "type": "object",
          "properties": {
            "row": {
              "type": "string"
            },
            "column": {
              "type": "string"
            },
            "text": {
              "type": "string"
            }
          }
        },
        "AggregateExposuresList": {
          "type": "object",
          "properties": {
            "values": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              }
            },
            "lobs": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "resolutionValues": {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            },
            "errorMessages": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AlmErrorMessage"
              }
            },
            "countryCode": {
              "type": "string"
            },
            "resolution": {
              "type": "string"
            },
            "dependencyResolution": {
              "type": "string"
            }
          }
        },
        "LocationAAL": {
          "type": "object",
          "properties": {
            "locationId": {
              "type": "integer",
              "format": "int32"
            },
            "locationName": {
              "type": "string"
            },
            "locationNumber": {
              "type": "string"
            },
            "standardDeviation": {
              "type": "number",
              "format": "double"
            },
            "coefficientOfVariation": {
              "type": "number",
              "format": "double"
            },
            "aal": {
              "type": "number",
              "format": "double"
            }
          }
        },
        "EPInterpolateResult": {
          "type": "object",
          "properties": {
            "returnPeriod": {
              "type": "number",
              "format": "double"
            },
            "criticalProbability": {
              "type": "number",
              "format": "double"
            },
            "result": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Result"
              }
            }
          }
        },
        "Result": {
          "type": "object",
          "properties": {
            "perspective": {
              "type": "string"
            },
            "values": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Values"
              }
            }
          }
        },
        "Values": {
          "type": "object",
          "properties": {
            "metricName": {
              "type": "string"
            },
            "metricValue": {
              "type": "number",
              "format": "double"
            }
          }
        },
        "Bucket": {
          "type": "object"
        },
        "MetricMetadata": {
          "type": "object",
          "properties": {
            "eventWeightId": {
              "type": "integer",
              "format": "int32"
            },
            "parameters": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "MetricValue": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int32"
            },
            "value": {
              "$ref": "#/components/schemas/Value"
            },
            "bucket": {
              "$ref": "#/components/schemas/Bucket"
            }
          }
        },
        "MetricsOutput": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int32"
            },
            "workflowId": {
              "type": "integer",
              "format": "int64"
            },
            "structure": {
              "type": "string"
            },
            "position": {
              "type": "string"
            },
            "portfolioId": {
              "type": "integer",
              "format": "int32"
            },
            "variationId": {
              "type": "integer",
              "format": "int32"
            },
            "dimensions": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "metricName": {
              "type": "string"
            },
            "metricMetadata": {
              "$ref": "#/components/schemas/MetricMetadata"
            },
            "modelSettings": {
              "$ref": "#/components/schemas/ModelSettings"
            },
            "metricValue": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MetricValue"
              }
            },
            "exposureNumber": {
              "type": "string"
            }
          }
        },
        "ModelSettings": {
          "type": "object",
          "properties": {
            "modelProfileId": {
              "type": "integer",
              "format": "int32"
            },
            "currency": {
              "$ref": "#/components/schemas/Currency"
            },
            "minLossThreshold": {
              "type": "number",
              "format": "float"
            },
            "numPeriods": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "Value": {
          "type": "object",
          "properties": {
            "returnPeriods": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "double"
              }
            },
            "positionValues": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "double"
              }
            }
          }
        },
        "EventLossItem": {
          "type": "object",
          "properties": {
            "anlsid": {
              "type": "integer",
              "format": "int32"
            },
            "id": {
              "type": "integer",
              "format": "int32"
            },
            "sourceid": {
              "type": "integer",
              "format": "int32"
            },
            "eventid": {
              "type": "integer",
              "format": "int32"
            },
            "perspvalue": {
              "type": "number",
              "format": "double"
            },
            "perspcode": {
              "type": "string"
            },
            "stddevi": {
              "type": "number",
              "format": "double"
            },
            "stddevc": {
              "type": "number",
              "format": "double"
            },
            "expvalue": {
              "type": "number",
              "format": "double"
            },
            "rate": {
              "type": "number",
              "format": "double"
            },
            "status": {
              "type": "integer",
              "format": "int32"
            },
            "peril": {
              "type": "string"
            },
            "region": {
              "type": "string"
            },
            "oepWUC": {
              "type": "number",
              "format": "double"
            },
            "exposureNumber": {
              "type": "string"
            }
          }
        },
        "MetricsResultResponse": {
          "type": "object",
          "properties": {
            "metricType": {
              "type": "string",
              "enum": [
                "STATS",
                "ELT",
                "EP",
                "MARGINAL_EP",
                "MARGINAL_STATS"
              ]
            },
            "granularities": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "ACCOUNT",
                  "POLICY"
                ]
              }
            },
            "metrics": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        },
        "KeyLossItem": {
          "type": "object",
          "properties": {
            "eventid": {
              "type": "integer",
              "format": "int32"
            },
            "stddev": {
              "type": "number",
              "format": "double"
            },
            "meanloss": {
              "type": "number",
              "format": "double"
            },
            "cv": {
              "type": "number",
              "format": "double"
            }
          }
        },
        "PeriodLossItem": {
          "type": "object",
          "properties": {
            "periodid": {
              "type": "integer",
              "format": "int32"
            },
            "weight": {
              "type": "number",
              "format": "double"
            },
            "eventid": {
              "type": "integer",
              "format": "int32"
            },
            "eventdate": {
              "type": "string"
            },
            "lossdate": {
              "type": "string"
            },
            "perspvalue": {
              "type": "number",
              "format": "double"
            },
            "peril": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "region": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "exposureNumber": {
              "type": "string"
            }
          }
        },
        "EntityItem": {
          "type": "object",
          "properties": {
            "domainName": {
              "type": "string"
            },
            "tableSpace": {
              "type": "string"
            },
            "tableName": {
              "type": "string"
            },
            "dataOwnedBy": {
              "type": "string"
            },
            "values": {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            },
            "isActive": {
              "type": "boolean"
            }
          }
        },
        "SampledLossItem": {
          "type": "object",
          "properties": {
            "cedant": {
              "type": "string"
            },
            "lob": {
              "type": "string"
            },
            "losstype": {
              "type": "string"
            },
            "sampleid": {
              "type": "integer",
              "format": "int32"
            },
            "eventid": {
              "type": "integer",
              "format": "int32"
            },
            "loss": {
              "type": "number",
              "format": "double"
            }
          }
        },
        "StatisticsItem": {
          "type": "object",
          "properties": {
            "anlsid": {
              "type": "integer",
              "format": "int64"
            },
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "perspcode": {
              "type": "string"
            },
            "eptype": {
              "type": "string"
            },
            "purepremium": {
              "type": "number",
              "format": "double"
            },
            "totalstddev": {
              "type": "number",
              "format": "double"
            },
            "netpurepremium": {
              "type": "number",
              "format": "double"
            },
            "activation": {
              "type": "number",
              "format": "double"
            },
            "exhaustion": {
              "type": "number",
              "format": "double"
            },
            "totlossratio": {
              "type": "number",
              "format": "double"
            },
            "limit": {
              "type": "number",
              "format": "double"
            },
            "premium": {
              "type": "number",
              "format": "double"
            },
            "netstddev": {
              "type": "number",
              "format": "double"
            },
            "exhaustallreinstatements": {
              "type": "number",
              "format": "double"
            },
            "exposurenumber": {
              "type": "string"
            }
          }
        },
        "MapPerspectiveInput": {
          "required": [
            "mapPerspectiveOption",
            "newPerspective",
            "sourcePerspective"
          ],
          "type": "object",
          "properties": {
            "analysisName": {
              "maxLength": 64,
              "minLength": 0,
              "pattern": "^\\w((?!--)[\\w\\s:-])*\\w$|^\\w*$",
              "type": "string",
              "description": "The name for the analysis with mapped perspective. can only contain characters only 0-9, A-Z, a-z, underscore(_), hyphen(-), colon(:), and space. Can't start or end with hyphen, space, or colon, and can't include multiple consecutive hyphens (--)",
              "example": "NewAnalysisName"
            },
            "sourcePerspective": {
              "type": "string"
            },
            "newPerspective": {
              "type": "string"
            },
            "mapPerspectiveOption": {
              "type": "string",
              "enum": [
                "INCLUDE_DOWNSTREAM",
                "DELETE_OTHER",
                "SELECTED_ONLY"
              ]
            }
          }
        },
        "ClimateChangeInput": {
          "type": "object",
          "properties": {
            "analysisName": {
              "type": "string",
              "description": "Name of the final climate change analysis. Can be alpha numeric string.",
              "example": "ABC Climate"
            },
            "climateConditionView": {
              "type": "string",
              "description": "allowableValues = {Combined All Parameters, Frequency and Intensity Only, Default}",
              "example": "Combined All Parameters"
            },
            "referenceRateSchemeId": {
              "type": "integer",
              "description": "Rate scheme Id for a particular model. allowableValues = {190 ,202 ,84 ,9}.  \n 190 ---> RMS 2019 Historical Event Rates,  \n 202 ---> RMS 2021 Historical Event Rates,  \n 84  ---> RMS 2015 Stochastic Event Rates,  \n 9 ---> RMS v2.0 Default Rates",
              "format": "int32",
              "example": 190
            },
            "rcpScenario": {
              "type": "number",
              "description": "RCP scenario needed for this climate change analysis. allowableValues = {2.6, 4.5, 6.0, 8.5}",
              "format": "double",
              "example": 2.6
            },
            "timeHorizon": {
              "type": "integer",
              "description": "Time Horizon for this climate change analysis. Can only be between 2020 and 2100 in 5 year increment.  \n Example - 2020, 2025, 2030, 2035, ....",
              "format": "int32",
              "example": 2025
            },
            "is2CWarmingScenario": {
              "type": "boolean"
            }
          }
        },
        "SimulateELTToPLTInput": {
          "required": [
            "simulationPeriods",
            "simulationSetId"
          ],
          "type": "object",
          "properties": {
            "regionCode": {
              "type": "string"
            },
            "perilCode": {
              "type": "string"
            },
            "engineVersion": {
              "type": "string"
            },
            "eventRateSchemeId": {
              "type": "integer",
              "format": "int32"
            },
            "simulationSetId": {
              "type": "integer",
              "format": "int32"
            },
            "simulationSetName": {
              "type": "string"
            },
            "simulationPeriods": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "PateBatchInputRequest": {
          "type": "object",
          "properties": {
            "treatyId": {
              "type": "integer",
              "format": "int32"
            },
            "pateId": {
              "type": "integer",
              "format": "int64"
            },
            "groupId": {
              "type": "integer",
              "format": "int32"
            },
            "treatyType": {
              "type": "string"
            }
          }
        },
        "Pate": {
          "required": [
            "attachmentLevel",
            "cedant",
            "treatyNumber",
            "treatyType"
          ],
          "type": "object",
          "properties": {
            "treatyId": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "uri": {
              "type": "string",
              "readOnly": true
            },
            "treatyNumber": {
              "maxLength": 20,
              "minLength": 0,
              "type": "string"
            },
            "treatyName": {
              "maxLength": 40,
              "minLength": 0,
              "type": "string"
            },
            "cedant": {
              "$ref": "#/components/schemas/CedantInfo"
            },
            "producer": {
              "$ref": "#/components/schemas/ProducerInfo"
            },
            "treatyType": {
              "type": "string",
              "enum": [
                "CATA",
                "QUOT",
                "SURP",
                "WORK",
                "CORP",
                "STOP",
                "NCAT"
              ]
            },
            "currency": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "attachmentBasis": {
              "type": "string",
              "enum": [
                "L",
                "R"
              ]
            },
            "attachmentLevel": {
              "type": "string",
              "enum": [
                "PORT",
                "ACCT",
                "POL",
                "LOC"
              ]
            },
            "premium": {
              "type": "number",
              "format": "double"
            },
            "occurrenceLimit": {
              "type": "number",
              "format": "double"
            },
            "attachmentPoint": {
              "type": "number",
              "format": "double"
            },
            "riskLimit": {
              "type": "number",
              "format": "double"
            },
            "retentionAmount": {
              "type": "number",
              "format": "double"
            },
            "percentagePlaced": {
              "type": "number",
              "format": "double"
            },
            "effectiveDate": {
              "type": "string"
            },
            "expirationDate": {
              "type": "string"
            },
            "percentageRetention": {
              "type": "number",
              "format": "double"
            },
            "percentageRiShare": {
              "type": "number",
              "format": "double"
            },
            "percentageCovered": {
              "type": "number",
              "format": "double"
            },
            "priority": {
              "type": "integer",
              "format": "int32"
            },
            "numberOfReinstatements": {
              "type": "integer",
              "format": "int32"
            },
            "reinstatementCharge": {
              "type": "number",
              "format": "double"
            },
            "maolAmount": {
              "type": "number",
              "format": "double"
            },
            "isValid": {
              "type": "boolean"
            },
            "userId1": {
              "type": "string"
            },
            "userId2": {
              "type": "string"
            },
            "lobs": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LineOfBusinessInfo"
              }
            },
            "aggregateDeductible": {
              "type": "number",
              "format": "double"
            },
            "aggregateLimit": {
              "type": "number",
              "format": "double"
            },
            "lossOccurrences": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LossOccurrence"
              }
            },
            "analysisId": {
              "type": "integer",
              "format": "int32"
            },
            "pateId": {
              "type": "integer",
              "format": "int64"
            },
            "groupId": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "PateInput": {
          "type": "object",
          "properties": {
            "insert": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Pate"
              }
            },
            "update": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Pate"
              }
            },
            "delete": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Pate"
              }
            }
          }
        },
        "ConvertEventInput": {
          "type": "object",
          "properties": {
            "analysisName": {
              "maxLength": 64,
              "minLength": 0,
              "pattern": "^\\w((?!--)[\\w\\s:-])*\\w$|^\\w*$",
              "type": "string",
              "description": "The name for the analysis with converted rates and/or losses. can only contain characters only 0-9, A-Z, a-z, underscore(_), hyphen(-), colon(:), and space. Can't start or end with hyphen, space, or colon, and can't include multiple consecutive hyphens (--)",
              "example": "NewAnalysisName"
            },
            "eventRateSchemeIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "eventLossAdjustmentSchemeIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "Analysis": {
          "type": "object",
          "properties": {
            "analysisId": {
              "type": "integer",
              "format": "int32"
            },
            "name": {
              "type": "string"
            },
            "createdAt": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "sourceRdmName": {
              "type": "string"
            },
            "jobId": {
              "type": "integer",
              "format": "int64"
            },
            "jobGuid": {
              "type": "string"
            },
            "securableGuid": {
              "type": "string"
            },
            "analysisTypeId": {
              "type": "string"
            },
            "analysisType": {
              "type": "string"
            },
            "resources": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Resource"
              }
            },
            "engineName": {
              "type": "string"
            },
            "engineId": {
              "type": "integer",
              "format": "int32"
            },
            "engineVersion": {
              "type": "string"
            },
            "perils": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Peril"
              }
            },
            "subPerils": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SubPeril"
              }
            },
            "regions": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Region"
              }
            },
            "status": {
              "type": "string"
            },
            "statusId": {
              "type": "integer",
              "format": "int32"
            },
            "username": {
              "type": "string"
            },
            "currency": {
              "$ref": "#/components/schemas/AnalysisCurrency"
            },
            "framework": {
              "type": "string"
            }
          }
        },
        "AnalysisCurrency": {
          "type": "object",
          "properties": {
            "currencyName": {
              "type": "string"
            },
            "currencyCode": {
              "type": "string"
            },
            "currencyScheme": {
              "type": "string"
            },
            "currencyAsOfDate": {
              "type": "string"
            },
            "currencyVintage": {
              "type": "string"
            }
          }
        },
        "Peril": {
          "type": "object",
          "properties": {
            "perilCode": {
              "type": "string"
            },
            "perilName": {
              "type": "string"
            }
          }
        },
        "Region": {
          "type": "object",
          "properties": {
            "regionCode": {
              "type": "string"
            },
            "regionName": {
              "type": "string"
            }
          }
        },
        "Resource": {
          "type": "object",
          "properties": {
            "resourceId": {
              "type": "integer",
              "format": "int32"
            },
            "resourceTypeId": {
              "type": "integer",
              "format": "int32"
            },
            "resourceType": {
              "type": "string"
            },
            "exposureName": {
              "type": "string"
            }
          }
        },
        "SubPeril": {
          "type": "object",
          "properties": {
            "subPerilId": {
              "type": "integer",
              "format": "int32"
            },
            "subPerilName": {
              "type": "string"
            }
          }
        },
        "AnalysisRegion": {
          "type": "object",
          "properties": {
            "region": {
              "type": "string"
            },
            "subRegion": {
              "type": "string"
            },
            "peril": {
              "type": "string"
            },
            "rateSchemeId": {
              "type": "integer",
              "format": "int32"
            },
            "framework": {
              "type": "string"
            },
            "analysisId": {
              "type": "integer",
              "format": "int64"
            },
            "modelProfileId": {
              "type": "integer",
              "format": "int32"
            },
            "petId": {
              "type": "integer",
              "format": "int32"
            },
            "numSamples": {
              "type": "integer",
              "format": "int32"
            },
            "periods": {
              "type": "integer",
              "format": "int32"
            },
            "applyContractFlag": {
              "type": "boolean"
            },
            "engineVersion": {
              "type": "string"
            }
          }
        },
        "Cedant": {
          "required": [
            "cedantName"
          ],
          "type": "object",
          "properties": {
            "cedantId": {
              "maxLength": 20,
              "minLength": 0,
              "pattern": "^\\w([\\w-]*\\w|)$",
              "type": "string"
            },
            "cedantName": {
              "maxLength": 40,
              "minLength": 0,
              "type": "string"
            },
            "uri": {
              "type": "string",
              "readOnly": true
            }
          }
        },
        "RenameAnalysisInput": {
          "type": "object",
          "properties": {
            "newAnalysisName": {
              "type": "string"
            }
          }
        },
        "Branch": {
          "required": [
            "branchName"
          ],
          "type": "object",
          "properties": {
            "branchId": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "branchName": {
              "maxLength": 30,
              "minLength": 0,
              "type": "string"
            },
            "uri": {
              "type": "string",
              "readOnly": true
            }
          }
        },
        "DataServer": {
          "type": "object",
          "properties": {
            "serverName": {
              "type": "string"
            },
            "serverId": {
              "type": "integer",
              "format": "int32"
            },
            "serverType": {
              "type": "string",
              "enum": [
                "PLATFORM",
                "DATA_BRIDGE"
              ]
            },
            "totalDiskSpaceInMb": {
              "type": "string"
            },
            "availableDiskSpaceInMb": {
              "type": "string"
            },
            "usedDiskSpaceInMb": {
              "type": "string"
            }
          }
        },
        "CreateExposureRequest": {
          "required": [
            "name"
          ],
          "type": "object",
          "properties": {
            "name": {
              "maxLength": 80,
              "minLength": 1,
              "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
              "type": "string"
            },
            "serverName": {
              "type": "string"
            }
          }
        },
        "Exposure": {
          "type": "object",
          "properties": {
            "exposureName": {
              "type": "string"
            },
            "exposureId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "uri": {
              "type": "string",
              "readOnly": true
            },
            "status": {
              "type": "string",
              "readOnly": true
            },
            "databaseName": {
              "type": "string",
              "readOnly": true
            },
            "metrics": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              },
              "readOnly": true
            },
            "ownerName": {
              "type": "string",
              "readOnly": true
            },
            "exposureSetId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "serverType": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "PLATFORM",
                "DATA_BRIDGE"
              ]
            },
            "serverName": {
              "type": "string",
              "readOnly": true
            },
            "serverId": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "UpgradeExposureRequest": {
          "required": [
            "edmDataVersion"
          ],
          "type": "object",
          "properties": {
            "edmDataVersion": {
              "type": "string"
            }
          }
        },
        "ExposureSet": {
          "required": [
            "exposureSetName"
          ],
          "type": "object",
          "properties": {
            "exposureSetId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "guid": {
              "type": "string",
              "readOnly": true
            },
            "exposureSetName": {
              "maxLength": 80,
              "minLength": 1,
              "type": "string"
            },
            "ownerName": {
              "type": "string",
              "readOnly": true
            },
            "groups": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Group"
              }
            },
            "share": {
              "type": "boolean"
            }
          }
        },
        "Group": {
          "type": "object",
          "properties": {
            "groupId": {
              "type": "string"
            },
            "groupName": {
              "type": "string",
              "readOnly": true
            }
          }
        },
        "PatchExposureSetRequest": {
          "required": [
            "operation",
            "targetProperty",
            "value"
          ],
          "type": "object",
          "properties": {
            "operation": {
              "type": "string",
              "enum": [
                "ADD",
                "UPDATE",
                "REMOVE"
              ]
            },
            "targetProperty": {
              "type": "string",
              "enum": [
                "NAME",
                "GROUP_ID"
              ]
            },
            "value": {
              "maxLength": 80,
              "minLength": 0,
              "type": "string"
            }
          }
        },
        "Facultative": {
          "required": [
            "facultativeName"
          ],
          "type": "object",
          "properties": {
            "facultativeId": {
              "maxLength": 20,
              "minLength": 0,
              "pattern": "^\\w([\\w-]*\\w|)$",
              "type": "string"
            },
            "facultativeName": {
              "maxLength": 40,
              "minLength": 0,
              "type": "string"
            },
            "uri": {
              "type": "string",
              "readOnly": true
            }
          }
        },
        "LineOfBusiness": {
          "required": [
            "lobName"
          ],
          "type": "object",
          "properties": {
            "lobId": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "uri": {
              "type": "string",
              "readOnly": true
            },
            "lobName": {
              "maxLength": 20,
              "minLength": 0,
              "type": "string"
            }
          }
        },
        "BuildingAttribute": {
          "required": [
            "yearBuilt"
          ],
          "type": "object",
          "properties": {
            "buildingAttributeId": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "yearBuilt": {
              "type": "string",
              "format": "yyyy",
              "example": "2020"
            },
            "isValid": {
              "type": "boolean"
            },
            "roofDeckType": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "roofDeckResistanceField": {
              "type": "number",
              "format": "double"
            },
            "windowGlassdoorProtectionType": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "windowGlassdoorThickness": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "windowGlassdoorDoublepane": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "windowGlassdoorProtectionAdequacy": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "roofCoverType": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "rooftopEquipment": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "skylightAreaPercent": {
              "type": "number",
              "format": "double"
            },
            "dockDoorAreaPercent": {
              "type": "number",
              "format": "double"
            },
            "dockDoorPressureResistance": {
              "type": "number",
              "format": "double"
            },
            "skylightImpactResistance": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "roofCoverResistanceCorner": {
              "type": "number",
              "format": "double"
            },
            "roofSlope": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "flashingPulloutResistance": {
              "type": "number",
              "format": "double"
            },
            "missileExposure": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "roofCoverResistancePerimeter": {
              "type": "number",
              "format": "double"
            },
            "roofDeckResistancePerimeter": {
              "type": "number",
              "format": "double"
            },
            "claddingPressureResistance": {
              "type": "number",
              "format": "double"
            },
            "windowGlassdoorGlassType": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "claddingType": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "windowGlassdoorAreaPercent": {
              "type": "number",
              "format": "double"
            },
            "roofDeckResistanceCorner": {
              "type": "number",
              "format": "double"
            },
            "roofCoverResistanceField": {
              "type": "number",
              "format": "double"
            },
            "roofArea": {
              "type": "number",
              "format": "double"
            }
          }
        },
        "Address": {
          "type": "object",
          "properties": {
            "addressId": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "area": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "buildingId": {
              "type": "string"
            },
            "buildingName": {
              "type": "string"
            },
            "addressType": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "country": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "countryScheme": {
              "type": "string"
            },
            "countryGeoId": {
              "type": "integer",
              "format": "int32"
            },
            "countryRmsCode": {
              "type": "string"
            },
            "latitude": {
              "type": "number",
              "format": "double"
            },
            "longitude": {
              "type": "number",
              "format": "double"
            },
            "addressText": {
              "type": "string"
            },
            "streetAddress": {
              "type": "string"
            },
            "cityCode": {
              "type": "string"
            },
            "cityName": {
              "type": "string"
            },
            "cityGeoId": {
              "type": "integer",
              "format": "int64"
            },
            "postalCode": {
              "type": "string"
            },
            "postalGeoId": {
              "type": "integer",
              "format": "int64"
            },
            "block": {
              "type": "string"
            },
            "blockGroup": {
              "type": "string"
            },
            "locationCode": {
              "type": "string"
            },
            "locationCodeGeoId": {
              "type": "integer",
              "format": "int64"
            },
            "parcelNumber": {
              "type": "string"
            },
            "subLocality": {
              "type": "string"
            },
            "geoResolutionConfidence": {
              "type": "number",
              "format": "double"
            },
            "geoAccuracyBuffer": {
              "type": "number",
              "format": "double"
            },
            "geoProductVersion": {
              "type": "string"
            },
            "geoLocationCode": {
              "type": "string"
            },
            "geoMatchCode": {
              "type": "string"
            },
            "geoDataSourceId": {
              "type": "integer",
              "format": "int32"
            },
            "geoResolutionCode": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "geoDataSourceVersionId": {
              "type": "integer",
              "format": "int32"
            },
            "geoDateTime": {
              "type": "string",
              "format": "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
              "example": "2020-01-01T00:00:00.000Z"
            },
            "createDateTime": {
              "type": "string"
            },
            "updateDateTime": {
              "type": "string"
            },
            "admin1Code": {
              "type": "string"
            },
            "admin1GeoId": {
              "type": "integer",
              "format": "int64"
            },
            "admin1Name": {
              "type": "string"
            },
            "admin2Code": {
              "type": "string"
            },
            "admin2GeoId": {
              "type": "integer",
              "format": "int64"
            },
            "admin2Name": {
              "type": "string"
            },
            "admin3Code": {
              "type": "string"
            },
            "admin3GeoId": {
              "type": "integer",
              "format": "int64"
            },
            "admin3Name": {
              "type": "string"
            },
            "admin4Code": {
              "type": "string"
            },
            "admin4GeoId": {
              "type": "integer",
              "format": "int64"
            },
            "admin4Name": {
              "type": "string"
            },
            "admin5Code": {
              "type": "string"
            },
            "admin5GeoId": {
              "type": "integer",
              "format": "int64"
            },
            "admin5Name": {
              "type": "string"
            },
            "zone1GeoId": {
              "type": "integer",
              "format": "int64"
            },
            "zone2GeoId": {
              "type": "integer",
              "format": "int64"
            },
            "zone3GeoId": {
              "type": "integer",
              "format": "int64"
            },
            "zone4GeoId": {
              "type": "integer",
              "format": "int64"
            },
            "zone5GeoId": {
              "type": "integer",
              "format": "int64"
            },
            "zone1": {
              "type": "string"
            },
            "zone2": {
              "type": "string"
            },
            "zone3": {
              "type": "string"
            },
            "zone3Name": {
              "type": "string"
            },
            "zone4Name": {
              "type": "string"
            },
            "zone5Name": {
              "type": "string"
            },
            "zone3Code": {
              "type": "string"
            },
            "zone4Code": {
              "type": "string"
            },
            "zone5Code": {
              "type": "string"
            },
            "ugid": {
              "type": "string"
            }
          }
        },
        "FacReinsurer": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          }
        },
        "Location": {
          "required": [
            "address",
            "property"
          ],
          "type": "object",
          "properties": {
            "property": {
              "$ref": "#/components/schemas/Property"
            },
            "address": {
              "$ref": "#/components/schemas/Address"
            },
            "locationBiDetail": {
              "$ref": "#/components/schemas/LocationBiDetail"
            },
            "locationEqDetail": {
              "$ref": "#/components/schemas/LocationEqDetail"
            },
            "locationWsDetail": {
              "$ref": "#/components/schemas/LocationWsDetail"
            },
            "locationToDetail": {
              "$ref": "#/components/schemas/LocationToDetail"
            },
            "locationFlDetail": {
              "$ref": "#/components/schemas/LocationFlDetail"
            },
            "locationFrDetail": {
              "$ref": "#/components/schemas/LocationFrDetail"
            },
            "locationTrDetail": {
              "$ref": "#/components/schemas/LocationTrDetail"
            },
            "buildingAttribute": {
              "$ref": "#/components/schemas/BuildingAttribute"
            },
            "locationCoverages": {
              "type": "array",
              "readOnly": true,
              "items": {
                "$ref": "#/components/schemas/LocationCoverage"
              }
            },
            "reinsuranceCessions": {
              "type": "array",
              "readOnly": true,
              "items": {
                "$ref": "#/components/schemas/ReinsuranceCession"
              }
            },
            "locationWcDetails": {
              "type": "array",
              "readOnly": true,
              "items": {
                "$ref": "#/components/schemas/LocationWcDetail"
              }
            },
            "currency": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "tiv": {
              "type": "number",
              "format": "double"
            },
            "riskAssessorCurves": {
              "type": "string"
            },
            "locationConditions": {
              "type": "array",
              "readOnly": true,
              "items": {
                "$ref": "#/components/schemas/LocationCondition"
              }
            },
            "uri": {
              "type": "string",
              "readOnly": true
            },
            "maxCvgBldgValuation": {
              "type": "number",
              "format": "double"
            }
          }
        },
        "LocationBiDetail": {
          "type": "object",
          "properties": {
            "locationBiDetailId": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "redundancy": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "siWaitingPeriod": {
              "type": "number",
              "format": "double"
            },
            "siLimit": {
              "type": "number",
              "format": "double"
            },
            "preparedness": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "serviceInterruption": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "isValid": {
              "type": "boolean"
            },
            "uri": {
              "type": "string",
              "readOnly": true
            }
          }
        },
        "LocationCondition": {
          "type": "object",
          "properties": {
            "locationId": {
              "type": "integer",
              "format": "int32"
            },
            "conditionId": {
              "type": "integer",
              "format": "int32"
            },
            "uri": {
              "type": "string",
              "readOnly": true
            },
            "isIncluded": {
              "type": "string",
              "enum": [
                "NotIncluded",
                "Included",
                "UserIncluded"
              ]
            }
          }
        },
        "LocationCoverage": {
          "type": "object",
          "properties": {
            "waitingPeriod": {
              "type": "number",
              "format": "double"
            },
            "coverageId": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "label": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "eqslModifier": {
              "type": "integer",
              "format": "int32"
            },
            "lossType": {
              "type": "string",
              "enum": [
                "Building",
                "Contents",
                "BI",
                "CombinedCvg"
              ]
            },
            "percentSprinkler": {
              "type": "number",
              "format": "double"
            },
            "value": {
              "type": "number",
              "format": "double"
            },
            "biPoi": {
              "type": "number",
              "format": "double"
            },
            "deductible": {
              "type": "number",
              "format": "double"
            },
            "coverageModifier": {
              "type": "string",
              "enum": [
                "UNKNOWN_DAMAGEABLE",
                "HIGHLY_DAMAGEABLE",
                "MODERATELY_DAMAGEABLE",
                "DAMAGEABLE",
                "SLIGHTLY_DAMAGEABLE"
              ]
            },
            "accumulation": {
              "type": "string",
              "enum": [
                "Building",
                "Contents",
                "Bi",
                "Combined"
              ]
            },
            "limit": {
              "type": "number",
              "format": "double"
            },
            "peril": {
              "type": "string",
              "enum": [
                "EARTHQUAKE",
                "WINDSTORM",
                "TORNADO",
                "FLOOD",
                "FIRE",
                "TERRORISM",
                "WORKERSCOMP"
              ]
            },
            "percentageLossDeductibleAmount": {
              "type": "number",
              "format": "double"
            },
            "isFranchiseDeductible": {
              "type": "string",
              "enum": [
                "YES",
                "NO"
              ]
            },
            "limitExtension": {
              "type": "number",
              "format": "double"
            },
            "isValid": {
              "type": "boolean"
            }
          }
        },
        "LocationEqDetail": {
          "required": [
            "completionDate",
            "startDate",
            "yearSprinkler",
            "yearUpgrade"
          ],
          "type": "object",
          "properties": {
            "locationEqDetailId": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "siteLimit": {
              "type": "number",
              "format": "double"
            },
            "siteDeduct": {
              "type": "number",
              "format": "double"
            },
            "combinedLimit": {
              "type": "number",
              "format": "double"
            },
            "combinedDeduct": {
              "type": "number",
              "format": "double"
            },
            "yearUpgrade": {
              "type": "string",
              "format": "yyyy",
              "example": "2020"
            },
            "startDate": {
              "type": "string",
              "format": "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
              "example": "2020-01-01T00:00:00.000Z"
            },
            "completionDate": {
              "type": "string",
              "format": "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
              "example": "2020-01-01T00:00:00.000Z"
            },
            "yearSprinkler": {
              "type": "string",
              "format": "yyyy",
              "example": "2020"
            },
            "percentComplete": {
              "type": "number",
              "format": "double"
            },
            "atcClass": {
              "type": "string"
            },
            "isoClass": {
              "type": "string"
            },
            "fireClass": {
              "type": "string"
            },
            "rmsClass": {
              "type": "string"
            },
            "userClass": {
              "type": "string"
            },
            "atcOccupancy": {
              "type": "string"
            },
            "isoOccupancy": {
              "type": "string"
            },
            "sicOccupancy": {
              "type": "string"
            },
            "ibcOccupancy": {
              "type": "string"
            },
            "userOccupancy": {
              "type": "string"
            },
            "percentageSiteLossDeductibleAmount": {
              "type": "number",
              "format": "double"
            },
            "percentageCombinedLossDeductibleAmount": {
              "type": "number",
              "format": "double"
            },
            "isFranchiseSiteDeductible": {
              "type": "string",
              "enum": [
                "YES",
                "NO"
              ]
            },
            "isFranchiseCombinedDeductible": {
              "type": "string",
              "enum": [
                "YES",
                "NO"
              ]
            },
            "isValid": {
              "type": "boolean"
            },
            "eqslInsurance": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "secondarySupply": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "eqslSusceptibility": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "sprinklerType": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "baseIsolation": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "bldgExterior": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "cladding": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "constructQuality": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "ductility": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "duress": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "enggFoundation": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "frameBolt": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "hazardExposed": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "internalMasonaryPart": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "longSpan": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "mechElecEquip": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "ornamentation": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "overhangProfile": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "preFabrication": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "pounding": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "redundancy": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "shapeConfigure": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "shortColumn": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "sidingType": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "storyProfile": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "structureUpgrade": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "tank": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "tiltupRetrofit": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "torsion": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "urmRetrofit": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "wallsBrace": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "tsDebris": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "tsScour": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "tsSafeDist": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "tsProtect": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "eqPackage": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "eqProtect": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "eqSalvage": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "eqSpecieStorage": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "urmChimney": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "builtOnSlope": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "alquistPreoloZone": {
              "type": "integer",
              "format": "int32"
            },
            "soil": {
              "type": "number",
              "format": "double"
            },
            "landslide": {
              "type": "number",
              "format": "double"
            },
            "liquefaction": {
              "type": "number",
              "format": "double"
            },
            "biZone": {
              "type": "integer",
              "format": "int32"
            },
            "landslideMatch": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "liquefactionMatch": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "soilMatch": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "fireLossMatch": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "landslideCov": {
              "type": "number",
              "format": "double"
            },
            "liquefactionCov": {
              "type": "number",
              "format": "double"
            },
            "soilCov": {
              "type": "number",
              "format": "double"
            },
            "fireLossCov": {
              "type": "number",
              "format": "float",
              "readOnly": true
            },
            "soilPeriod": {
              "type": "number",
              "format": "double"
            },
            "soilThickness": {
              "type": "number",
              "format": "double"
            },
            "fire1": {
              "type": "number",
              "format": "double"
            },
            "fire2": {
              "type": "number",
              "format": "double"
            },
            "fire3": {
              "type": "number",
              "format": "double"
            },
            "fire4": {
              "type": "number",
              "format": "double"
            },
            "fire5": {
              "type": "number",
              "format": "double"
            },
            "fire6": {
              "type": "number",
              "format": "double"
            },
            "fire7": {
              "type": "number",
              "format": "double"
            },
            "fire8": {
              "type": "number",
              "format": "double"
            },
            "mmi100": {
              "type": "number",
              "format": "double"
            },
            "mmi200": {
              "type": "number",
              "format": "double"
            },
            "mmi250": {
              "type": "number",
              "format": "double"
            },
            "mmi475": {
              "type": "number",
              "format": "double"
            },
            "avgSlope": {
              "type": "number",
              "format": "double"
            },
            "distFault1": {
              "type": "number",
              "format": "double"
            },
            "apMatch": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "mmiMatch": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "distSinkhole": {
              "type": "number",
              "format": "double"
            },
            "distMine": {
              "type": "number",
              "format": "double"
            },
            "sinkholeZone": {
              "type": "integer",
              "format": "int32"
            },
            "soilVs": {
              "type": "number",
              "format": "double"
            },
            "soilVsMatch": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "basinLocId": {
              "type": "integer",
              "format": "int32"
            },
            "di": {
              "type": "number",
              "format": "double"
            },
            "critd": {
              "type": "number",
              "format": "double"
            },
            "n160CS": {
              "type": "number",
              "format": "double"
            },
            "t15": {
              "type": "number",
              "format": "double"
            },
            "wff": {
              "type": "number",
              "format": "double"
            },
            "distriv": {
              "type": "number",
              "format": "double"
            },
            "gwd": {
              "type": "number",
              "format": "double"
            },
            "dc": {
              "type": "number",
              "format": "double"
            },
            "liqcv": {
              "type": "number",
              "format": "double"
            },
            "hdLiqMatch": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "phi": {
              "type": "number",
              "format": "double"
            },
            "rough": {
              "type": "number",
              "format": "double"
            },
            "ndvi": {
              "type": "number",
              "format": "double"
            },
            "cohes": {
              "type": "number",
              "format": "double"
            },
            "landcv": {
              "type": "number",
              "format": "double"
            },
            "hdLandMatch": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "eqSlope": {
              "type": "number",
              "format": "double"
            },
            "elev": {
              "type": "number",
              "format": "double"
            },
            "cti": {
              "type": "number",
              "format": "double"
            },
            "precip": {
              "type": "number",
              "format": "double"
            },
            "topo": {
              "type": "number",
              "format": "double"
            },
            "hdSecMatch": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "soilPeriodMatch": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "groundwaterDepthMatch": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "groundSlopeMatch": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "percentInGeography": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "score1": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "score2": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "score3": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "scoreOverall": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "mmi500": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "mmi1000": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "mmi1500": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "faultsName1": {
              "type": "string",
              "readOnly": true
            },
            "faultsDistance1": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "faultsReturnPeriodM601": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "faultsReturnPeriodM651": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "faultsReturnPeriodM701": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "faultsName2": {
              "type": "string",
              "readOnly": true
            },
            "faultsDistance2": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "faultsReturnPeriodM602": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "faultsReturnPeriodM652": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "faultsReturnPeriodM702": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "faultsName3": {
              "type": "string",
              "readOnly": true
            },
            "faultsDistance3": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "faultsReturnPeriodM603": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "faultsReturnPeriodM653": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "faultsReturnPeriodM703": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "faultsName4": {
              "type": "string",
              "readOnly": true
            },
            "faultsDistance4": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "faultsReturnPeriodM604": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "faultsReturnPeriodM654": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "faultsReturnPeriodM704": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "faultsName5": {
              "type": "string",
              "readOnly": true
            },
            "faultsDistance5": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "faultsReturnPeriodM605": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "faultsReturnPeriodM655": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "faultsReturnPeriodM705": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "faultsBackgroundRates": {
              "type": "string",
              "readOnly": true
            },
            "mineName1": {
              "type": "string",
              "readOnly": true
            },
            "mineType1": {
              "type": "string",
              "readOnly": true
            },
            "mineStatus1": {
              "type": "string",
              "readOnly": true
            },
            "mineArea1": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "mineDistance1": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "mineName2": {
              "type": "string",
              "readOnly": true
            },
            "mineType2": {
              "type": "string",
              "readOnly": true
            },
            "mineStatus2": {
              "type": "string",
              "readOnly": true
            },
            "mineArea2": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "mineDistance2": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "mineName3": {
              "type": "string",
              "readOnly": true
            },
            "mineType3": {
              "type": "string",
              "readOnly": true
            },
            "mineStatus3": {
              "type": "string",
              "readOnly": true
            },
            "mineArea3": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "mineDistance3": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "mineName4": {
              "type": "string",
              "readOnly": true
            },
            "mineType4": {
              "type": "string",
              "readOnly": true
            },
            "mineStatus4": {
              "type": "string",
              "readOnly": true
            },
            "mineArea4": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "mineDistance4": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "mineName5": {
              "type": "string",
              "readOnly": true
            },
            "mineType5": {
              "type": "string",
              "readOnly": true
            },
            "mineStatus5": {
              "type": "string",
              "readOnly": true
            },
            "mineArea5": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "mineDistance5": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "sinkHoleArea1": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "sinkHoleDistance1": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "sinkHoleArea2": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "sinkHoleDistance2": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "sinkHoleArea3": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "sinkHoleDistance3": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "sinkHoleArea4": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "sinkHoleDistance4": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "sinkHoleArea5": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "sinkHoleDistance5": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "uri": {
              "type": "string",
              "readOnly": true
            }
          }
        },
        "LocationFlDetail": {
          "required": [
            "completionDate",
            "panelDate",
            "startDate",
            "yearUpgrade"
          ],
          "type": "object",
          "properties": {
            "locationFlDetailId": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "siteLimit": {
              "type": "number",
              "format": "double"
            },
            "siteDeduct": {
              "type": "number",
              "format": "double"
            },
            "combinedLimit": {
              "type": "number",
              "format": "double"
            },
            "combinedDeduct": {
              "type": "number",
              "format": "double"
            },
            "yearUpgrade": {
              "type": "string",
              "format": "yyyy",
              "example": "2020"
            },
            "startDate": {
              "type": "string",
              "format": "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
              "example": "2020-01-01T00:00:00.000Z"
            },
            "completionDate": {
              "type": "string",
              "format": "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
              "example": "2020-01-01T00:00:00.000Z"
            },
            "percentComplete": {
              "type": "number",
              "format": "double"
            },
            "percentageSiteLossDeductibleAmount": {
              "type": "number",
              "format": "double"
            },
            "percentageCombinedLossDeductibleAmount": {
              "type": "number",
              "format": "double"
            },
            "isFranchiseSiteDeductible": {
              "type": "string",
              "enum": [
                "YES",
                "NO"
              ]
            },
            "isFranchiseCombinedDeductible": {
              "type": "string",
              "enum": [
                "YES",
                "NO"
              ]
            },
            "isValid": {
              "type": "boolean"
            },
            "floodProtect": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "floorType": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "floodMissile": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "basement": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "floodVulnerability": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "mechElecGround": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "cladType": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "foundation": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "duration": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "contamination": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "velocity": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "flPackage": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "flProtect": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "flSalvage": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "flSpecieStorage": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "ifmVerticalExpDist": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "flFoundationType": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "ifmStructureCondition": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "bespokeFloodDefenseLevel": {
              "type": "number",
              "format": "double"
            },
            "bespokeFloodDefenseLevelType": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "floodIndex": {
              "type": "number",
              "format": "double"
            },
            "elevation": {
              "type": "number",
              "format": "double"
            },
            "elevationCov": {
              "type": "number",
              "format": "double"
            },
            "annProb": {
              "type": "string"
            },
            "flZone": {
              "type": "string"
            },
            "bfe": {
              "type": "string"
            },
            "additionalInfo": {
              "type": "string"
            },
            "panel": {
              "type": "string"
            },
            "cobra": {
              "type": "string"
            },
            "floodWay": {
              "type": "string"
            },
            "sfha": {
              "type": "string"
            },
            "community": {
              "type": "string"
            },
            "confidence": {
              "type": "number",
              "format": "double"
            },
            "underRev": {
              "type": "string"
            },
            "panelDate": {
              "type": "string",
              "format": "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
              "example": "2020-01-01T00:00:00.000Z"
            },
            "buffer": {
              "type": "number",
              "format": "double"
            },
            "otherZones": {
              "type": "string"
            },
            "huZones": {
              "type": "string",
              "readOnly": true
            },
            "mapSource": {
              "type": "integer",
              "format": "int32"
            },
            "flMatch": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "finishedFloor": {
              "type": "number",
              "format": "double"
            },
            "userId1": {
              "type": "string"
            },
            "userId2": {
              "type": "string"
            },
            "basinName": {
              "type": "string"
            },
            "catchmentId": {
              "type": "integer",
              "format": "int32"
            },
            "floodDriver": {
              "type": "string"
            },
            "rms100Flzone": {
              "type": "integer",
              "format": "int32"
            },
            "rms500Flzone": {
              "type": "integer",
              "format": "int32"
            },
            "fl30YrRpDef": {
              "type": "integer",
              "format": "int32"
            },
            "fl50YrRpDef": {
              "type": "integer",
              "format": "int32"
            },
            "fl75YrRpDef": {
              "type": "integer",
              "format": "int32"
            },
            "fl100YrRpDef": {
              "type": "integer",
              "format": "int32"
            },
            "fl200YrRpDef": {
              "type": "integer",
              "format": "int32"
            },
            "fl250YrRpDef": {
              "type": "integer",
              "format": "int32"
            },
            "fl500YrRpDef": {
              "type": "integer",
              "format": "int32"
            },
            "fl1000YrRpDef": {
              "type": "integer",
              "format": "int32"
            },
            "fl10000YrRpDef": {
              "type": "integer",
              "format": "int32"
            },
            "fl30YrRpUndef": {
              "type": "integer",
              "format": "int32"
            },
            "fl50YrRpUndef": {
              "type": "integer",
              "format": "int32"
            },
            "fl75YrRpUndef": {
              "type": "integer",
              "format": "int32"
            },
            "fl100YrRpUndef": {
              "type": "integer",
              "format": "int32"
            },
            "fl200YrRpUndef": {
              "type": "integer",
              "format": "int32"
            },
            "fl250YrRpUndef": {
              "type": "integer",
              "format": "int32"
            },
            "fl500YrRpUndef": {
              "type": "integer",
              "format": "int32"
            },
            "fl1000YrRpUndef": {
              "type": "integer",
              "format": "int32"
            },
            "fl10000YrRpUndef": {
              "type": "integer",
              "format": "int32"
            },
            "hdFlMatch": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "flFfHag": {
              "type": "number",
              "format": "double"
            },
            "flFfHagFlag": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "flZoneGroup": {
              "type": "integer",
              "format": "int32"
            },
            "flPerBasement": {
              "type": "number",
              "format": "double"
            },
            "protectedByLevee": {
              "type": "string"
            },
            "score1": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "score2": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "score3": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "scoreOverall": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "fl10YRInlandDepthUndef": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "fl30YRInlandDepthUndef": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "fl50YRInlandDepthUndef": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "fl100YRInlandDepthUndef": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "fl200YRInlandDepthUndef": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "fl250YRInlandDepthUndef": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "fl500YRInlandDepthUndef": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "fl1000YRInlandDepthUndef": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "uri": {
              "type": "string",
              "readOnly": true
            }
          }
        },
        "LocationFrDetail": {
          "required": [
            "completionDate",
            "startDate",
            "yearUpgrade"
          ],
          "type": "object",
          "properties": {
            "locationFrDetailId": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "siteLimit": {
              "type": "number",
              "format": "double"
            },
            "siteDeduct": {
              "type": "number",
              "format": "double"
            },
            "combinedLimit": {
              "type": "number",
              "format": "double"
            },
            "combinedDeduct": {
              "type": "number",
              "format": "double"
            },
            "yearUpgrade": {
              "type": "string",
              "format": "yyyy",
              "example": "2020"
            },
            "startDate": {
              "type": "string",
              "format": "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
              "example": "2020-01-01T00:00:00.000Z"
            },
            "completionDate": {
              "type": "string",
              "format": "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
              "example": "2020-01-01T00:00:00.000Z"
            },
            "percentComplete": {
              "type": "number",
              "format": "double"
            },
            "isValid": {
              "type": "boolean"
            },
            "fireDepartmentRatingModifier": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "fireDepartmentRating": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "sprinklerSystem": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "remoteAlarm": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "frPackage": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "frProtect": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "frSalvage": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "frSpecieStorage": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "frRoofCovering": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "frRoofGeometry": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "frRoofAge": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "frRoofVent": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "frEmberAccumulator": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "frSuppression": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "frPerformance": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "frSetback": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "frExterior": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "frResAppurtenant": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "frComAppurtenant": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "frDeckType": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "frHeatResistance": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "frAccessibilityCondition": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "wildFireHazard": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "wildFireSusceptibility": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "wildFireThreat": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "wildFireAreaDescription": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "wildFireSurfaceFuelType": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "wildFireSpecialConditions": {
              "type": "string"
            },
            "wildFireLocalHistory": {
              "type": "number",
              "format": "double"
            },
            "wildFireNearbyHistory": {
              "type": "number",
              "format": "double"
            },
            "wildFireAccessibility": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "wildFireMatch": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "wildFireSlope": {
              "type": "integer",
              "format": "int32"
            },
            "wildFireSlopeFlag": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "wildFireFuel": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "wildFireFuelFlag": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "wildFireDistanceToVeg": {
              "type": "integer",
              "format": "int32"
            },
            "wildFireDistanceToVegFlag": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "wildFireDistanceToVegUnit": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "wildFireSiteHazVer": {
              "type": "string"
            },
            "percentageSiteLossDeductibleAmount": {
              "type": "number",
              "format": "double"
            },
            "percentageCombinedLossDeductibleAmount": {
              "type": "number",
              "format": "double"
            },
            "isFranchiseSiteDeductible": {
              "type": "string",
              "enum": [
                "YES",
                "NO"
              ]
            },
            "isFranchiseCombinedDeductible": {
              "type": "string",
              "enum": [
                "YES",
                "NO"
              ]
            },
            "percentInGeography": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "score1": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "scoreOverall": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "distanceToWuiIntermix": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "distanceToWuiInterface": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "stochasticBurnProb": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "urbanConFlagRationScore": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "distanceToCalFireVeryHigh": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "distanceToCalFireHigh": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "distanceToCalFireMedium": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "yearLastHistFire250m": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "histFireYearCount250m": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "histFireYearCount2km": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "histFireYearCount5km": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "histFireYearCount10km": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "histFireYearCount20km": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "fireStationName1": {
              "type": "string",
              "readOnly": true
            },
            "fireStationLatitude1": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "fireStationLongitude1": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "fireStationDistance1": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "fireStationStreetAddress1": {
              "type": "string",
              "readOnly": true
            },
            "fireStationCityName1": {
              "type": "string",
              "readOnly": true
            },
            "fireStationPostalCode1": {
              "type": "string",
              "readOnly": true
            },
            "fireStationAdmin2name1": {
              "type": "string",
              "readOnly": true
            },
            "fireStationAdmin1code1": {
              "type": "string",
              "readOnly": true
            },
            "fireStationLevel1": {
              "type": "string",
              "readOnly": true
            },
            "fireStationEms1": {
              "type": "string",
              "readOnly": true
            },
            "fireStationType1": {
              "type": "string",
              "readOnly": true
            },
            "fireStationName2": {
              "type": "string",
              "readOnly": true
            },
            "fireStationLatitude2": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "fireStationLongitude2": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "fireStationDistance2": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "fireStationStreetAddress2": {
              "type": "string",
              "readOnly": true
            },
            "fireStationCityName2": {
              "type": "string",
              "readOnly": true
            },
            "fireStationPostalCode2": {
              "type": "string",
              "readOnly": true
            },
            "fireStationAdmin2name2": {
              "type": "string",
              "readOnly": true
            },
            "fireStationAdmin1code2": {
              "type": "string",
              "readOnly": true
            },
            "fireStationLevel2": {
              "type": "string",
              "readOnly": true
            },
            "fireStationEms2": {
              "type": "string",
              "readOnly": true
            },
            "fireStationType2": {
              "type": "string",
              "readOnly": true
            },
            "fireStationName3": {
              "type": "string",
              "readOnly": true
            },
            "fireStationLatitude3": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "fireStationLongitude3": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "fireStationDistance3": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "fireStationStreetaddress3": {
              "type": "string",
              "readOnly": true
            },
            "fireStationCityname3": {
              "type": "string",
              "readOnly": true
            },
            "fireStationPostalcode3": {
              "type": "string",
              "readOnly": true
            },
            "fireStationAdmin2name3": {
              "type": "string",
              "readOnly": true
            },
            "fireStationAdmin1code3": {
              "type": "string",
              "readOnly": true
            },
            "fireStationLevel3": {
              "type": "string",
              "readOnly": true
            },
            "fireStationEms3": {
              "type": "string",
              "readOnly": true
            },
            "fireStationType3": {
              "type": "string",
              "readOnly": true
            },
            "fireStationName4": {
              "type": "string",
              "readOnly": true
            },
            "fireStationLatitude4": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "fireStationLongitude4": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "fireStationDistance4": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "fireStationStreetAddress4": {
              "type": "string",
              "readOnly": true
            },
            "fireStationCityName4": {
              "type": "string",
              "readOnly": true
            },
            "fireStationPostalCode4": {
              "type": "string",
              "readOnly": true
            },
            "fireStationAdmin2name4": {
              "type": "string",
              "readOnly": true
            },
            "fireStationAdmin1code4": {
              "type": "string",
              "readOnly": true
            },
            "fireStationLevel4": {
              "type": "string",
              "readOnly": true
            },
            "fireStationEms4": {
              "type": "string",
              "readOnly": true
            },
            "fireStationType4": {
              "type": "string",
              "readOnly": true
            },
            "fireStationName5": {
              "type": "string",
              "readOnly": true
            },
            "fireStationLatitude5": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "fireStationLongitude5": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "fireStationDistance5": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "fireStationStreetAddress5": {
              "type": "string",
              "readOnly": true
            },
            "fireStationCityName5": {
              "type": "string",
              "readOnly": true
            },
            "fireStationPostalcode5": {
              "type": "string",
              "readOnly": true
            },
            "fireStationAdmin2name5": {
              "type": "string",
              "readOnly": true
            },
            "fireStationAdmin1code5": {
              "type": "string",
              "readOnly": true
            },
            "fireStationLevel5": {
              "type": "string",
              "readOnly": true
            },
            "fireStationEms5": {
              "type": "string",
              "readOnly": true
            },
            "fireStationType5": {
              "type": "string",
              "readOnly": true
            },
            "uri": {
              "type": "string",
              "readOnly": true
            }
          }
        },
        "LocationToDetail": {
          "required": [
            "yearUpgrade"
          ],
          "type": "object",
          "properties": {
            "locationToDetailId": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "siteLimit": {
              "type": "number",
              "format": "double"
            },
            "siteDeduct": {
              "type": "number",
              "format": "double"
            },
            "combinedLimit": {
              "type": "number",
              "format": "double"
            },
            "combinedDeduct": {
              "type": "number",
              "format": "double"
            },
            "yearUpgrade": {
              "type": "string",
              "format": "yyyy",
              "example": "2020"
            },
            "percentComplete": {
              "type": "number",
              "format": "double"
            },
            "fireClass": {
              "type": "string"
            },
            "rmsClass": {
              "type": "string"
            },
            "userClass": {
              "type": "string"
            },
            "atcOccupancy": {
              "type": "string"
            },
            "isoOccupancy": {
              "type": "string"
            },
            "userOccupancy": {
              "type": "string"
            },
            "percentageSiteLossDeductibleAmount": {
              "type": "number",
              "format": "double"
            },
            "percentageCombinedLossDeductibleAmount": {
              "type": "number",
              "format": "double"
            },
            "isFranchiseSiteDeductible": {
              "type": "string",
              "enum": [
                "YES",
                "NO"
              ]
            },
            "isFranchiseCombinedDeductible": {
              "type": "string",
              "enum": [
                "YES",
                "NO"
              ]
            },
            "isValid": {
              "type": "boolean"
            },
            "architecture": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "cladRate": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "cladType": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "constructQuality": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "designCode": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "doorOpenings": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "externalOrnament": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "floodVulnerability": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "foundation": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "maintenance": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "mechElecSide": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "otherOpenings": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "roofAge": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "roofAnchor": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "roofEquipment": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "roofFrame": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "roofGeometry": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "roofParpet": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "roofSystem": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "windMissile": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "windVulnerability": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "basement": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "mechElecGround": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "floodMissiles": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "floodProtection": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "iceDamProtection": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "plumbingInsulation": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "atticInsulation": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "roofVentilation": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "snowGuards": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "treeDensity": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "garaging": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "toPackage": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "toProtect": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "toSalvage": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "toSpecieStorage": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "uri": {
              "type": "string",
              "readOnly": true
            },
            "dominantSubperilCS": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "percentInGeographyCS": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "score1CS": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "score2CS": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "score3CS": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "scoreOverallCS": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "dominantSubperilWT": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "percentInGeographyWT": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "score1WT": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "score2WT": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "score3WT": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "scoreOverallWT": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            }
          }
        },
        "LocationTrDetail": {
          "required": [
            "completionDate",
            "startDate",
            "yearUpgrade"
          ],
          "type": "object",
          "properties": {
            "locationTrDetailId": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "siteLimit": {
              "type": "number",
              "format": "double"
            },
            "siteDeduct": {
              "type": "number",
              "format": "double"
            },
            "combinedLimit": {
              "type": "number",
              "format": "double"
            },
            "combinedDeduct": {
              "type": "number",
              "format": "double"
            },
            "yearUpgrade": {
              "type": "string",
              "format": "yyyy",
              "example": "2020"
            },
            "startDate": {
              "type": "string",
              "format": "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
              "example": "2020-01-01T00:00:00.000Z"
            },
            "completionDate": {
              "type": "string",
              "format": "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
              "example": "2020-01-01T00:00:00.000Z"
            },
            "percentComplete": {
              "type": "number",
              "format": "double"
            },
            "percentageSiteLossDeductibleAmount": {
              "type": "number",
              "format": "double"
            },
            "percentageCombinedLossDeductibleAmount": {
              "type": "number",
              "format": "double"
            },
            "isFranchiseSiteDeductible": {
              "type": "string",
              "enum": [
                "YES",
                "NO"
              ]
            },
            "isFranchiseCombinedDeductible": {
              "type": "string",
              "enum": [
                "YES",
                "NO"
              ]
            },
            "isValid": {
              "type": "boolean"
            },
            "trPackage": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "trProtect": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "trSalvage": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "trSpecieStorage": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "uri": {
              "type": "string",
              "readOnly": true
            },
            "score1": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "scoreOverall": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "targetsName1": {
              "type": "string",
              "readOnly": true
            },
            "targetsId1": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "targetsScore1": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "targetsDistance1": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "targetsCategory1": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "targetsCityName1": {
              "type": "string",
              "readOnly": true
            },
            "targetsAdmin1code1": {
              "type": "string",
              "readOnly": true
            },
            "targetsName2": {
              "type": "string",
              "readOnly": true
            },
            "targetsId2": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "targetsScore2": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "targetsDistance2": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "targetsCategory2": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "targetsCityName2": {
              "type": "string",
              "readOnly": true
            },
            "targetsAdmin1code2": {
              "type": "string",
              "readOnly": true
            },
            "targetsName3": {
              "type": "string",
              "readOnly": true
            },
            "targetsId3": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "targetsScore3": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "targetsDistance3": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "targetsCategory3": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "targetsCityName3": {
              "type": "string",
              "readOnly": true
            },
            "targetsAdmin1code3": {
              "type": "string",
              "readOnly": true
            },
            "targetsName4": {
              "type": "string",
              "readOnly": true
            },
            "targetsId4": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "targetsScore4": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "targetsDistance4": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "targetsCategory4": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "targetsCityName4": {
              "type": "string",
              "readOnly": true
            },
            "targetsAdmin1code4": {
              "type": "string",
              "readOnly": true
            },
            "targetsName5": {
              "type": "string",
              "readOnly": true
            },
            "targetsId5": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "targetsScore5": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "targetsDistance5": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "targetsCategory5": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "targetsCityName5": {
              "type": "string",
              "readOnly": true
            },
            "targetsAdmin1code5": {
              "type": "string",
              "readOnly": true
            }
          }
        },
        "LocationWcDetail": {
          "type": "object",
          "properties": {
            "locationWcDetailId": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "totalPayroll": {
              "type": "number",
              "format": "double"
            },
            "totalNumEmployees": {
              "type": "number",
              "format": "double"
            },
            "numEmployeesShift1": {
              "type": "number",
              "format": "double"
            },
            "numEmployeesShift2": {
              "type": "number",
              "format": "double"
            },
            "numEmployeesShift3": {
              "type": "number",
              "format": "double"
            },
            "numEmployeesShift4": {
              "type": "number",
              "format": "double"
            },
            "calcNumEmployees": {
              "type": "number",
              "format": "double"
            },
            "emergencyProtection": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "hazardousMaterials": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "wageRelativity": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "riskManagement": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "employeeDensity": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "uslh": {
              "type": "boolean"
            },
            "excessComp": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "undMngtAdjustment": {
              "type": "number",
              "format": "double"
            },
            "groupNum": {
              "type": "string"
            },
            "groupName": {
              "type": "string"
            },
            "occupancyTypeScheme": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "occupancyType": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "maxEmployees": {
              "type": "number",
              "format": "double"
            },
            "shiftType": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "isValid": {
              "type": "boolean"
            },
            "uri": {
              "type": "string",
              "readOnly": true
            }
          }
        },
        "LocationWsDetail": {
          "required": [
            "completionDate",
            "startDate",
            "yearUpgrade"
          ],
          "type": "object",
          "properties": {
            "locationWsDetailId": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "yearUpgrade": {
              "type": "string",
              "format": "yyyy",
              "example": "2020"
            },
            "startDate": {
              "type": "string",
              "format": "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
              "example": "2020-01-01T00:00:00.000Z"
            },
            "completionDate": {
              "type": "string",
              "format": "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
              "example": "2020-01-01T00:00:00.000Z"
            },
            "percentComplete": {
              "type": "number",
              "format": "double"
            },
            "coastalSegment": {
              "type": "string"
            },
            "fireClass": {
              "type": "string"
            },
            "rmsClass": {
              "type": "string"
            },
            "userClass": {
              "type": "string"
            },
            "atcOccupancy": {
              "type": "string"
            },
            "isoOccupancy": {
              "type": "string"
            },
            "sicOccupancy": {
              "type": "string"
            },
            "ibcOccupancy": {
              "type": "string"
            },
            "userOccupancy": {
              "type": "string"
            },
            "siteLimit": {
              "type": "number",
              "format": "double"
            },
            "siteDeduct": {
              "type": "number",
              "format": "double"
            },
            "combinedLimit": {
              "type": "number",
              "format": "double"
            },
            "combinedDeduct": {
              "type": "number",
              "format": "double"
            },
            "percentageSiteLossDeductibleAmount": {
              "type": "number",
              "format": "double"
            },
            "percentageCombinedLossDeductibleAmount": {
              "type": "number",
              "format": "double"
            },
            "isFranchiseSiteDeductible": {
              "type": "string",
              "enum": [
                "YES",
                "NO"
              ]
            },
            "isFranchiseCombinedDeductible": {
              "type": "string",
              "enum": [
                "YES",
                "NO"
              ]
            },
            "isValid": {
              "type": "boolean"
            },
            "architecture": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "cladRate": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "cladType": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "constructQuality": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "designCode": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "doorOpenings": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "externalOrnament": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "floodVulnerability": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "foundation": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "maintenance": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "mechElecSide": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "otherOpenings": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "roofAge": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "roofAnchor": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "roofEquipment": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "roofFrame": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "roofGeometry": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "roofParpet": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "roofSystem": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "windMissile": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "windVulnerability": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "floodMissiles": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "floodProtection": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "basement": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "mechElecGround": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "flashing": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "ifmVerticalExpDist": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "ifmStructCondition": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "ifmEquipBracing": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "ifmMissileExp": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "wsPackage": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "wsProtect": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "wsSalvage": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "wsSpecieStorage": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "resistGarage": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "wsFloorType": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "wsFoundationType": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "contamination": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "floodDuration": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "garaging": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "treeDensity": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "depreciationAge": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "velocity": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "uri": {
              "type": "string",
              "readOnly": true
            },
            "floodIndex": {
              "type": "number",
              "format": "double"
            },
            "distToCoast": {
              "type": "number",
              "format": "double"
            },
            "sysDistToCoast": {
              "type": "number",
              "format": "double"
            },
            "elevation": {
              "type": "number",
              "format": "double"
            },
            "manMadeCov": {
              "type": "number",
              "format": "double"
            },
            "naturalCov": {
              "type": "number",
              "format": "double"
            },
            "elevationCov": {
              "type": "number",
              "format": "double"
            },
            "distToCoastCov": {
              "type": "number",
              "format": "double"
            },
            "manMadeRoughness": {
              "type": "integer",
              "format": "int32"
            },
            "naturalRoughness": {
              "type": "integer",
              "format": "int32"
            },
            "windPool": {
              "type": "integer",
              "format": "int32"
            },
            "biZone": {
              "type": "integer",
              "format": "int32"
            },
            "topologyFeature": {
              "type": "integer",
              "format": "int32"
            },
            "elevationMatch": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "naturalRoughnessMatch": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "manMadeRoughnessMatch": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "distToCoastMatch": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "windPoolMatch": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "windExposure": {
              "type": "integer",
              "format": "int32"
            },
            "nfipRate": {
              "type": "number",
              "format": "double"
            },
            "nfipYear": {
              "type": "integer",
              "format": "int32"
            },
            "nfipYearMatch": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "buildingElevation": {
              "type": "number",
              "format": "double"
            },
            "buildingElevationMatch": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "rmsBuildingElevation": {
              "type": "number",
              "format": "double"
            },
            "rmsBuildingElevationMatch": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "zoneGroup": {
              "type": "integer",
              "format": "int32"
            },
            "perBasement": {
              "type": "number",
              "format": "double"
            },
            "percentInGeography": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "score1": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "score2": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "score3": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "scoreOverall": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "windpoolZone": {
              "type": "string",
              "readOnly": true
            },
            "distanceToInnerCoast": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "ws1YrRpWind": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "ws2YrRpWind": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "ws5YrRpWind": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "ws10YrRpWind": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "ws25YrRpWind": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "ws50YrRpWind": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "ws100YrRpWind": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "ws200YrRpWind": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "ws250YrRpWind": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "ws500YrRpWind": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "ws1000YrRpWind": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "ws10000YrRpWind": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "ws1YrRpSurgeDef": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "ws2YrRpSurgeDef": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "ws5YrRpSurgeDef": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "ws10YrRpSurgeDef": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "ws25YrRpSurgeDef": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "ws50YrRpSurgeDef": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "ws100YrRpSurgeDef": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "ws200YrRpSurgeDef": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "ws250YrRpSurgeDef": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "ws500YrRpSurgeDef": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "ws1000YrRpSurgeDef": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "ws10000YrRpSurgeDef": {
              "type": "number",
              "format": "double",
              "readOnly": true
            }
          }
        },
        "Property": {
          "required": [
            "expireDate",
            "inceptDate",
            "locationNumber",
            "yearBuilt"
          ],
          "type": "object",
          "properties": {
            "accountId": {
              "type": "integer",
              "format": "int32"
            },
            "locationId": {
              "type": "integer",
              "format": "int32"
            },
            "addressId": {
              "type": "integer",
              "format": "int32"
            },
            "locationNumber": {
              "type": "string"
            },
            "locationName": {
              "type": "string"
            },
            "contentLossTrigger": {
              "type": "string",
              "enum": [
                "NO",
                "YES"
              ]
            },
            "userId1": {
              "type": "string"
            },
            "userId2": {
              "type": "string"
            },
            "userText1": {
              "type": "string"
            },
            "userText2": {
              "type": "string"
            },
            "expireDate": {
              "type": "string",
              "format": "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
              "example": "2020-01-01T00:00:00.000Z"
            },
            "inceptDate": {
              "type": "string",
              "format": "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
              "example": "2020-01-01T00:00:00.000Z"
            },
            "yearBuilt": {
              "type": "string",
              "format": "yyyy",
              "example": "2020"
            },
            "createDate": {
              "type": "string",
              "readOnly": true
            },
            "updateDate": {
              "type": "string",
              "readOnly": true
            },
            "buildingClassScheme": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "buildingClass": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "occupancyTypeScheme": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "occupancyType": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "primaryLocId": {
              "type": "integer",
              "format": "int32"
            },
            "siteName": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "buildings": {
              "type": "integer",
              "format": "int32"
            },
            "stories": {
              "type": "integer",
              "format": "int32"
            },
            "floorOccupancy": {
              "type": "string"
            },
            "floorArea": {
              "type": "number",
              "format": "double"
            },
            "bldgHeight": {
              "type": "number",
              "format": "double"
            },
            "heightUnit": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "slope": {
              "type": "number",
              "format": "double"
            },
            "otherZone": {
              "type": "string"
            },
            "huZone": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "areaUnit": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "bldgValuation": {
              "type": "number",
              "format": "double"
            },
            "valuationDiffAmt": {
              "type": "number",
              "format": "double"
            },
            "valuationDiffPercent": {
              "type": "number",
              "format": "double"
            },
            "useContentValue": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "floodDefenseElevation": {
              "type": "number",
              "format": "double"
            },
            "floodDefenseElevationUnit": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "rentalPropertyIdentifier": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "mfdSubcategory": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "dwellTime": {
              "type": "integer",
              "format": "int32"
            },
            "nship": {
              "type": "integer",
              "format": "int32"
            },
            "userGroundElev": {
              "type": "number",
              "format": "double"
            },
            "userBfe": {
              "type": "number",
              "format": "double"
            },
            "floodDefHtAboveGrnd": {
              "type": "number",
              "format": "double"
            },
            "isPrimaryBldg": {
              "type": "boolean"
            },
            "isValid": {
              "type": "boolean"
            }
          }
        },
        "ReinsuranceCession": {
          "type": "object",
          "properties": {
            "reinsuranceCessionId": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "uri": {
              "type": "string",
              "readOnly": true
            },
            "reinsuranceCessionName": {
              "type": "string"
            },
            "exposureResourceId": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "exposureResourceType": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "POL",
                "LOC"
              ]
            },
            "type": {
              "type": "string",
              "enum": [
                "None",
                "Facultative",
                "Treaty"
              ]
            },
            "facReinsurer": {
              "$ref": "#/components/schemas/FacReinsurer"
            },
            "treaty": {
              "$ref": "#/components/schemas/Treaty"
            },
            "layerNumber": {
              "type": "integer",
              "format": "int32"
            },
            "layerAmount": {
              "type": "number",
              "format": "double"
            },
            "excessAmount": {
              "type": "number",
              "format": "double"
            },
            "percentReinsurance": {
              "type": "number",
              "format": "double"
            },
            "maolAmount": {
              "type": "number",
              "format": "double"
            },
            "priority": {
              "type": "integer",
              "format": "int32"
            },
            "isValid": {
              "type": "boolean"
            }
          }
        },
        "PolicyCondition": {
          "type": "object",
          "properties": {
            "policyConditionId": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "policyConditionName": {
              "type": "string"
            },
            "uri": {
              "type": "string",
              "readOnly": true
            },
            "isPredefined": {
              "type": "boolean"
            },
            "limit": {
              "type": "number",
              "format": "double"
            },
            "deductible": {
              "type": "number",
              "format": "double"
            },
            "deductibleType": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "conditionType": {
              "type": "string",
              "enum": [
                "POLICY_RESTRICTION",
                "SUBLIMIT"
              ]
            },
            "parentCondition": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "policyNumber": {
              "type": "string",
              "readOnly": true
            },
            "policyId": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "policyConditionCriterias": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PolicyConditionCriteria"
              }
            },
            "percentOfLossDeductibleAmount": {
              "type": "number",
              "format": "double"
            },
            "isFranchiseDeductible": {
              "type": "string",
              "enum": [
                "YES",
                "NO"
              ]
            }
          }
        },
        "PolicyConditionCriteria": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int32"
            },
            "logic": {
              "type": "string"
            },
            "openPar": {
              "type": "string"
            },
            "field": {
              "type": "string"
            },
            "operator": {
              "type": "string"
            },
            "value": {
              "type": "string"
            },
            "closePar": {
              "type": "string"
            }
          }
        },
        "LocationSearchItem": {
          "type": "object",
          "properties": {
            "propertyReference": {
              "type": "string"
            },
            "location": {
              "$ref": "#/components/schemas/Location"
            }
          }
        },
        "Link": {
          "required": [
            "href",
            "method",
            "rel"
          ],
          "type": "object",
          "properties": {
            "rel": {
              "type": "string"
            },
            "href": {
              "type": "string"
            },
            "method": {
              "type": "string"
            }
          }
        },
        "Meta": {
          "type": "object",
          "properties": {
            "createdBy": {
              "type": "string"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "updatedBy": {
              "type": "string"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time"
            },
            "count": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "MetaLinks": {
          "required": [
            "links",
            "meta"
          ],
          "type": "object",
          "properties": {
            "links": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Link"
              }
            },
            "meta": {
              "$ref": "#/components/schemas/Meta"
            }
          }
        },
        "Policy": {
          "required": [
            "policyNumber",
            "status"
          ],
          "type": "object",
          "properties": {
            "policyId": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "uri": {
              "type": "string",
              "readOnly": true
            },
            "policyNumber": {
              "type": "string"
            },
            "accountId": {
              "type": "integer",
              "format": "int32"
            },
            "lob": {
              "$ref": "#/components/schemas/LineOfBusinessInfo"
            },
            "peril": {
              "type": "string",
              "enum": [
                "EARTHQUAKE",
                "WINDSTORM",
                "TORNADO",
                "FLOOD",
                "FIRE",
                "TERRORISM",
                "WORKERSCOMP"
              ]
            },
            "status": {
              "type": "string",
              "enum": [
                "Booked",
                "Cancelled",
                "Expired",
                "Multiple",
                "Pending",
                "Quote",
                "Unknown",
                "What_if"
              ]
            },
            "inceptionDate": {
              "type": "string"
            },
            "expirationDate": {
              "type": "string"
            },
            "currency": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "partOf": {
              "type": "number",
              "format": "double"
            },
            "attachmentPoint": {
              "type": "number",
              "format": "double"
            },
            "minDeductible": {
              "type": "number",
              "format": "double"
            },
            "maxDeductible": {
              "type": "number",
              "format": "double"
            },
            "blanketLimit": {
              "type": "number",
              "format": "double"
            },
            "blanketDeductible": {
              "type": "number",
              "format": "double"
            },
            "blanketPremium": {
              "type": "number",
              "format": "double"
            },
            "biLifeLine": {
              "type": "integer",
              "format": "int32"
            },
            "deductType": {
              "type": "integer",
              "format": "int32"
            },
            "structure": {
              "type": "string",
              "enum": [
                "Standard",
                "Step"
              ]
            },
            "coverageBase": {
              "type": "string",
              "enum": [
                "BUILDING",
                "CONTENTS_OR_BI",
                "BUILDING_OR_CONTENTS_OR_BI",
                "CONTENTS",
                "BI",
                "BUILDING_AND_CONTENTS",
                "BUILDING_AND_BI",
                "CONTENTS_AND_BI",
                "BUILDING_AND_CONTENTS_AND_BI",
                "BUILDING_OR_CONTENTS",
                "BUILDING_OR_BI",
                "NOT_APPLICABLE"
              ]
            },
            "limitGU": {
              "type": "string",
              "enum": [
                "ACTUAL_PAYMENT_GU_LOSS_LIMITED",
                "ACTUAL_PAYMENT_GU_LOSS_NOT_LIMITED",
                "NOT_APPLICABLE"
              ]
            },
            "userText1": {
              "type": "string"
            },
            "userText2": {
              "type": "string"
            },
            "userText3": {
              "type": "string"
            },
            "userText4": {
              "type": "string"
            },
            "isValid": {
              "type": "boolean"
            },
            "newCauseOfLoss": {
              "type": "string",
              "enum": [
                "NONE",
                "EARTHQUAKE",
                "WINDSTORM",
                "SEVERE_CONVECTIVE_STORM",
                "FLOOD",
                "FIRE",
                "WIND",
                "WATER",
                "WIND_AND_WATER",
                "TERRORISM",
                "TERRORISM_CONVENTIONAL_ONLY",
                "TERRORISM_CBRN_ONLY"
              ]
            },
            "percentOfLossDeductible": {
              "type": "number",
              "format": "double"
            },
            "isFranchiseDeductible": {
              "type": "string",
              "enum": [
                "YES",
                "NO"
              ]
            },
            "aggregateMinDeductible": {
              "type": "number",
              "format": "double"
            },
            "aggregateLimit": {
              "type": "number",
              "format": "double"
            },
            "coverages": {
              "type": "array",
              "readOnly": true,
              "items": {
                "$ref": "#/components/schemas/PolicyCoverage"
              }
            },
            "reinsuranceCessions": {
              "type": "array",
              "readOnly": true,
              "items": {
                "$ref": "#/components/schemas/ReinsuranceCession"
              }
            },
            "policyConditions": {
              "type": "array",
              "readOnly": true,
              "items": {
                "$ref": "#/components/schemas/PolicyCondition"
              }
            }
          }
        },
        "PolicyCoverage": {
          "required": [
            "lossType"
          ],
          "type": "object",
          "properties": {
            "policyCoverageId": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "uri": {
              "type": "string",
              "readOnly": true
            },
            "peril": {
              "type": "string",
              "enum": [
                "EARTHQUAKE",
                "WINDSTORM",
                "TORNADO",
                "FLOOD",
                "FIRE",
                "TERRORISM",
                "WORKERSCOMP"
              ]
            },
            "lossType": {
              "type": "string",
              "enum": [
                "Building",
                "Contents",
                "BI",
                "CombinedCvg"
              ]
            },
            "premium": {
              "type": "number",
              "format": "double"
            },
            "limit": {
              "type": "number",
              "format": "double"
            },
            "deductible": {
              "type": "number",
              "format": "double"
            },
            "label": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "accumulation": {
              "type": "integer",
              "format": "int32"
            },
            "isValid": {
              "type": "boolean"
            },
            "percentOfLossDeductibleAmount": {
              "type": "number",
              "format": "double"
            },
            "isFranchiseDeductible": {
              "type": "string",
              "enum": [
                "YES",
                "NO"
              ]
            }
          }
        },
        "Portfolio": {
          "required": [
            "description",
            "portfolioName",
            "portfolioNumber"
          ],
          "type": "object",
          "properties": {
            "portfolioId": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "portfolioName": {
              "maxLength": 40,
              "minLength": 0,
              "type": "string"
            },
            "portfolioNumber": {
              "maxLength": 20,
              "minLength": 0,
              "type": "string"
            },
            "description": {
              "maxLength": 255,
              "minLength": 0,
              "type": "string"
            },
            "createDate": {
              "type": "string",
              "readOnly": true
            },
            "stampDate": {
              "type": "string",
              "readOnly": true
            },
            "uri": {
              "type": "string",
              "readOnly": true
            }
          }
        },
        "PortfolioMetrics": {
          "type": "object",
          "properties": {
            "totalAccounts": {
              "type": "integer",
              "format": "int32"
            },
            "totalLocations": {
              "type": "integer",
              "format": "int32"
            },
            "totalPolicies": {
              "type": "integer",
              "format": "int32"
            },
            "perilsExposed": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "number": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "owner": {
              "type": "string"
            },
            "createDate": {
              "type": "string"
            },
            "geocodeVersion": {
              "type": "string"
            },
            "hazardVersion": {
              "type": "string"
            }
          }
        },
        "PortfolioFilteredAccountsInput": {
          "type": "object",
          "properties": {
            "selectAll": {
              "type": "boolean"
            },
            "queryFilter": {
              "type": "string"
            },
            "markedAccounts": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "manageExistingAccounts": {
              "type": "boolean"
            }
          }
        },
        "PortfolioAccountsInput": {
          "type": "object",
          "properties": {
            "accountsToAdd": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "accountsToRemove": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "PortfolioSearch": {
          "required": [
            "description",
            "portfolioName",
            "portfolioNumber"
          ],
          "type": "object",
          "properties": {
            "portfolioId": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "portfolioName": {
              "maxLength": 40,
              "minLength": 0,
              "type": "string"
            },
            "portfolioNumber": {
              "maxLength": 20,
              "minLength": 0,
              "type": "string"
            },
            "description": {
              "maxLength": 255,
              "minLength": 0,
              "type": "string"
            },
            "createDate": {
              "type": "string",
              "readOnly": true
            },
            "stampDate": {
              "type": "string",
              "readOnly": true
            },
            "uri": {
              "type": "string",
              "readOnly": true
            },
            "geocodeVersion": {
              "type": "string"
            },
            "hazardVersion": {
              "type": "string"
            },
            "ownerName": {
              "type": "string"
            },
            "updatedBy": {
              "type": "string"
            }
          }
        },
        "Producer": {
          "required": [
            "producerName"
          ],
          "type": "object",
          "properties": {
            "producerId": {
              "maxLength": 20,
              "minLength": 0,
              "pattern": "^\\w([\\w-]*\\w|)$",
              "type": "string"
            },
            "producerName": {
              "maxLength": 40,
              "minLength": 1,
              "type": "string"
            },
            "uri": {
              "type": "string",
              "readOnly": true
            }
          }
        },
        "StepPolicy": {
          "required": [
            "expirationDate",
            "inceptionDate",
            "stepPolicyNumber"
          ],
          "type": "object",
          "properties": {
            "stepPolicyId": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "accountId": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "stepPolicyNumber": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "stepPolicyName": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "stepOrderId": {
              "type": "integer",
              "format": "int32"
            },
            "lob": {
              "$ref": "#/components/schemas/LineOfBusiness"
            },
            "causeOfLoss": {
              "type": "string",
              "enum": [
                "NONE",
                "EARTHQUAKE",
                "WINDSTORM",
                "SEVERE_CONVECTIVE_STORM",
                "FLOOD",
                "FIRE",
                "WIND",
                "WATER",
                "WIND_AND_WATER",
                "TERRORISM",
                "TERRORISM_CONVENTIONAL_ONLY",
                "TERRORISM_CBRN_ONLY"
              ]
            },
            "inceptionDate": {
              "type": "string"
            },
            "expirationDate": {
              "type": "string"
            },
            "payoutAmount": {
              "type": "number",
              "format": "double"
            },
            "currency": {
              "$ref": "#/components/schemas/ExposureValue"
            },
            "payoutFunction": {
              "type": "string",
              "enum": [
                "Standard",
                "Step"
              ]
            },
            "share": {
              "type": "number",
              "format": "double"
            },
            "excessAmount": {
              "type": "number",
              "format": "double"
            },
            "isPerRiskSubject": {
              "type": "string",
              "enum": [
                "Standard",
                "Step"
              ]
            },
            "childOrderId": {
              "pattern": "^$|^([1-9][0-9]*)(,([1-9][0-9]*))*$",
              "type": "string"
            },
            "subjectFunction": {
              "type": "string",
              "enum": [
                "None",
                "Min",
                "Max",
                "Sum"
              ]
            },
            "coverageBase": {
              "type": "string",
              "enum": [
                "BUILDING",
                "CONTENTS_OR_BI",
                "BUILDING_OR_CONTENTS_OR_BI",
                "CONTENTS",
                "BI",
                "BUILDING_AND_CONTENTS",
                "BUILDING_AND_BI",
                "CONTENTS_AND_BI",
                "BUILDING_AND_CONTENTS_AND_BI",
                "BUILDING_OR_CONTENTS",
                "BUILDING_OR_BI",
                "NOT_APPLICABLE"
              ]
            },
            "limitGU": {
              "type": "string",
              "enum": [
                "ACTUAL_PAYMENT_GU_LOSS_LIMITED",
                "ACTUAL_PAYMENT_GU_LOSS_NOT_LIMITED",
                "NOT_APPLICABLE"
              ]
            },
            "uri": {
              "type": "string",
              "readOnly": true
            }
          }
        },
        "BatchRequest": {
          "type": "object",
          "properties": {
            "method": {
              "type": "string"
            },
            "path": {
              "type": "string"
            },
            "body": {
              "type": "string"
            }
          }
        },
        "TreatyLineOfBusiness": {
          "required": [
            "lobName"
          ],
          "type": "object",
          "properties": {
            "lobId": {
              "type": "integer",
              "format": "int32"
            },
            "lobName": {
              "maxLength": 20,
              "minLength": 0,
              "type": "string"
            }
          }
        },
        "UnderWriter": {
          "required": [
            "underwriterName"
          ],
          "type": "object",
          "properties": {
            "underwriterId": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "underwriterName": {
              "maxLength": 30,
              "minLength": 0,
              "type": "string"
            },
            "uri": {
              "type": "string",
              "readOnly": true
            }
          }
        }
      }
    }
  }