{
	"openapi": "3.0.1",
	"info": {
		"title": "Risk Modeler 2.0",
		"description": "This documentation provides information on the Risk Modeler 2.0 public API.",
		"version": "September, 30, 2022"
	},
	"x-readme": {
		"explorer-enabled": false,
		"samples-languages": [ "curl", "java", "csharp", "node", "python" ],
		"proxy-enabled": true,
		"samples-enabled": true
	},
	"servers": [
		{
			"url": "https://{host}/riskmodeler",
			"description": "Risk Intelligence Analytics Platform",
			"variables": {
				"host": {
					"enum": [ "api-euw1.rms.com", "api-use1.rms.com" ],
					"default": "api-euw1.rms.com",
					"description": "Data center that hosts the tenant instance: api-euw1.rms.com or api-use1.rms.com."
				}
			}
		}
	],
	"security": [ { "RMS_Auth": [] } ],
	"paths": {
		"/v1/analysis-groups": {
			"get": {
				"tags": [ "Analysis GroupsV1" ],
				"summary": "Get analysis groups",
				"description": "",
				"operationId": "getAnalysisGroups",
				"parameters": [
					{
						"name": "q",
						"in": "query",
						"description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
						"schema": { "type": "string" }
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Specify `ASC` to display the results in alphabetical or numerical ascending order or `DESC` to display the results in descending order.",
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "List of all Analysis Groups have been successfully retrieved.",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/AnalysisGroupSearchResult" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the View Results action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"post": {
				"tags": [ "Analysis GroupsV1" ],
				"summary": "Create analysis group",
				"description": "",
				"operationId": "createAnalysisGroup",
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/AnalysisGroup" } } },
					"required": true
				},
				"responses": {
					"201": {
						"description": "The Analysis Group resource was successfully created.",
						"headers": {
							"Location": {
								"description": "workflowId",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the Grouping action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/analysis-groups/{id}": {
			"get": {
				"tags": [ "Analysis GroupsV1" ],
				"summary": "Get analysis group",
				"description": "",
				"operationId": "getAnalysisGroupById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Analysis Group ID",
						"required": true,
						"schema": { "type": "integer", "format": "int64" }
					}
				],
				"responses": {
					"200": {
						"description": "Analysis Group has been successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/AnalysisGroup" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the View Results action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "Analysis GroupsV1" ],
				"summary": "Update analysis group",
				"description": "",
				"operationId": "updateAnalysisGroup",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the Analysis Group.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/AnalysisGroup" } } },
					"required": true
				},
				"responses": {
					"204": {
						"description": "Analysis Group successfully updated",
						"headers": {
							"Location": {
								"description": "workflowId",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the Grouping action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/analysis-groups/{id}/regroup": {
			"post": {
				"tags": [ "Analysis GroupsV1" ],
				"summary": "Regroup analysis group",
				"description": "",
				"operationId": "regroupAnalysisGroup",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the Analysis Group.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"204": {
						"description": "Analysis Group successfully updated",
						"headers": {
							"Location": {
								"description": "workflowId",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the Grouping action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/analysis-groups/validate": {
			"post": {
				"tags": [ "Analysis GroupsV1" ],
				"summary": "Validate analysis group",
				"description": "",
				"operationId": "validateAnalysisGroup",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": { "type": "array", "items": { "type": "integer", "format": "int32" } }
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "List of inconsistent treaties has been retrieved",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/TreatyWithAnalysisInfo" }
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to\n  perform the Grouping action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/analyses/{id}/convert-event-rate-loss": {
			"post": {
				"tags": [ "MetricsV1" ],
				"summary": "Convert event rates and losses",
				"description": "",
				"operationId": "convertAnalysisEvent",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the analysis on which you want to run convert event rate and loss workflow. Should be valid analysis ID.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/ConvertEventInput" } }
					},
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "workflowId",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"metadata": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "object" } }
										},
										"status": { "type": "integer", "format": "int32" },
										"length": { "type": "integer", "format": "int32" },
										"location": { "type": "string", "format": "uri" },
										"language": {
											"type": "object",
											"properties": {
												"language": { "type": "string" },
												"script": { "type": "string" },
												"country": { "type": "string" },
												"variant": { "type": "string" },
												"extensionKeys": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"unicodeLocaleAttributes": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"unicodeLocaleKeys": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"iso3Language": { "type": "string" },
												"iso3Country": { "type": "string" },
												"displayLanguage": { "type": "string" },
												"displayScript": { "type": "string" },
												"displayCountry": { "type": "string" },
												"displayVariant": { "type": "string" },
												"displayName": { "type": "string" }
											}
										},
										"statusInfo": {
											"type": "object",
											"properties": {
												"family": {
													"type": "string",
													"enum": [
														"INFORMATIONAL",
														"SUCCESSFUL",
														"REDIRECTION",
														"CLIENT_ERROR",
														"SERVER_ERROR",
														"OTHER"
													]
												},
												"statusCode": { "type": "integer", "format": "int32" },
												"reasonPhrase": { "type": "string" }
											}
										},
										"mediaType": {
											"type": "object",
											"properties": {
												"type": { "type": "string" },
												"subtype": { "type": "string" },
												"parameters": {
													"type": "object",
													"additionalProperties": { "type": "string" }
												},
												"wildcardType": { "type": "boolean" },
												"wildcardSubtype": { "type": "boolean" }
											}
										},
										"allowedMethods": {
											"uniqueItems": true,
											"type": "array",
											"items": { "type": "string" }
										},
										"cookies": {
											"type": "object",
											"additionalProperties": {
												"type": "object",
												"properties": {
													"name": { "type": "string" },
													"value": { "type": "string" },
													"version": { "type": "integer", "format": "int32" },
													"path": { "type": "string" },
													"domain": { "type": "string" },
													"comment": { "type": "string" },
													"maxAge": { "type": "integer", "format": "int32" },
													"expiry": { "type": "string", "format": "date-time" },
													"secure": { "type": "boolean" },
													"httpOnly": { "type": "boolean" }
												}
											}
										},
										"entityTag": {
											"type": "object",
											"properties": {
												"value": { "type": "string" },
												"weak": { "type": "boolean" }
											}
										},
										"stringHeaders": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "string" } }
										},
										"lastModified": { "type": "string", "format": "date-time" },
										"date": { "type": "string", "format": "date-time" },
										"headers": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "object" } }
										},
										"entity": { "type": "object" },
										"links": {
											"uniqueItems": true,
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"type": { "type": "string" },
													"params": {
														"type": "object",
														"additionalProperties": { "type": "string" }
													},
													"uri": { "type": "string", "format": "uri" },
													"title": { "type": "string" },
													"uriBuilder": { "type": "object" },
													"rel": { "type": "string" },
													"rels": { "type": "array", "items": { "type": "string" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to\n  perform the Convert Event Rates action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/analyses/{id}/convertcurrency": {
			"post": {
				"tags": [ "MetricsV1" ],
				"summary": "Convert currency by analysis",
				"description": "",
				"operationId": "convertResultCurrency",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"requestBody": {
					"content": { "*/*": { "schema": { "$ref": "#/components/schemas/ConvertResultCurrencyInput" } } },
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted",
						"headers": {
							"Location": {
								"description": "workflowId",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request. The input data is invalid.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to\n  perform the Convert Result Currency action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/analyses": {
			"get": {
				"tags": [ "MetricsV1" ],
				"summary": "Get analyses",
				"description": "",
				"operationId": "getAnalysesResults",
				"parameters": [
					{
						"name": "q",
						"in": "query",
						"description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
						"schema": { "type": "string" }
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Specify `ASC` to display the results in alphabetical or numerical ascending order or `DESC` to display the results in descending order.",
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "All Analyses successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/AnalysisSearchResult" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to\n  perform the View Results action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"deprecated": true,
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "MetricsV1" ],
				"summary": "Delete analysis results",
				"description": "",
				"operationId": "deleteAnalyses",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": { "type": "array", "items": { "type": "integer", "format": "int64" } }
						}
					},
					"required": true
				},
				"responses": {
					"204": {
						"description": "A list of Analyses deleted.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"metadata": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "object" } }
										},
										"status": { "type": "integer", "format": "int32" },
										"length": { "type": "integer", "format": "int32" },
										"location": { "type": "string", "format": "uri" },
										"language": {
											"type": "object",
											"properties": {
												"language": { "type": "string" },
												"script": { "type": "string" },
												"country": { "type": "string" },
												"variant": { "type": "string" },
												"extensionKeys": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"unicodeLocaleAttributes": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"unicodeLocaleKeys": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"iso3Language": { "type": "string" },
												"iso3Country": { "type": "string" },
												"displayLanguage": { "type": "string" },
												"displayScript": { "type": "string" },
												"displayCountry": { "type": "string" },
												"displayVariant": { "type": "string" },
												"displayName": { "type": "string" }
											}
										},
										"statusInfo": {
											"type": "object",
											"properties": {
												"family": {
													"type": "string",
													"enum": [
														"INFORMATIONAL",
														"SUCCESSFUL",
														"REDIRECTION",
														"CLIENT_ERROR",
														"SERVER_ERROR",
														"OTHER"
													]
												},
												"statusCode": { "type": "integer", "format": "int32" },
												"reasonPhrase": { "type": "string" }
											}
										},
										"mediaType": {
											"type": "object",
											"properties": {
												"type": { "type": "string" },
												"subtype": { "type": "string" },
												"parameters": {
													"type": "object",
													"additionalProperties": { "type": "string" }
												},
												"wildcardType": { "type": "boolean" },
												"wildcardSubtype": { "type": "boolean" }
											}
										},
										"allowedMethods": {
											"uniqueItems": true,
											"type": "array",
											"items": { "type": "string" }
										},
										"cookies": {
											"type": "object",
											"additionalProperties": {
												"type": "object",
												"properties": {
													"name": { "type": "string" },
													"value": { "type": "string" },
													"version": { "type": "integer", "format": "int32" },
													"path": { "type": "string" },
													"domain": { "type": "string" },
													"comment": { "type": "string" },
													"maxAge": { "type": "integer", "format": "int32" },
													"expiry": { "type": "string", "format": "date-time" },
													"secure": { "type": "boolean" },
													"httpOnly": { "type": "boolean" }
												}
											}
										},
										"entityTag": {
											"type": "object",
											"properties": {
												"value": { "type": "string" },
												"weak": { "type": "boolean" }
											}
										},
										"stringHeaders": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "string" } }
										},
										"lastModified": { "type": "string", "format": "date-time" },
										"date": { "type": "string", "format": "date-time" },
										"headers": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "object" } }
										},
										"entity": { "type": "object" },
										"links": {
											"uniqueItems": true,
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"type": { "type": "string" },
													"params": {
														"type": "object",
														"additionalProperties": { "type": "string" }
													},
													"uri": { "type": "string", "format": "uri" },
													"title": { "type": "string" },
													"uriBuilder": { "type": "object" },
													"rel": { "type": "string" },
													"rels": { "type": "array", "items": { "type": "string" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the Edit Results action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/analyses/{id}": {
			"delete": {
				"tags": [ "MetricsV1" ],
				"summary": "Delete analysis result",
				"description": "",
				"operationId": "deleteAnalysis",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"204": {
						"description": "Analysis deleted successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"metadata": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "object" } }
										},
										"status": { "type": "integer", "format": "int32" },
										"length": { "type": "integer", "format": "int32" },
										"location": { "type": "string", "format": "uri" },
										"language": {
											"type": "object",
											"properties": {
												"language": { "type": "string" },
												"script": { "type": "string" },
												"country": { "type": "string" },
												"variant": { "type": "string" },
												"extensionKeys": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"unicodeLocaleAttributes": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"unicodeLocaleKeys": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"iso3Language": { "type": "string" },
												"iso3Country": { "type": "string" },
												"displayLanguage": { "type": "string" },
												"displayScript": { "type": "string" },
												"displayCountry": { "type": "string" },
												"displayVariant": { "type": "string" },
												"displayName": { "type": "string" }
											}
										},
										"statusInfo": {
											"type": "object",
											"properties": {
												"family": {
													"type": "string",
													"enum": [
														"INFORMATIONAL",
														"SUCCESSFUL",
														"REDIRECTION",
														"CLIENT_ERROR",
														"SERVER_ERROR",
														"OTHER"
													]
												},
												"statusCode": { "type": "integer", "format": "int32" },
												"reasonPhrase": { "type": "string" }
											}
										},
										"mediaType": {
											"type": "object",
											"properties": {
												"type": { "type": "string" },
												"subtype": { "type": "string" },
												"parameters": {
													"type": "object",
													"additionalProperties": { "type": "string" }
												},
												"wildcardType": { "type": "boolean" },
												"wildcardSubtype": { "type": "boolean" }
											}
										},
										"allowedMethods": {
											"uniqueItems": true,
											"type": "array",
											"items": { "type": "string" }
										},
										"cookies": {
											"type": "object",
											"additionalProperties": {
												"type": "object",
												"properties": {
													"name": { "type": "string" },
													"value": { "type": "string" },
													"version": { "type": "integer", "format": "int32" },
													"path": { "type": "string" },
													"domain": { "type": "string" },
													"comment": { "type": "string" },
													"maxAge": { "type": "integer", "format": "int32" },
													"expiry": { "type": "string", "format": "date-time" },
													"secure": { "type": "boolean" },
													"httpOnly": { "type": "boolean" }
												}
											}
										},
										"entityTag": {
											"type": "object",
											"properties": {
												"value": { "type": "string" },
												"weak": { "type": "boolean" }
											}
										},
										"stringHeaders": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "string" } }
										},
										"lastModified": { "type": "string", "format": "date-time" },
										"date": { "type": "string", "format": "date-time" },
										"headers": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "object" } }
										},
										"entity": { "type": "object" },
										"links": {
											"uniqueItems": true,
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"type": { "type": "string" },
													"params": {
														"type": "object",
														"additionalProperties": { "type": "string" }
													},
													"uri": { "type": "string", "format": "uri" },
													"title": { "type": "string" },
													"uriBuilder": { "type": "object" },
													"rel": { "type": "string" },
													"rels": { "type": "array", "items": { "type": "string" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the Edit Results action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/analyses/{id}/pate-batch": {
			"delete": {
				"tags": [ "MetricsV1" ],
				"summary": "Delete PATE treaties",
				"description": "",
				"operationId": "deletePateBatch",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": { "type": "array", "items": { "$ref": "#/components/schemas/PateBatchInput" } }
						}
					},
					"required": true
				},
				"responses": {
					"204": {
						"description": "Deleted. PATE treaties for given analysis deleted.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"metadata": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "object" } }
										},
										"status": { "type": "integer", "format": "int32" },
										"length": { "type": "integer", "format": "int32" },
										"location": { "type": "string", "format": "uri" },
										"language": {
											"type": "object",
											"properties": {
												"language": { "type": "string" },
												"script": { "type": "string" },
												"country": { "type": "string" },
												"variant": { "type": "string" },
												"extensionKeys": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"unicodeLocaleAttributes": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"unicodeLocaleKeys": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"iso3Language": { "type": "string" },
												"iso3Country": { "type": "string" },
												"displayLanguage": { "type": "string" },
												"displayScript": { "type": "string" },
												"displayCountry": { "type": "string" },
												"displayVariant": { "type": "string" },
												"displayName": { "type": "string" }
											}
										},
										"statusInfo": {
											"type": "object",
											"properties": {
												"family": {
													"type": "string",
													"enum": [
														"INFORMATIONAL",
														"SUCCESSFUL",
														"REDIRECTION",
														"CLIENT_ERROR",
														"SERVER_ERROR",
														"OTHER"
													]
												},
												"statusCode": { "type": "integer", "format": "int32" },
												"reasonPhrase": { "type": "string" }
											}
										},
										"mediaType": {
											"type": "object",
											"properties": {
												"type": { "type": "string" },
												"subtype": { "type": "string" },
												"parameters": {
													"type": "object",
													"additionalProperties": { "type": "string" }
												},
												"wildcardType": { "type": "boolean" },
												"wildcardSubtype": { "type": "boolean" }
											}
										},
										"allowedMethods": {
											"uniqueItems": true,
											"type": "array",
											"items": { "type": "string" }
										},
										"cookies": {
											"type": "object",
											"additionalProperties": {
												"type": "object",
												"properties": {
													"name": { "type": "string" },
													"value": { "type": "string" },
													"version": { "type": "integer", "format": "int32" },
													"path": { "type": "string" },
													"domain": { "type": "string" },
													"comment": { "type": "string" },
													"maxAge": { "type": "integer", "format": "int32" },
													"expiry": { "type": "string", "format": "date-time" },
													"secure": { "type": "boolean" },
													"httpOnly": { "type": "boolean" }
												}
											}
										},
										"entityTag": {
											"type": "object",
											"properties": {
												"value": { "type": "string" },
												"weak": { "type": "boolean" }
											}
										},
										"stringHeaders": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "string" } }
										},
										"lastModified": { "type": "string", "format": "date-time" },
										"date": { "type": "string", "format": "date-time" },
										"headers": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "object" } }
										},
										"entity": { "type": "object" },
										"links": {
											"uniqueItems": true,
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"type": { "type": "string" },
													"params": {
														"type": "object",
														"additionalProperties": { "type": "string" }
													},
													"uri": { "type": "string", "format": "uri" },
													"title": { "type": "string" },
													"uriBuilder": { "type": "object" },
													"rel": { "type": "string" },
													"rels": { "type": "array", "items": { "type": "string" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the Post Analysis Treaty Execution action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/analyses/{analysisID}/pate-treaties": {
			"get": {
				"tags": [ "MetricsV1" ],
				"summary": "Get PATE treaties",
				"description": "",
				"operationId": "getPateList",
				"parameters": [
					{
						"name": "analysisID",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "List of treaties in the data source is successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/PateSearchResult" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the View Results action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "MetricsV1" ],
				"summary": "Delete PATE treaties",
				"description": "",
				"operationId": "deletePateList",
				"parameters": [
					{
						"name": "analysisID",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"204": { "description": "Deleted. PATE treaties for analysis deleted." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the Post Analysis Treaty Execution action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/analyses/{id}/summary_report": {
			"post": {
				"tags": [ "MetricsV1" ],
				"summary": "Generate summary report",
				"description": "",
				"operationId": "SummaryReportMetrics",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/AnalysisSummaryReportInput" } }
					},
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "url containing identifier of the submitted workflow.",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the Download Report action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/analyses/{analysisID}/location-aal": {
			"get": {
				"tags": [ "MetricsV1" ],
				"summary": "Get location AAL",
				"description": "",
				"operationId": "getAALMetrics",
				"parameters": [
					{
						"name": "analysisID",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "perspective",
						"in": "query",
						"description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
						"schema": { "type": "string", "default": "AAL DESC" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "maximum": 1000, "type": "integer", "format": "int32", "default": 100 }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32", "default": 0 }
					}
				],
				"responses": {
					"200": {
						"description": "Location AAL for specified analysis successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/LocationAALResult" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the View Results action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/analyses/{id}/analysis-region": {
			"get": {
				"tags": [ "MetricsV1" ],
				"summary": "Get region details",
				"description": "",
				"operationId": "getAnalysisRegions",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "List of region details for specified analysis successfully retrieved.",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/AnalysisRegionSearchResult" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the View Results action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/analyses/{analysisID}/cedants": {
			"get": {
				"tags": [ "MetricsV1" ],
				"summary": "Get cedants by analysis",
				"description": "",
				"operationId": "getCedantsByAnalysisv1",
				"parameters": [
					{
						"name": "analysisID",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "perspective",
						"in": "query",
						"description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "List of Cedants in the analysis is successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/CedantSearchResult" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the View Results action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/analyses/{id}/ep/interpolate": {
			"get": {
				"tags": [ "MetricsV1" ],
				"summary": "Get EP interpolation results",
				"description": "",
				"operationId": "getEPInterpolateMetricResults",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "perspective",
						"in": "query",
						"description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "treatyId",
						"in": "query",
						"description": "Treaty ID",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "exposureId",
						"in": "query",
						"description": "Exposure ID",
						"schema": { "minimum": 0, "type": "integer", "format": "int32" }
					},
					{
						"name": "exposureType",
						"in": "query",
						"description": "Exposure type",
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "key",
						"in": "query",
						"description": "Metric Key name",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "value",
						"in": "query",
						"description": "Metric Key value",
						"schema": { "type": "number", "format": "double" }
					},
					{
						"name": "metricType",
						"in": "query",
						"description": "Metric Type",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "List of Interpolation EP results successfully retrieved.",
						"content": {
							"application/json": {
								"schema": { "type": "array", "items": { "$ref": "#/components/schemas/MetricsOutput" } }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the View Results action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/analyses/{id}/ep": {
			"get": {
				"tags": [ "MetricsV1" ],
				"summary": "Get EP metrics",
				"description": "",
				"operationId": "getEPMetricsByAnalysis",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "perspective",
						"in": "query",
						"description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "treatyId",
						"in": "query",
						"description": "Treaty ID",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "exposureId",
						"in": "query",
						"description": "Exposure ID",
						"schema": { "minimum": 0, "type": "integer", "format": "int32" }
					},
					{
						"name": "exposureType",
						"in": "query",
						"description": "Exposure type",
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "metricType",
						"in": "query",
						"description": "Metric Type",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "List of EP metrics for a specified analysis successfully retrieved.",
						"content": {
							"application/json": {
								"schema": { "type": "array", "items": { "$ref": "#/components/schemas/MetricsOutput" } }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the View Results action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/analyses/{id}/elt": {
			"get": {
				"tags": [ "MetricsV1" ],
				"summary": "Get ELT",
				"description": "",
				"operationId": "getEventLossTableResults",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "perspective",
						"in": "query",
						"description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page, maximum is 1000",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "treatyId",
						"in": "query",
						"description": "Treaty ID",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "exposureId",
						"in": "query",
						"description": "Exposure ID",
						"schema": { "minimum": 0, "type": "integer", "format": "int32" }
					},
					{
						"name": "exposureType",
						"in": "query",
						"description": "Exposure type",
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "eventIds",
						"in": "query",
						"description": "Event IDs",
						"schema": {
							"maxItems": 25,
							"minItems": 0,
							"uniqueItems": true,
							"type": "array",
							"items": { "type": "integer", "format": "int32" }
						}
					}
				],
				"responses": {
					"200": {
						"description": "Report for specified analysis successfully retrieved.",
						"content": {
							"application/json": {
								"schema": { "type": "array", "items": { "$ref": "#/components/schemas/EventLossItem" } }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the View Results action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/analyses/{analysisID}/metrics": {
			"get": {
				"tags": [ "MetricsV1" ],
				"summary": "Get metrics",
				"description": "",
				"operationId": "getMetrics",
				"parameters": [
					{
						"name": "analysisID",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "metricType",
						"in": "query",
						"description": "metricType.",
						"required": true,
						"schema": { "type": "string", "enum": [ "STATS", "ELT", "EP" ] }
					},
					{
						"name": "position",
						"in": "query",
						"description": "position.",
						"required": true,
						"schema": { "type": "array", "items": { "type": "string" } }
					},
					{
						"name": "granularity",
						"in": "query",
						"description": "granularity.",
						"schema": {
							"type": "array",
							"items": { "type": "string", "default": "policy", "enum": [ "POLICY" ] }
						}
					},
					{
						"name": "epType",
						"in": "query",
						"description": "ep Type.",
						"schema": {
							"type": "array",
							"items": { "type": "string", "enum": [ "OEP", "AEP", "TCE_AEP", "TCE_OEP" ] }
						}
					},
					{
						"name": "returnPeriod",
						"in": "query",
						"description": "returnPeriod.",
						"schema": {
							"maxItems": 12,
							"minItems": 0,
							"type": "array",
							"items": { "type": "integer", "format": "int32" }
						}
					},
					{
						"name": "filterCondition",
						"in": "query",
						"description": "Filter condition.",
						"schema": { "type": "string" }
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "maximum": 1000, "type": "integer", "format": "int32", "default": 100 }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at 0.",
						"schema": { "type": "integer", "format": "int32", "default": 0 }
					}
				],
				"responses": {
					"200": {
						"description": "metrics for specified analysis successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/MetricsResult" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the View Results action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/analyses/{id}/keylosses": {
			"get": {
				"tags": [ "MetricsV1" ],
				"summary": "Get key losses",
				"description": "",
				"operationId": "getNonEpKeyLoss",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "perspective",
						"in": "query",
						"description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "treatyId",
						"in": "query",
						"description": "Treaty ID",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "exposureId",
						"in": "query",
						"description": "Exposure ID",
						"schema": { "minimum": 0, "type": "integer", "format": "int32" }
					},
					{
						"name": "exposureType",
						"in": "query",
						"description": "Exposure type",
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "Key Losses for specified analysis successfully retrieved.",
						"content": {
							"application/json": {
								"schema": { "type": "array", "items": { "$ref": "#/components/schemas/KeyLossItem" } }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the View Results action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/analyses/{id}/plt": {
			"get": {
				"tags": [ "MetricsV1" ],
				"summary": "Get PLT",
				"description": "",
				"operationId": "getPeriodLossTableResults",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "perspective",
						"in": "query",
						"description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page, maximum is 1000",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "treatyId",
						"in": "query",
						"description": "Treaty ID",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "exposureId",
						"in": "query",
						"description": "Exposure ID",
						"schema": { "minimum": 0, "type": "integer", "format": "int32" }
					},
					{
						"name": "exposureType",
						"in": "query",
						"description": "Exposure type",
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "PLT report for specified analysis successfully retrieved.",
						"content": {
							"application/json": {
								"schema": { "type": "array", "items": { "$ref": "#/components/schemas/EventLossItem" } }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/analyses/{analysisID}/perspectives": {
			"get": {
				"tags": [ "MetricsV1" ],
				"summary": "Get perspectives",
				"description": "",
				"operationId": "getPerspectivesForAnalysis",
				"parameters": [
					{
						"name": "analysisID",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "exposureType",
						"in": "query",
						"description": "Exposure type",
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "Values of all available perspectives for a given analysis",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityResult" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/analyses/{id}/sampledlosses": {
			"get": {
				"tags": [ "MetricsV1" ],
				"summary": "Get sampled losses",
				"description": "",
				"operationId": "getSampledLoss",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "perspective",
						"in": "query",
						"description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "treatyId",
						"in": "query",
						"description": "Treaty ID",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "exposureId",
						"in": "query",
						"description": "Exposure ID",
						"schema": { "minimum": 0, "type": "integer", "format": "int32" }
					},
					{
						"name": "exposureType",
						"in": "query",
						"description": "Exposure type",
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "events",
						"in": "query",
						"description": "EventIds list",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Sampled Losses for specified analysis successfully retrieved.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/SampledLossItem" }
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/analyses/{id}/stats": {
			"get": {
				"tags": [ "MetricsV1" ],
				"summary": "Get statistics",
				"description": "",
				"operationId": "getStatisticsResults",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "perspective",
						"in": "query",
						"description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "treatyId",
						"in": "query",
						"description": "Treaty ID",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "exposureId",
						"in": "query",
						"description": "Exposure ID",
						"schema": { "minimum": 0, "type": "integer", "format": "int32" }
					},
					{
						"name": "exposureType",
						"in": "query",
						"description": "Exposure type",
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "List of Statistics for specified analysis successfully retrieved.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/StatisticsItem" }
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/analyses/{analysisID}/treaties": {
			"get": {
				"tags": [ "MetricsV1" ],
				"summary": "Get treaties by analysis",
				"description": "",
				"operationId": "getTreatiesList",
				"parameters": [
					{
						"name": "analysisID",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "List of treaties in the Analysis is successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/TreatySearchResult" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/analyses/{analysisID}/treaty/{treatyID}": {
			"get": {
				"tags": [ "MetricsV1" ],
				"summary": "Get treaty",
				"description": "",
				"operationId": "getTreatyById",
				"parameters": [
					{
						"name": "analysisID",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "treatyID",
						"in": "path",
						"description": "Treaty ID",
						"required": true,
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "Treaty for a specified analysis is successfully retrieved.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Treaty" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/analyses/{id}/map-perspective": {
			"post": {
				"tags": [ "MetricsV1" ],
				"summary": "Convert perspective",
				"description": "",
				"operationId": "mapPerspective",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the analysis on which you want to run Map Perspective workflow. Should be valid analysis id.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/MapPerspectiveInput" } }
					},
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "workflowId",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"metadata": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "object" } }
										},
										"status": { "type": "integer", "format": "int32" },
										"length": { "type": "integer", "format": "int32" },
										"location": { "type": "string", "format": "uri" },
										"language": {
											"type": "object",
											"properties": {
												"language": { "type": "string" },
												"script": { "type": "string" },
												"country": { "type": "string" },
												"variant": { "type": "string" },
												"extensionKeys": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"unicodeLocaleAttributes": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"unicodeLocaleKeys": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"iso3Language": { "type": "string" },
												"iso3Country": { "type": "string" },
												"displayLanguage": { "type": "string" },
												"displayScript": { "type": "string" },
												"displayCountry": { "type": "string" },
												"displayVariant": { "type": "string" },
												"displayName": { "type": "string" }
											}
										},
										"statusInfo": {
											"type": "object",
											"properties": {
												"family": {
													"type": "string",
													"enum": [
														"INFORMATIONAL",
														"SUCCESSFUL",
														"REDIRECTION",
														"CLIENT_ERROR",
														"SERVER_ERROR",
														"OTHER"
													]
												},
												"statusCode": { "type": "integer", "format": "int32" },
												"reasonPhrase": { "type": "string" }
											}
										},
										"mediaType": {
											"type": "object",
											"properties": {
												"type": { "type": "string" },
												"subtype": { "type": "string" },
												"parameters": {
													"type": "object",
													"additionalProperties": { "type": "string" }
												},
												"wildcardType": { "type": "boolean" },
												"wildcardSubtype": { "type": "boolean" }
											}
										},
										"allowedMethods": {
											"uniqueItems": true,
											"type": "array",
											"items": { "type": "string" }
										},
										"cookies": {
											"type": "object",
											"additionalProperties": {
												"type": "object",
												"properties": {
													"name": { "type": "string" },
													"value": { "type": "string" },
													"version": { "type": "integer", "format": "int32" },
													"path": { "type": "string" },
													"domain": { "type": "string" },
													"comment": { "type": "string" },
													"maxAge": { "type": "integer", "format": "int32" },
													"expiry": { "type": "string", "format": "date-time" },
													"secure": { "type": "boolean" },
													"httpOnly": { "type": "boolean" }
												}
											}
										},
										"entityTag": {
											"type": "object",
											"properties": {
												"value": { "type": "string" },
												"weak": { "type": "boolean" }
											}
										},
										"stringHeaders": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "string" } }
										},
										"lastModified": { "type": "string", "format": "date-time" },
										"date": { "type": "string", "format": "date-time" },
										"headers": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "object" } }
										},
										"entity": { "type": "object" },
										"links": {
											"uniqueItems": true,
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"type": { "type": "string" },
													"params": {
														"type": "object",
														"additionalProperties": { "type": "string" }
													},
													"uri": { "type": "string", "format": "uri" },
													"title": { "type": "string" },
													"uriBuilder": { "type": "object" },
													"rel": { "type": "string" },
													"rels": { "type": "array", "items": { "type": "string" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Financial Re-Mapping\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
    "/v1/analyses/{id}/marginal-impact" : {
      "post" : {
        "tags" : [ "MetricsV1" ],
        "summary" : "Calculate marginal impact report",
        "description" : "",
        "operationId" : "marginalImpactv1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID number of a portfolio-level analysis result.",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MarginalImpactInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "Operation executed.",
            "headers" : {
              "Location" : {
                "description" : "workflowId",
                "style" : "simple",
                "schema" : {
                  "type" : "string",
                  "format" : "URI"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "lastModified" : {
                      "type" : "string",
                      "format" : "date-time"
                    },
                    "date" : {
                      "type" : "string",
                      "format" : "date-time"
                    },
                    "headers" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "array",
                        "items" : {
                          "type" : "object"
                        }
                      }
                    },
                    "length" : {
                      "type" : "integer",
                      "format" : "int32"
                    },
                    "location" : {
                      "type" : "string",
                      "format" : "uri"
                    },
                    "language" : {
                      "type" : "object",
                      "properties" : {
                        "displayName" : {
                          "type" : "string"
                        },
                        "language" : {
                          "type" : "string"
                        },
                        "script" : {
                          "type" : "string"
                        },
                        "country" : {
                          "type" : "string"
                        },
                        "variant" : {
                          "type" : "string"
                        },
                        "extensionKeys" : {
                          "uniqueItems" : true,
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          }
                        },
                        "unicodeLocaleAttributes" : {
                          "uniqueItems" : true,
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          }
                        },
                        "unicodeLocaleKeys" : {
                          "uniqueItems" : true,
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          }
                        },
                        "iso3Language" : {
                          "type" : "string"
                        },
                        "iso3Country" : {
                          "type" : "string"
                        },
                        "displayLanguage" : {
                          "type" : "string"
                        },
                        "displayScript" : {
                          "type" : "string"
                        },
                        "displayCountry" : {
                          "type" : "string"
                        },
                        "displayVariant" : {
                          "type" : "string"
                        }
                      }
                    },
                    "cookies" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "object",
                        "properties" : {
                          "name" : {
                            "type" : "string"
                          },
                          "value" : {
                            "type" : "string"
                          },
                          "version" : {
                            "type" : "integer",
                            "format" : "int32"
                          },
                          "path" : {
                            "type" : "string"
                          },
                          "domain" : {
                            "type" : "string"
                          },
                          "comment" : {
                            "type" : "string"
                          },
                          "maxAge" : {
                            "type" : "integer",
                            "format" : "int32"
                          },
                          "expiry" : {
                            "type" : "string",
                            "format" : "date-time"
                          },
                          "secure" : {
                            "type" : "boolean"
                          },
                          "httpOnly" : {
                            "type" : "boolean"
                          }
                        }
                      }
                    },
                    "status" : {
                      "type" : "integer",
                      "format" : "int32"
                    },
                    "metadata" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "array",
                        "items" : {
                          "type" : "object"
                        }
                      }
                    },
                    "entity" : {
                      "type" : "object"
                    },
                    "stringHeaders" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        }
                      }
                    },
                    "mediaType" : {
                      "type" : "object",
                      "properties" : {
                        "type" : {
                          "type" : "string"
                        },
                        "subtype" : {
                          "type" : "string"
                        },
                        "parameters" : {
                          "type" : "object",
                          "additionalProperties" : {
                            "type" : "string"
                          }
                        },
                        "wildcardType" : {
                          "type" : "boolean"
                        },
                        "wildcardSubtype" : {
                          "type" : "boolean"
                        }
                      }
                    },
                    "allowedMethods" : {
                      "uniqueItems" : true,
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    },
                    "entityTag" : {
                      "type" : "object",
                      "properties" : {
                        "value" : {
                          "type" : "string"
                        },
                        "weak" : {
                          "type" : "boolean"
                        }
                      }
                    },
                    "statusInfo" : {
                      "type" : "object",
                      "properties" : {
                        "family" : {
                          "type" : "string",
                          "enum" : [ "INFORMATIONAL", "SUCCESSFUL", "REDIRECTION", "CLIENT_ERROR", "SERVER_ERROR", "OTHER" ]
                        },
                        "statusCode" : {
                          "type" : "integer",
                          "format" : "int32"
                        },
                        "reasonPhrase" : {
                          "type" : "string"
                        }
                      }
                    },
                    "links" : {
                      "uniqueItems" : true,
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "uriBuilder" : {
                            "type" : "object"
                          },
                          "rels" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            }
                          },
                          "rel" : {
                            "type" : "string"
                          },
                          "type" : {
                            "type" : "string"
                          },
                          "uri" : {
                            "type" : "string",
                            "format" : "uri"
                          },
                          "params" : {
                            "type" : "object",
                            "additionalProperties" : {
                              "type" : "string"
                            }
                          },
                          "title" : {
                            "type" : "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request: Please check that you are provided all required values.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: Access to this resource is denied or not authorized to perform the \"Marginal Impact\" action.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        },
        "security" : [ {
          "RMS_Auth" : [ ]
        } ]
      }
    },
		"/v1/analyses/{id}/pate": {
			"post": {
				"tags": [ "MetricsV1" ],
				"summary": "Analyze with PATE",
				"description": "",
				"operationId": "processPate",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "groupInfoOnly",
						"in": "query",
						"description": "Group info only",
						"schema": { "type": "boolean", "default": true }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/PateInput" } } }
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "workflowId",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Post Analysis Treaty Execution\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/analyses/{id}/rerun-ep": {
			"post": {
				"tags": [ "MetricsV1" ],
				"summary": "Rerun EP",
				"description": "",
				"operationId": "reRunEp",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the analysis on which you want to run Rerun Ep workflow. Should be valid analysis id.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "workflowId",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"metadata": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "object" } }
										},
										"status": { "type": "integer", "format": "int32" },
										"length": { "type": "integer", "format": "int32" },
										"location": { "type": "string", "format": "uri" },
										"language": {
											"type": "object",
											"properties": {
												"language": { "type": "string" },
												"script": { "type": "string" },
												"country": { "type": "string" },
												"variant": { "type": "string" },
												"extensionKeys": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"unicodeLocaleAttributes": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"unicodeLocaleKeys": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"iso3Language": { "type": "string" },
												"iso3Country": { "type": "string" },
												"displayLanguage": { "type": "string" },
												"displayScript": { "type": "string" },
												"displayCountry": { "type": "string" },
												"displayVariant": { "type": "string" },
												"displayName": { "type": "string" }
											}
										},
										"statusInfo": {
											"type": "object",
											"properties": {
												"family": {
													"type": "string",
													"enum": [
														"INFORMATIONAL",
														"SUCCESSFUL",
														"REDIRECTION",
														"CLIENT_ERROR",
														"SERVER_ERROR",
														"OTHER"
													]
												},
												"statusCode": { "type": "integer", "format": "int32" },
												"reasonPhrase": { "type": "string" }
											}
										},
										"mediaType": {
											"type": "object",
											"properties": {
												"type": { "type": "string" },
												"subtype": { "type": "string" },
												"parameters": {
													"type": "object",
													"additionalProperties": { "type": "string" }
												},
												"wildcardType": { "type": "boolean" },
												"wildcardSubtype": { "type": "boolean" }
											}
										},
										"allowedMethods": {
											"uniqueItems": true,
											"type": "array",
											"items": { "type": "string" }
										},
										"cookies": {
											"type": "object",
											"additionalProperties": {
												"type": "object",
												"properties": {
													"name": { "type": "string" },
													"value": { "type": "string" },
													"version": { "type": "integer", "format": "int32" },
													"path": { "type": "string" },
													"domain": { "type": "string" },
													"comment": { "type": "string" },
													"maxAge": { "type": "integer", "format": "int32" },
													"expiry": { "type": "string", "format": "date-time" },
													"secure": { "type": "boolean" },
													"httpOnly": { "type": "boolean" }
												}
											}
										},
										"entityTag": {
											"type": "object",
											"properties": {
												"value": { "type": "string" },
												"weak": { "type": "boolean" }
											}
										},
										"stringHeaders": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "string" } }
										},
										"lastModified": { "type": "string", "format": "date-time" },
										"date": { "type": "string", "format": "date-time" },
										"headers": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "object" } }
										},
										"entity": { "type": "object" },
										"links": {
											"uniqueItems": true,
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"type": { "type": "string" },
													"params": {
														"type": "object",
														"additionalProperties": { "type": "string" }
													},
													"uri": { "type": "string", "format": "uri" },
													"title": { "type": "string" },
													"uriBuilder": { "type": "object" },
													"rel": { "type": "string" },
													"rels": { "type": "array", "items": { "type": "string" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Rerun Ep\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/analyses/{id}/climate-change": {
			"post": {
				"tags": [ "MetricsV1" ],
				"summary": "Analyze climate change",
				"description": "",
				"operationId": "runClimateChange",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of analysis on which you want to run climate change analysis. Should be valid analysis ID.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/ClimateChangeInput" } }
					},
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "workflowId",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"metadata": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "object" } }
										},
										"status": { "type": "integer", "format": "int32" },
										"length": { "type": "integer", "format": "int32" },
										"location": { "type": "string", "format": "uri" },
										"language": {
											"type": "object",
											"properties": {
												"language": { "type": "string" },
												"script": { "type": "string" },
												"country": { "type": "string" },
												"variant": { "type": "string" },
												"extensionKeys": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"unicodeLocaleAttributes": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"unicodeLocaleKeys": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"iso3Language": { "type": "string" },
												"iso3Country": { "type": "string" },
												"displayLanguage": { "type": "string" },
												"displayScript": { "type": "string" },
												"displayCountry": { "type": "string" },
												"displayVariant": { "type": "string" },
												"displayName": { "type": "string" }
											}
										},
										"statusInfo": {
											"type": "object",
											"properties": {
												"family": {
													"type": "string",
													"enum": [
														"INFORMATIONAL",
														"SUCCESSFUL",
														"REDIRECTION",
														"CLIENT_ERROR",
														"SERVER_ERROR",
														"OTHER"
													]
												},
												"statusCode": { "type": "integer", "format": "int32" },
												"reasonPhrase": { "type": "string" }
											}
										},
										"mediaType": {
											"type": "object",
											"properties": {
												"type": { "type": "string" },
												"subtype": { "type": "string" },
												"parameters": {
													"type": "object",
													"additionalProperties": { "type": "string" }
												},
												"wildcardType": { "type": "boolean" },
												"wildcardSubtype": { "type": "boolean" }
											}
										},
										"allowedMethods": {
											"uniqueItems": true,
											"type": "array",
											"items": { "type": "string" }
										},
										"cookies": {
											"type": "object",
											"additionalProperties": {
												"type": "object",
												"properties": {
													"name": { "type": "string" },
													"value": { "type": "string" },
													"version": { "type": "integer", "format": "int32" },
													"path": { "type": "string" },
													"domain": { "type": "string" },
													"comment": { "type": "string" },
													"maxAge": { "type": "integer", "format": "int32" },
													"expiry": { "type": "string", "format": "date-time" },
													"secure": { "type": "boolean" },
													"httpOnly": { "type": "boolean" }
												}
											}
										},
										"entityTag": {
											"type": "object",
											"properties": {
												"value": { "type": "string" },
												"weak": { "type": "boolean" }
											}
										},
										"stringHeaders": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "string" } }
										},
										"lastModified": { "type": "string", "format": "date-time" },
										"date": { "type": "string", "format": "date-time" },
										"headers": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "object" } }
										},
										"entity": { "type": "object" },
										"links": {
											"uniqueItems": true,
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"type": { "type": "string" },
													"params": {
														"type": "object",
														"additionalProperties": { "type": "string" }
													},
													"uri": { "type": "string", "format": "uri" },
													"title": { "type": "string" },
													"uriBuilder": { "type": "object" },
													"rel": { "type": "string" },
													"rels": { "type": "array", "items": { "type": "string" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Add to Analysis Builder\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/analyses/{id}/simulate-losses": {
			"post": {
				"tags": [ "MetricsV1" ],
				"summary": "Simulate PLT analysis",
				"description": "",
				"operationId": "runELTToPLTConversion",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/SimulateELTToPLTInput" } }
					},
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "workflowId",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"metadata": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "object" } }
										},
										"status": { "type": "integer", "format": "int32" },
										"length": { "type": "integer", "format": "int32" },
										"location": { "type": "string", "format": "uri" },
										"language": {
											"type": "object",
											"properties": {
												"language": { "type": "string" },
												"script": { "type": "string" },
												"country": { "type": "string" },
												"variant": { "type": "string" },
												"extensionKeys": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"unicodeLocaleAttributes": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"unicodeLocaleKeys": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"iso3Language": { "type": "string" },
												"iso3Country": { "type": "string" },
												"displayLanguage": { "type": "string" },
												"displayScript": { "type": "string" },
												"displayCountry": { "type": "string" },
												"displayVariant": { "type": "string" },
												"displayName": { "type": "string" }
											}
										},
										"statusInfo": {
											"type": "object",
											"properties": {
												"family": {
													"type": "string",
													"enum": [
														"INFORMATIONAL",
														"SUCCESSFUL",
														"REDIRECTION",
														"CLIENT_ERROR",
														"SERVER_ERROR",
														"OTHER"
													]
												},
												"statusCode": { "type": "integer", "format": "int32" },
												"reasonPhrase": { "type": "string" }
											}
										},
										"mediaType": {
											"type": "object",
											"properties": {
												"type": { "type": "string" },
												"subtype": { "type": "string" },
												"parameters": {
													"type": "object",
													"additionalProperties": { "type": "string" }
												},
												"wildcardType": { "type": "boolean" },
												"wildcardSubtype": { "type": "boolean" }
											}
										},
										"allowedMethods": {
											"uniqueItems": true,
											"type": "array",
											"items": { "type": "string" }
										},
										"cookies": {
											"type": "object",
											"additionalProperties": {
												"type": "object",
												"properties": {
													"name": { "type": "string" },
													"value": { "type": "string" },
													"version": { "type": "integer", "format": "int32" },
													"path": { "type": "string" },
													"domain": { "type": "string" },
													"comment": { "type": "string" },
													"maxAge": { "type": "integer", "format": "int32" },
													"expiry": { "type": "string", "format": "date-time" },
													"secure": { "type": "boolean" },
													"httpOnly": { "type": "boolean" }
												}
											}
										},
										"entityTag": {
											"type": "object",
											"properties": {
												"value": { "type": "string" },
												"weak": { "type": "boolean" }
											}
										},
										"stringHeaders": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "string" } }
										},
										"lastModified": { "type": "string", "format": "date-time" },
										"date": { "type": "string", "format": "date-time" },
										"headers": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "object" } }
										},
										"entity": { "type": "object" },
										"links": {
											"uniqueItems": true,
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"type": { "type": "string" },
													"params": {
														"type": "object",
														"additionalProperties": { "type": "string" }
													},
													"uri": { "type": "string", "format": "uri" },
													"title": { "type": "string" },
													"uriBuilder": { "type": "object" },
													"rel": { "type": "string" },
													"rels": { "type": "array", "items": { "type": "string" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"ELT to PLT Simulation\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/analyses/{id}/": {
			"put": {
				"tags": [ "MetricsV1" ],
				"summary": "Rename analysis",
				"description": "",
				"operationId": "runRenameAnalysis",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of analysis on which you want to run . Should be valid analysis ID.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/RenameAnalysisInput" } }
					},
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "workflowId",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"metadata": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "object" } }
										},
										"status": { "type": "integer", "format": "int32" },
										"length": { "type": "integer", "format": "int32" },
										"location": { "type": "string", "format": "uri" },
										"language": {
											"type": "object",
											"properties": {
												"language": { "type": "string" },
												"script": { "type": "string" },
												"country": { "type": "string" },
												"variant": { "type": "string" },
												"extensionKeys": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"unicodeLocaleAttributes": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"unicodeLocaleKeys": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"iso3Language": { "type": "string" },
												"iso3Country": { "type": "string" },
												"displayLanguage": { "type": "string" },
												"displayScript": { "type": "string" },
												"displayCountry": { "type": "string" },
												"displayVariant": { "type": "string" },
												"displayName": { "type": "string" }
											}
										},
										"statusInfo": {
											"type": "object",
											"properties": {
												"family": {
													"type": "string",
													"enum": [
														"INFORMATIONAL",
														"SUCCESSFUL",
														"REDIRECTION",
														"CLIENT_ERROR",
														"SERVER_ERROR",
														"OTHER"
													]
												},
												"statusCode": { "type": "integer", "format": "int32" },
												"reasonPhrase": { "type": "string" }
											}
										},
										"mediaType": {
											"type": "object",
											"properties": {
												"type": { "type": "string" },
												"subtype": { "type": "string" },
												"parameters": {
													"type": "object",
													"additionalProperties": { "type": "string" }
												},
												"wildcardType": { "type": "boolean" },
												"wildcardSubtype": { "type": "boolean" }
											}
										},
										"allowedMethods": {
											"uniqueItems": true,
											"type": "array",
											"items": { "type": "string" }
										},
										"cookies": {
											"type": "object",
											"additionalProperties": {
												"type": "object",
												"properties": {
													"name": { "type": "string" },
													"value": { "type": "string" },
													"version": { "type": "integer", "format": "int32" },
													"path": { "type": "string" },
													"domain": { "type": "string" },
													"comment": { "type": "string" },
													"maxAge": { "type": "integer", "format": "int32" },
													"expiry": { "type": "string", "format": "date-time" },
													"secure": { "type": "boolean" },
													"httpOnly": { "type": "boolean" }
												}
											}
										},
										"entityTag": {
											"type": "object",
											"properties": {
												"value": { "type": "string" },
												"weak": { "type": "boolean" }
											}
										},
										"stringHeaders": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "string" } }
										},
										"lastModified": { "type": "string", "format": "date-time" },
										"date": { "type": "string", "format": "date-time" },
										"headers": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "object" } }
										},
										"entity": { "type": "object" },
										"links": {
											"uniqueItems": true,
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"type": { "type": "string" },
													"params": {
														"type": "object",
														"additionalProperties": { "type": "string" }
													},
													"uri": { "type": "string", "format": "uri" },
													"title": { "type": "string" },
													"uriBuilder": { "type": "object" },
													"rel": { "type": "string" },
													"rels": { "type": "array", "items": { "type": "string" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Rename Analysis\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/pate-treaties": {
			"post": {
				"tags": [ "PateV1" ],
				"summary": "Create PATE treaty",
				"description": "",
				"operationId": "createPateTreaty",
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Pate" } } },
					"required": true
				},
				"responses": {
					"201": {
						"description": "The PATE Treaty resource was successfully created.",
						"headers": {
							"Location": {
								"description": "Location of the PATE Treaty resource.",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Post Analysis Treaty Execution\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/pate-treaties/{pateId}": {
			"get": {
				"tags": [ "PateV1" ],
				"summary": "Get PATE treaty",
				"description": "",
				"operationId": "getPateById",
				"parameters": [
					{
						"name": "pateId",
						"in": "path",
						"description": "Pate ID of pate.",
						"required": true,
						"schema": { "type": "integer", "format": "int64" }
					}
				],
				"responses": {
					"200": {
						"description": "Treaty for a specified account are successfully retrieved.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Pate" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "PateV1" ],
				"summary": "Update PATE treaty",
				"description": "",
				"operationId": "updatePateTreaty",
				"parameters": [
					{
						"name": "pateId",
						"in": "path",
						"description": "ID of the PATE treaty to be updated.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int64" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Pate" } } },
					"required": true
				},
				"responses": {
					"204": { "description": "The PATE Treaty resource was successfully updated." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Post Analysis Treaty Execution\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "PateV1" ],
				"summary": "Delete PATE treaty",
				"description": "",
				"operationId": "deletePateTreaty",
				"parameters": [
					{
						"name": "pateId",
						"in": "path",
						"description": "ID number of the pate treaty.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int64" }
					}
				],
				"responses": {
					"204": { "description": "The PATE Treaty resource is successfully deleted" },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Post Analysis Treaty Execution\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/analysis-groups": {
			"get": {
				"tags": [ "Analysis GroupsV2" ],
				"summary": "Get analysis groups",
				"description": "",
				"operationId": "getAnalysisGroupsv2",
				"parameters": [
					{
						"name": "q",
						"in": "query",
						"description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
						"schema": { "type": "string" }
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Specify `ASC` to display the results in alphabetical or numerical ascending order or `DESC` to display the results in descending order.",
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "List of all Analysis Groups have been successfully retrieved.",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/AnalysisGroupSearchResult" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"post": {
				"tags": [ "Analysis GroupsV2" ],
				"summary": "Create analysis group",
				"description": "",
				"operationId": "createAnalysisGroupv2",
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/AnalysisGroupWithSimulation" } }
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "The Analysis Group resource was successfully created.",
						"headers": {
							"Location": {
								"description": "workflowId",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Grouping\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/analysis-groups/{id}": {
			"get": {
				"tags": [ "Analysis GroupsV2" ],
				"summary": "Get analysis group",
				"description": "",
				"operationId": "getAnalysisGroupByIdv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Analysis Group ID",
						"required": true,
						"schema": { "type": "integer", "format": "int64" }
					}
				],
				"responses": {
					"200": {
						"description": "Analysis Group has been successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/AnalysisGroup" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "Analysis GroupsV2" ],
				"summary": "Update analysis group",
				"description": "",
				"operationId": "updateAnalysisGroupv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the Analysis Group.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/AnalysisGroup" } } },
					"required": true
				},
				"responses": {
					"204": {
						"description": "Analysis Group successfully updated",
						"headers": {
							"Location": {
								"description": "workflowId",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Grouping\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/analysis-groups/{id}/regroup": {
			"post": {
				"tags": [ "Analysis GroupsV2" ],
				"summary": "Regroup analysis group",
				"description": "",
				"operationId": "regroupAnalysisGroupv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the Analysis Group.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"204": {
						"description": "Analysis Group successfully updated",
						"headers": {
							"Location": {
								"description": "workflowId",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Grouping\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/analysis-groups/validate": {
			"post": {
				"tags": [ "Analysis GroupsV2" ],
				"summary": "Validate analysis group",
				"description": "",
				"operationId": "validateAnalysisGroupv2",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"maxItems": 2147483647,
								"minItems": 1,
								"type": "array",
								"items": { "type": "integer", "format": "int32" }
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "List of inconsistent treaties has been retrieved",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/InconsistentTreaties" }
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Grouping\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/analyses/{id}/convert-event-rate-loss": {
			"post": {
				"tags": [ "MetricsV2" ],
				"summary": "Convert event rates and losses",
				"description": "",
				"operationId": "convertAnalysisEventv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the analysis on which you want to run convert event rate and loss workflow. Should be valid analysis ID.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/ConvertEventInput" } }
					},
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "workflowId",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"metadata": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "object" } }
										},
										"status": { "type": "integer", "format": "int32" },
										"length": { "type": "integer", "format": "int32" },
										"location": { "type": "string", "format": "uri" },
										"language": {
											"type": "object",
											"properties": {
												"language": { "type": "string" },
												"script": { "type": "string" },
												"country": { "type": "string" },
												"variant": { "type": "string" },
												"extensionKeys": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"unicodeLocaleAttributes": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"unicodeLocaleKeys": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"iso3Language": { "type": "string" },
												"iso3Country": { "type": "string" },
												"displayLanguage": { "type": "string" },
												"displayScript": { "type": "string" },
												"displayCountry": { "type": "string" },
												"displayVariant": { "type": "string" },
												"displayName": { "type": "string" }
											}
										},
										"statusInfo": {
											"type": "object",
											"properties": {
												"family": {
													"type": "string",
													"enum": [
														"INFORMATIONAL",
														"SUCCESSFUL",
														"REDIRECTION",
														"CLIENT_ERROR",
														"SERVER_ERROR",
														"OTHER"
													]
												},
												"statusCode": { "type": "integer", "format": "int32" },
												"reasonPhrase": { "type": "string" }
											}
										},
										"mediaType": {
											"type": "object",
											"properties": {
												"type": { "type": "string" },
												"subtype": { "type": "string" },
												"parameters": {
													"type": "object",
													"additionalProperties": { "type": "string" }
												},
												"wildcardType": { "type": "boolean" },
												"wildcardSubtype": { "type": "boolean" }
											}
										},
										"allowedMethods": {
											"uniqueItems": true,
											"type": "array",
											"items": { "type": "string" }
										},
										"cookies": {
											"type": "object",
											"additionalProperties": {
												"type": "object",
												"properties": {
													"name": { "type": "string" },
													"value": { "type": "string" },
													"version": { "type": "integer", "format": "int32" },
													"path": { "type": "string" },
													"domain": { "type": "string" },
													"comment": { "type": "string" },
													"maxAge": { "type": "integer", "format": "int32" },
													"expiry": { "type": "string", "format": "date-time" },
													"secure": { "type": "boolean" },
													"httpOnly": { "type": "boolean" }
												}
											}
										},
										"entityTag": {
											"type": "object",
											"properties": {
												"value": { "type": "string" },
												"weak": { "type": "boolean" }
											}
										},
										"stringHeaders": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "string" } }
										},
										"lastModified": { "type": "string", "format": "date-time" },
										"date": { "type": "string", "format": "date-time" },
										"headers": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "object" } }
										},
										"entity": { "type": "object" },
										"links": {
											"uniqueItems": true,
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"type": { "type": "string" },
													"params": {
														"type": "object",
														"additionalProperties": { "type": "string" }
													},
													"uri": { "type": "string", "format": "uri" },
													"title": { "type": "string" },
													"uriBuilder": { "type": "object" },
													"rel": { "type": "string" },
													"rels": { "type": "array", "items": { "type": "string" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Convert Event Rates\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/analyses/{id}/convertcurrency": {
			"post": {
				"tags": [ "MetricsV2" ],
				"summary": "Convert currency by analysis",
				"description": "",
				"operationId": "convertResultCurrencyv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"requestBody": {
					"content": { "*/*": { "schema": { "$ref": "#/components/schemas/ConvertResultCurrencyInput" } } },
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "workflowId",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request. The input data is invalid.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Convert Result Currency\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/analyses": {
			"get": {
				"tags": [ "MetricsV2" ],
				"summary": "Get analyses",
				"description": "",
				"operationId": "getAnalysesResultsv2",
				"parameters": [
					{
						"name": "q",
						"in": "query",
						"description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
						"schema": { "type": "string" }
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Specify `ASC` to display the results in alphabetical or numerical ascending order or `DESC` to display the results in descending order.",
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "userName",
						"in": "query",
						"description": "Name of user that ran the analysis.",
						"schema": { "type": "string" }
					},
					{
						"name": "runDate",
						"in": "query",
						"description": "Date that the analysis was run.",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "All Analyses successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/AnalysisSearchResultV2" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "MetricsV2" ],
				"summary": "Delete analysis results",
				"description": "",
				"operationId": "deleteAnalysesv2",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": { "type": "array", "items": { "type": "integer", "format": "int64" } }
						}
					},
					"required": true
				},
				"responses": {
					"204": {
						"description": "A list of Analyses deleted.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"metadata": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "object" } }
										},
										"status": { "type": "integer", "format": "int32" },
										"length": { "type": "integer", "format": "int32" },
										"location": { "type": "string", "format": "uri" },
										"language": {
											"type": "object",
											"properties": {
												"language": { "type": "string" },
												"script": { "type": "string" },
												"country": { "type": "string" },
												"variant": { "type": "string" },
												"extensionKeys": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"unicodeLocaleAttributes": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"unicodeLocaleKeys": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"iso3Language": { "type": "string" },
												"iso3Country": { "type": "string" },
												"displayLanguage": { "type": "string" },
												"displayScript": { "type": "string" },
												"displayCountry": { "type": "string" },
												"displayVariant": { "type": "string" },
												"displayName": { "type": "string" }
											}
										},
										"statusInfo": {
											"type": "object",
											"properties": {
												"family": {
													"type": "string",
													"enum": [
														"INFORMATIONAL",
														"SUCCESSFUL",
														"REDIRECTION",
														"CLIENT_ERROR",
														"SERVER_ERROR",
														"OTHER"
													]
												},
												"statusCode": { "type": "integer", "format": "int32" },
												"reasonPhrase": { "type": "string" }
											}
										},
										"mediaType": {
											"type": "object",
											"properties": {
												"type": { "type": "string" },
												"subtype": { "type": "string" },
												"parameters": {
													"type": "object",
													"additionalProperties": { "type": "string" }
												},
												"wildcardType": { "type": "boolean" },
												"wildcardSubtype": { "type": "boolean" }
											}
										},
										"allowedMethods": {
											"uniqueItems": true,
											"type": "array",
											"items": { "type": "string" }
										},
										"cookies": {
											"type": "object",
											"additionalProperties": {
												"type": "object",
												"properties": {
													"name": { "type": "string" },
													"value": { "type": "string" },
													"version": { "type": "integer", "format": "int32" },
													"path": { "type": "string" },
													"domain": { "type": "string" },
													"comment": { "type": "string" },
													"maxAge": { "type": "integer", "format": "int32" },
													"expiry": { "type": "string", "format": "date-time" },
													"secure": { "type": "boolean" },
													"httpOnly": { "type": "boolean" }
												}
											}
										},
										"entityTag": {
											"type": "object",
											"properties": {
												"value": { "type": "string" },
												"weak": { "type": "boolean" }
											}
										},
										"stringHeaders": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "string" } }
										},
										"lastModified": { "type": "string", "format": "date-time" },
										"date": { "type": "string", "format": "date-time" },
										"headers": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "object" } }
										},
										"entity": { "type": "object" },
										"links": {
											"uniqueItems": true,
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"type": { "type": "string" },
													"params": {
														"type": "object",
														"additionalProperties": { "type": "string" }
													},
													"uri": { "type": "string", "format": "uri" },
													"title": { "type": "string" },
													"uriBuilder": { "type": "object" },
													"rel": { "type": "string" },
													"rels": { "type": "array", "items": { "type": "string" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Results\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/analyses/{id}": {
			"delete": {
				"tags": [ "MetricsV2" ],
				"summary": "Delete analysis result",
				"description": "",
				"operationId": "deleteAnalysisv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"204": {
						"description": "Analysis deleted successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"metadata": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "object" } }
										},
										"status": { "type": "integer", "format": "int32" },
										"length": { "type": "integer", "format": "int32" },
										"location": { "type": "string", "format": "uri" },
										"language": {
											"type": "object",
											"properties": {
												"language": { "type": "string" },
												"script": { "type": "string" },
												"country": { "type": "string" },
												"variant": { "type": "string" },
												"extensionKeys": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"unicodeLocaleAttributes": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"unicodeLocaleKeys": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"iso3Language": { "type": "string" },
												"iso3Country": { "type": "string" },
												"displayLanguage": { "type": "string" },
												"displayScript": { "type": "string" },
												"displayCountry": { "type": "string" },
												"displayVariant": { "type": "string" },
												"displayName": { "type": "string" }
											}
										},
										"statusInfo": {
											"type": "object",
											"properties": {
												"family": {
													"type": "string",
													"enum": [
														"INFORMATIONAL",
														"SUCCESSFUL",
														"REDIRECTION",
														"CLIENT_ERROR",
														"SERVER_ERROR",
														"OTHER"
													]
												},
												"statusCode": { "type": "integer", "format": "int32" },
												"reasonPhrase": { "type": "string" }
											}
										},
										"mediaType": {
											"type": "object",
											"properties": {
												"type": { "type": "string" },
												"subtype": { "type": "string" },
												"parameters": {
													"type": "object",
													"additionalProperties": { "type": "string" }
												},
												"wildcardType": { "type": "boolean" },
												"wildcardSubtype": { "type": "boolean" }
											}
										},
										"allowedMethods": {
											"uniqueItems": true,
											"type": "array",
											"items": { "type": "string" }
										},
										"cookies": {
											"type": "object",
											"additionalProperties": {
												"type": "object",
												"properties": {
													"name": { "type": "string" },
													"value": { "type": "string" },
													"version": { "type": "integer", "format": "int32" },
													"path": { "type": "string" },
													"domain": { "type": "string" },
													"comment": { "type": "string" },
													"maxAge": { "type": "integer", "format": "int32" },
													"expiry": { "type": "string", "format": "date-time" },
													"secure": { "type": "boolean" },
													"httpOnly": { "type": "boolean" }
												}
											}
										},
										"entityTag": {
											"type": "object",
											"properties": {
												"value": { "type": "string" },
												"weak": { "type": "boolean" }
											}
										},
										"stringHeaders": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "string" } }
										},
										"lastModified": { "type": "string", "format": "date-time" },
										"date": { "type": "string", "format": "date-time" },
										"headers": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "object" } }
										},
										"entity": { "type": "object" },
										"links": {
											"uniqueItems": true,
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"type": { "type": "string" },
													"params": {
														"type": "object",
														"additionalProperties": { "type": "string" }
													},
													"uri": { "type": "string", "format": "uri" },
													"title": { "type": "string" },
													"uriBuilder": { "type": "object" },
													"rel": { "type": "string" },
													"rels": { "type": "array", "items": { "type": "string" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Results\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/analyses/{id}/pate-batch": {
			"delete": {
				"tags": [ "MetricsV2" ],
				"summary": "Delete PATE treaties",
				"description": "",
				"operationId": "deletePateBatchv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": { "type": "array", "items": { "$ref": "#/components/schemas/PateBatchInput" } }
						}
					},
					"required": true
				},
				"responses": {
					"204": {
						"description": "Deleted. PATE treaties for given analysis deleted.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"metadata": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "object" } }
										},
										"status": { "type": "integer", "format": "int32" },
										"length": { "type": "integer", "format": "int32" },
										"location": { "type": "string", "format": "uri" },
										"language": {
											"type": "object",
											"properties": {
												"language": { "type": "string" },
												"script": { "type": "string" },
												"country": { "type": "string" },
												"variant": { "type": "string" },
												"extensionKeys": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"unicodeLocaleAttributes": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"unicodeLocaleKeys": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"iso3Language": { "type": "string" },
												"iso3Country": { "type": "string" },
												"displayLanguage": { "type": "string" },
												"displayScript": { "type": "string" },
												"displayCountry": { "type": "string" },
												"displayVariant": { "type": "string" },
												"displayName": { "type": "string" }
											}
										},
										"statusInfo": {
											"type": "object",
											"properties": {
												"family": {
													"type": "string",
													"enum": [
														"INFORMATIONAL",
														"SUCCESSFUL",
														"REDIRECTION",
														"CLIENT_ERROR",
														"SERVER_ERROR",
														"OTHER"
													]
												},
												"statusCode": { "type": "integer", "format": "int32" },
												"reasonPhrase": { "type": "string" }
											}
										},
										"mediaType": {
											"type": "object",
											"properties": {
												"type": { "type": "string" },
												"subtype": { "type": "string" },
												"parameters": {
													"type": "object",
													"additionalProperties": { "type": "string" }
												},
												"wildcardType": { "type": "boolean" },
												"wildcardSubtype": { "type": "boolean" }
											}
										},
										"allowedMethods": {
											"uniqueItems": true,
											"type": "array",
											"items": { "type": "string" }
										},
										"cookies": {
											"type": "object",
											"additionalProperties": {
												"type": "object",
												"properties": {
													"name": { "type": "string" },
													"value": { "type": "string" },
													"version": { "type": "integer", "format": "int32" },
													"path": { "type": "string" },
													"domain": { "type": "string" },
													"comment": { "type": "string" },
													"maxAge": { "type": "integer", "format": "int32" },
													"expiry": { "type": "string", "format": "date-time" },
													"secure": { "type": "boolean" },
													"httpOnly": { "type": "boolean" }
												}
											}
										},
										"entityTag": {
											"type": "object",
											"properties": {
												"value": { "type": "string" },
												"weak": { "type": "boolean" }
											}
										},
										"stringHeaders": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "string" } }
										},
										"lastModified": { "type": "string", "format": "date-time" },
										"date": { "type": "string", "format": "date-time" },
										"headers": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "object" } }
										},
										"entity": { "type": "object" },
										"links": {
											"uniqueItems": true,
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"type": { "type": "string" },
													"params": {
														"type": "object",
														"additionalProperties": { "type": "string" }
													},
													"uri": { "type": "string", "format": "uri" },
													"title": { "type": "string" },
													"uriBuilder": { "type": "object" },
													"rel": { "type": "string" },
													"rels": { "type": "array", "items": { "type": "string" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Post Analysis Treaty Execution\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/analyses/{analysisID}/pate-treaties": {
			"get": {
				"tags": [ "MetricsV2" ],
				"summary": "Get PATE treaties",
				"description": "",
				"operationId": "getPateListv2",
				"parameters": [
					{
						"name": "analysisID",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "List of treaties in the data source is successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/PateSearchResult" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "MetricsV2" ],
				"summary": "Delete PATE treaties by analysis",
				"description": "",
				"operationId": "deletePateListv2",
				"parameters": [
					{
						"name": "analysisID",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"204": { "description": "Deleted. PATE treaties for analysis deleted." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Post Analysis Treaty Execution\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/analyses/{id}/summary_report": {
			"post": {
				"tags": [ "MetricsV2" ],
				"summary": "Generate summary report",
				"description": "",
				"operationId": "summaryReportMetricsv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/AnalysisSummaryReportInput" } }
					},
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "url containing identifier of the submitted workflow.",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Download Report\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/analyses/{analysisID}/location-aal": {
			"get": {
				"tags": [ "MetricsV2" ],
				"summary": "Get location AAL",
				"description": "",
				"operationId": "getAALMetricsv2",
				"parameters": [
					{
						"name": "analysisID",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "perspective",
						"in": "query",
						"description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
						"schema": { "type": "string", "default": "AAL DESC" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "maximum": 1000, "type": "integer", "format": "int32", "default": 100 }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32", "default": 0 }
					}
				],
				"responses": {
					"200": {
						"description": "Location AAL for specified analysis successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/LocationAALResult" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/analyses/{id}/analysis-region": {
			"get": {
				"tags": [ "MetricsV2" ],
				"summary": "Get region details",
				"description": "",
				"operationId": "getAnalysisRegionsv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "List of region details for specified analysis successfully retrieved.",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/AnalysisRegionSearchResultV2" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/analyses/{analysisID}/cedants": {
			"get": {
				"tags": [ "MetricsV2" ],
				"summary": "Get cedants by analysis",
				"description": "",
				"operationId": "getCedantsByAnalysisv2",
				"parameters": [
					{
						"name": "analysisID",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "perspective",
						"in": "query",
						"description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "List of Cedants in the analysis is successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/CedantSearchResult" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/analyses/{id}/ep/interpolate": {
			"get": {
				"tags": [ "MetricsV2" ],
				"summary": "Get EP interpolation results",
				"description": "",
				"operationId": "getEPInterpolateMetricResultsv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "perspective",
						"in": "query",
						"description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "treatyId",
						"in": "query",
						"description": "Treaty ID",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "exposureId",
						"in": "query",
						"description": "Exposure ID",
						"schema": { "minimum": 0, "type": "integer", "format": "int32" }
					},
					{
						"name": "exposureType",
						"in": "query",
						"description": "Exposure type",
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "key",
						"in": "query",
						"description": "Metric Key name",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "value",
						"in": "query",
						"description": "Metric Key value",
						"schema": { "type": "number", "format": "double" }
					},
					{
						"name": "metricType",
						"in": "query",
						"description": "Metric Type",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "List of Interpolation EP results successfully retrieved.",
						"content": {
							"application/json": {
								"schema": { "type": "array", "items": { "$ref": "#/components/schemas/MetricsOutput" } }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/analyses/{id}/ep": {
			"get": {
				"tags": [ "MetricsV2" ],
				"summary": "Get EP metrics",
				"description": "",
				"operationId": "getEPMetricsByAnalysisv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "perspective",
						"in": "query",
						"description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "treatyId",
						"in": "query",
						"description": "Treaty ID",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "exposureId",
						"in": "query",
						"description": "Exposure ID",
						"schema": { "minimum": 0, "type": "integer", "format": "int32" }
					},
					{
						"name": "exposureType",
						"in": "query",
						"description": "Exposure type",
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "metricType",
						"in": "query",
						"description": "Metric Type",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "List of EP metrics for a specified analysis successfully retrieved.",
						"content": {
							"application/json": {
								"schema": { "type": "array", "items": { "$ref": "#/components/schemas/MetricsOutput" } }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/analyses/{id}/elt": {
			"get": {
				"tags": [ "MetricsV2" ],
				"summary": "Get ELT",
				"description": "",
				"operationId": "getEventLossTableResultsv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "perspective",
						"in": "query",
						"description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page, maximum is 1000",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "treatyId",
						"in": "query",
						"description": "Treaty ID",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "exposureId",
						"in": "query",
						"description": "Exposure ID",
						"schema": { "minimum": 0, "type": "integer", "format": "int32" }
					},
					{
						"name": "exposureType",
						"in": "query",
						"description": "Exposure type",
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "eventIds",
						"in": "query",
						"description": "Event IDs",
						"schema": {
							"maxItems": 25,
							"minItems": 0,
							"uniqueItems": true,
							"type": "array",
							"items": { "type": "integer", "format": "int32" }
						}
					}
				],
				"responses": {
					"200": {
						"description": "Report for specified analysis successfully retrieved.",
						"content": {
							"application/json": {
								"schema": { "type": "array", "items": { "$ref": "#/components/schemas/EventLossItem" } }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/analyses/{analysisID}/metrics": {
			"get": {
				"tags": [ "MetricsV2" ],
				"summary": "Get metrics",
				"description": "",
				"operationId": "getMetricsv2",
				"parameters": [
					{
						"name": "analysisID",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "metricType",
						"in": "query",
						"description": "metricType.",
						"required": true,
						"schema": { "type": "string", "enum": [ "STATS", "ELT", "EP" ] }
					},
					{
						"name": "position",
						"in": "query",
						"description": "position.",
						"required": true,
						"schema": { "type": "array", "items": { "type": "string" } }
					},
					{
						"name": "granularity",
						"in": "query",
						"description": "granularity.",
						"schema": {
							"type": "array",
							"items": { "type": "string", "default": "policy", "enum": [ "POLICY" ] }
						}
					},
					{
						"name": "epType",
						"in": "query",
						"description": "ep Type.",
						"schema": {
							"type": "array",
							"items": { "type": "string", "enum": [ "OEP", "AEP", "TCE_AEP", "TCE_OEP" ] }
						}
					},
					{
						"name": "returnPeriod",
						"in": "query",
						"description": "returnPeriod.",
						"schema": {
							"maxItems": 12,
							"minItems": 0,
							"type": "array",
							"items": { "type": "integer", "format": "int32" }
						}
					},
					{
						"name": "filterCondition",
						"in": "query",
						"description": "Filter condition.",
						"schema": { "type": "string" }
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "maximum": 1000, "type": "integer", "format": "int32", "default": 100 }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32", "default": 0 }
					}
				],
				"responses": {
					"200": {
						"description": "metrics for specified analysis successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/MetricsResult" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/analyses/{id}/keylosses": {
			"get": {
				"tags": [ "MetricsV2" ],
				"summary": "Get key losses",
				"description": "",
				"operationId": "getNonEpKeyLossv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "perspective",
						"in": "query",
						"description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "treatyId",
						"in": "query",
						"description": "Treaty ID",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "exposureId",
						"in": "query",
						"description": "Exposure ID",
						"schema": { "minimum": 0, "type": "integer", "format": "int32" }
					},
					{
						"name": "exposureType",
						"in": "query",
						"description": "Exposure type",
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "Key Losses for specified analysis successfully retrieved.",
						"content": {
							"application/json": {
								"schema": { "type": "array", "items": { "$ref": "#/components/schemas/KeyLossItem" } }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/analyses/{id}/plt": {
			"get": {
				"tags": [ "MetricsV2" ],
				"summary": "Get PLT",
				"description": "",
				"operationId": "getPeriodLossTableResultsv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "perspective",
						"in": "query",
						"description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page, maximum is 1000",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "treatyId",
						"in": "query",
						"description": "Treaty ID",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "exposureId",
						"in": "query",
						"description": "Exposure ID",
						"schema": { "minimum": 0, "type": "integer", "format": "int32" }
					},
					{
						"name": "exposureType",
						"in": "query",
						"description": "Exposure type",
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "PLT report for specified analysis successfully retrieved.",
						"content": {
							"application/json": {
								"schema": { "type": "array", "items": { "$ref": "#/components/schemas/EventLossItem" } }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/analyses/{analysisID}/perspectives": {
			"get": {
				"tags": [ "MetricsV2" ],
				"summary": "Get perspectives",
				"description": "",
				"operationId": "getPerspectivesForAnalysisv2",
				"parameters": [
					{
						"name": "analysisID",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "exposureType",
						"in": "query",
						"description": "Exposure type",
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "Values of all available perspectives for a given analysis",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityResult" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/analyses/{id}/sampledlosses": {
			"get": {
				"tags": [ "MetricsV2" ],
				"summary": "Get sampled losses",
				"description": "",
				"operationId": "getSampledLossv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "perspective",
						"in": "query",
						"description": "Financial perspective that provides a view of risk. One of `FA` (facultative reinsurance loss), `GR` (gross loss), `GU` (ground up loss), `QS` (quota share loss), `RG` (reinsurance gross loss), `RL` (net loss cat), `RN` (reinsurance net loss), `SS` (surplus share loss), or `WX` (working excess loss).",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "treatyId",
						"in": "query",
						"description": "Treaty ID",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "exposureId",
						"in": "query",
						"description": "Exposure ID",
						"schema": { "minimum": 0, "type": "integer", "format": "int32" }
					},
					{
						"name": "exposureType",
						"in": "query",
						"description": "Exposure type",
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "events",
						"in": "query",
						"description": "EventIds list",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Sampled Losses for specified analysis successfully retrieved.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/SampledLossItem" }
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/analyses/{id}/stats": {
			"get": {
				"tags": [ "MetricsV2" ],
				"summary": "Get statistics",
				"description": "",
				"operationId": "getStatisticsResultsv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "perspective",
						"in": "query",
						"description": "Financial perspective.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "treatyId",
						"in": "query",
						"description": "Treaty ID",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "exposureId",
						"in": "query",
						"description": "Exposure ID",
						"schema": { "minimum": 0, "type": "integer", "format": "int32" }
					},
					{
						"name": "exposureType",
						"in": "query",
						"description": "Exposure type",
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "List of Statistics for specified analysis successfully retrieved.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/StatisticsItem" }
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/analyses/{analysisID}/treaties": {
			"get": {
				"tags": [ "MetricsV2" ],
				"summary": "Get treaties by analysis",
				"description": "",
				"operationId": "getTreatiesListv2",
				"parameters": [
					{
						"name": "analysisID",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "List of treaties in the Analysis is successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/TreatySearchResult" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/analyses/{analysisID}/treaty/{treatyID}": {
			"get": {
				"tags": [ "MetricsV2" ],
				"summary": "Get analysis treaty",
				"description": "",
				"operationId": "getTreatyByIdv2",
				"parameters": [
					{
						"name": "analysisID",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "treatyID",
						"in": "path",
						"description": "Treaty ID",
						"required": true,
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "Treaty for a specified analysis is successfully retrieved.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Treaty" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/analyses/{id}/map-perspective": {
			"post": {
				"tags": [ "MetricsV2" ],
				"summary": "Convert perspectives",
				"description": "",
				"operationId": "mapPerspectivev2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the analysis on which you want to run Map Perspective workflow. Should be valid analysis id.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/MapPerspectiveInput" } }
					},
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "workflowId",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"metadata": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "object" } }
										},
										"status": { "type": "integer", "format": "int32" },
										"length": { "type": "integer", "format": "int32" },
										"location": { "type": "string", "format": "uri" },
										"language": {
											"type": "object",
											"properties": {
												"language": { "type": "string" },
												"script": { "type": "string" },
												"country": { "type": "string" },
												"variant": { "type": "string" },
												"extensionKeys": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"unicodeLocaleAttributes": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"unicodeLocaleKeys": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"iso3Language": { "type": "string" },
												"iso3Country": { "type": "string" },
												"displayLanguage": { "type": "string" },
												"displayScript": { "type": "string" },
												"displayCountry": { "type": "string" },
												"displayVariant": { "type": "string" },
												"displayName": { "type": "string" }
											}
										},
										"statusInfo": {
											"type": "object",
											"properties": {
												"family": {
													"type": "string",
													"enum": [
														"INFORMATIONAL",
														"SUCCESSFUL",
														"REDIRECTION",
														"CLIENT_ERROR",
														"SERVER_ERROR",
														"OTHER"
													]
												},
												"statusCode": { "type": "integer", "format": "int32" },
												"reasonPhrase": { "type": "string" }
											}
										},
										"mediaType": {
											"type": "object",
											"properties": {
												"type": { "type": "string" },
												"subtype": { "type": "string" },
												"parameters": {
													"type": "object",
													"additionalProperties": { "type": "string" }
												},
												"wildcardType": { "type": "boolean" },
												"wildcardSubtype": { "type": "boolean" }
											}
										},
										"allowedMethods": {
											"uniqueItems": true,
											"type": "array",
											"items": { "type": "string" }
										},
										"cookies": {
											"type": "object",
											"additionalProperties": {
												"type": "object",
												"properties": {
													"name": { "type": "string" },
													"value": { "type": "string" },
													"version": { "type": "integer", "format": "int32" },
													"path": { "type": "string" },
													"domain": { "type": "string" },
													"comment": { "type": "string" },
													"maxAge": { "type": "integer", "format": "int32" },
													"expiry": { "type": "string", "format": "date-time" },
													"secure": { "type": "boolean" },
													"httpOnly": { "type": "boolean" }
												}
											}
										},
										"entityTag": {
											"type": "object",
											"properties": {
												"value": { "type": "string" },
												"weak": { "type": "boolean" }
											}
										},
										"stringHeaders": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "string" } }
										},
										"lastModified": { "type": "string", "format": "date-time" },
										"date": { "type": "string", "format": "date-time" },
										"headers": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "object" } }
										},
										"entity": { "type": "object" },
										"links": {
											"uniqueItems": true,
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"type": { "type": "string" },
													"params": {
														"type": "object",
														"additionalProperties": { "type": "string" }
													},
													"uri": { "type": "string", "format": "uri" },
													"title": { "type": "string" },
													"uriBuilder": { "type": "object" },
													"rel": { "type": "string" },
													"rels": { "type": "array", "items": { "type": "string" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Financial Re-Mapping\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
    "/v2/analyses/{id}/marginal-impact" : {
      "post" : {
        "tags" : [ "MetricsV2" ],
        "summary" : "Calculate marginal impact report",
        "description" : "",
        "operationId" : "marginalImpactv2",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of a portfolio-level analysis result.",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MarginalImpactInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "Operation executed.",
            "headers" : {
              "Location" : {
                "description" : "workflowId",
                "style" : "simple",
                "schema" : {
                  "type" : "string",
                  "format" : "URI"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "lastModified" : {
                      "type" : "string",
                      "format" : "date-time"
                    },
                    "date" : {
                      "type" : "string",
                      "format" : "date-time"
                    },
                    "headers" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "array",
                        "items" : {
                          "type" : "object"
                        }
                      }
                    },
                    "length" : {
                      "type" : "integer",
                      "format" : "int32"
                    },
                    "location" : {
                      "type" : "string",
                      "format" : "uri"
                    },
                    "language" : {
                      "type" : "object",
                      "properties" : {
                        "displayName" : {
                          "type" : "string"
                        },
                        "language" : {
                          "type" : "string"
                        },
                        "script" : {
                          "type" : "string"
                        },
                        "country" : {
                          "type" : "string"
                        },
                        "variant" : {
                          "type" : "string"
                        },
                        "extensionKeys" : {
                          "uniqueItems" : true,
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          }
                        },
                        "unicodeLocaleAttributes" : {
                          "uniqueItems" : true,
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          }
                        },
                        "unicodeLocaleKeys" : {
                          "uniqueItems" : true,
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          }
                        },
                        "iso3Language" : {
                          "type" : "string"
                        },
                        "iso3Country" : {
                          "type" : "string"
                        },
                        "displayLanguage" : {
                          "type" : "string"
                        },
                        "displayScript" : {
                          "type" : "string"
                        },
                        "displayCountry" : {
                          "type" : "string"
                        },
                        "displayVariant" : {
                          "type" : "string"
                        }
                      }
                    },
                    "cookies" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "object",
                        "properties" : {
                          "name" : {
                            "type" : "string"
                          },
                          "value" : {
                            "type" : "string"
                          },
                          "version" : {
                            "type" : "integer",
                            "format" : "int32"
                          },
                          "path" : {
                            "type" : "string"
                          },
                          "domain" : {
                            "type" : "string"
                          },
                          "comment" : {
                            "type" : "string"
                          },
                          "maxAge" : {
                            "type" : "integer",
                            "format" : "int32"
                          },
                          "expiry" : {
                            "type" : "string",
                            "format" : "date-time"
                          },
                          "secure" : {
                            "type" : "boolean"
                          },
                          "httpOnly" : {
                            "type" : "boolean"
                          }
                        }
                      }
                    },
                    "status" : {
                      "type" : "integer",
                      "format" : "int32"
                    },
                    "metadata" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "array",
                        "items" : {
                          "type" : "object"
                        }
                      }
                    },
                    "entity" : {
                      "type" : "object"
                    },
                    "stringHeaders" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        }
                      }
                    },
                    "mediaType" : {
                      "type" : "object",
                      "properties" : {
                        "type" : {
                          "type" : "string"
                        },
                        "subtype" : {
                          "type" : "string"
                        },
                        "parameters" : {
                          "type" : "object",
                          "additionalProperties" : {
                            "type" : "string"
                          }
                        },
                        "wildcardType" : {
                          "type" : "boolean"
                        },
                        "wildcardSubtype" : {
                          "type" : "boolean"
                        }
                      }
                    },
                    "allowedMethods" : {
                      "uniqueItems" : true,
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    },
                    "entityTag" : {
                      "type" : "object",
                      "properties" : {
                        "value" : {
                          "type" : "string"
                        },
                        "weak" : {
                          "type" : "boolean"
                        }
                      }
                    },
                    "statusInfo" : {
                      "type" : "object",
                      "properties" : {
                        "family" : {
                          "type" : "string",
                          "enum" : [ "INFORMATIONAL", "SUCCESSFUL", "REDIRECTION", "CLIENT_ERROR", "SERVER_ERROR", "OTHER" ]
                        },
                        "statusCode" : {
                          "type" : "integer",
                          "format" : "int32"
                        },
                        "reasonPhrase" : {
                          "type" : "string"
                        }
                      }
                    },
                    "links" : {
                      "uniqueItems" : true,
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "uriBuilder" : {
                            "type" : "object"
                          },
                          "rels" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            }
                          },
                          "rel" : {
                            "type" : "string"
                          },
                          "type" : {
                            "type" : "string"
                          },
                          "uri" : {
                            "type" : "string",
                            "format" : "uri"
                          },
                          "params" : {
                            "type" : "object",
                            "additionalProperties" : {
                              "type" : "string"
                            }
                          },
                          "title" : {
                            "type" : "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request: Please check that you are provided all required values.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden: Access to this resource is denied or not authorized to perform the \"Marginal Impact\" action.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        },
        "security" : [ {
          "RMS_Auth" : [ ]
        } ]
      }
    },
		"/v2/analyses/{id}/pate": {
			"post": {
				"tags": [ "MetricsV2" ],
				"summary": "Analyze with PATE",
				"description": "",
				"operationId": "processPatev2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of analysis.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "groupInfoOnly",
						"in": "query",
						"description": "Group info only",
						"schema": { "type": "boolean", "default": true }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/PateInput" } } }
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "workflowId",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Post Analysis Treaty Execution\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/analyses/{id}/rerun-ep": {
			"post": {
				"tags": [ "MetricsV2" ],
				"summary": "Rerun EP",
				"description": "",
				"operationId": "reRunEpv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the analysis on which you want to run Rerun Ep workflow. Should be valid analysis id.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "workflowId",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"metadata": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "object" } }
										},
										"status": { "type": "integer", "format": "int32" },
										"length": { "type": "integer", "format": "int32" },
										"location": { "type": "string", "format": "uri" },
										"language": {
											"type": "object",
											"properties": {
												"language": { "type": "string" },
												"script": { "type": "string" },
												"country": { "type": "string" },
												"variant": { "type": "string" },
												"extensionKeys": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"unicodeLocaleAttributes": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"unicodeLocaleKeys": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"iso3Language": { "type": "string" },
												"iso3Country": { "type": "string" },
												"displayLanguage": { "type": "string" },
												"displayScript": { "type": "string" },
												"displayCountry": { "type": "string" },
												"displayVariant": { "type": "string" },
												"displayName": { "type": "string" }
											}
										},
										"statusInfo": {
											"type": "object",
											"properties": {
												"family": {
													"type": "string",
													"enum": [
														"INFORMATIONAL",
														"SUCCESSFUL",
														"REDIRECTION",
														"CLIENT_ERROR",
														"SERVER_ERROR",
														"OTHER"
													]
												},
												"statusCode": { "type": "integer", "format": "int32" },
												"reasonPhrase": { "type": "string" }
											}
										},
										"mediaType": {
											"type": "object",
											"properties": {
												"type": { "type": "string" },
												"subtype": { "type": "string" },
												"parameters": {
													"type": "object",
													"additionalProperties": { "type": "string" }
												},
												"wildcardType": { "type": "boolean" },
												"wildcardSubtype": { "type": "boolean" }
											}
										},
										"allowedMethods": {
											"uniqueItems": true,
											"type": "array",
											"items": { "type": "string" }
										},
										"cookies": {
											"type": "object",
											"additionalProperties": {
												"type": "object",
												"properties": {
													"name": { "type": "string" },
													"value": { "type": "string" },
													"version": { "type": "integer", "format": "int32" },
													"path": { "type": "string" },
													"domain": { "type": "string" },
													"comment": { "type": "string" },
													"maxAge": { "type": "integer", "format": "int32" },
													"expiry": { "type": "string", "format": "date-time" },
													"secure": { "type": "boolean" },
													"httpOnly": { "type": "boolean" }
												}
											}
										},
										"entityTag": {
											"type": "object",
											"properties": {
												"value": { "type": "string" },
												"weak": { "type": "boolean" }
											}
										},
										"stringHeaders": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "string" } }
										},
										"lastModified": { "type": "string", "format": "date-time" },
										"date": { "type": "string", "format": "date-time" },
										"headers": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "object" } }
										},
										"entity": { "type": "object" },
										"links": {
											"uniqueItems": true,
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"type": { "type": "string" },
													"params": {
														"type": "object",
														"additionalProperties": { "type": "string" }
													},
													"uri": { "type": "string", "format": "uri" },
													"title": { "type": "string" },
													"uriBuilder": { "type": "object" },
													"rel": { "type": "string" },
													"rels": { "type": "array", "items": { "type": "string" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Rerun Ep\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/analyses/{id}/climate-change": {
			"post": {
				"tags": [ "MetricsV2" ],
				"summary": "Analyze climate change",
				"description": "",
				"operationId": "runClimateChangev2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the analysis on which you want to run climate change analysis. Should be valid analysis ID.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/ClimateChangeInput" } }
					},
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "workflowId",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"metadata": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "object" } }
										},
										"status": { "type": "integer", "format": "int32" },
										"length": { "type": "integer", "format": "int32" },
										"location": { "type": "string", "format": "uri" },
										"language": {
											"type": "object",
											"properties": {
												"language": { "type": "string" },
												"script": { "type": "string" },
												"country": { "type": "string" },
												"variant": { "type": "string" },
												"extensionKeys": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"unicodeLocaleAttributes": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"unicodeLocaleKeys": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"iso3Language": { "type": "string" },
												"iso3Country": { "type": "string" },
												"displayLanguage": { "type": "string" },
												"displayScript": { "type": "string" },
												"displayCountry": { "type": "string" },
												"displayVariant": { "type": "string" },
												"displayName": { "type": "string" }
											}
										},
										"statusInfo": {
											"type": "object",
											"properties": {
												"family": {
													"type": "string",
													"enum": [
														"INFORMATIONAL",
														"SUCCESSFUL",
														"REDIRECTION",
														"CLIENT_ERROR",
														"SERVER_ERROR",
														"OTHER"
													]
												},
												"statusCode": { "type": "integer", "format": "int32" },
												"reasonPhrase": { "type": "string" }
											}
										},
										"mediaType": {
											"type": "object",
											"properties": {
												"type": { "type": "string" },
												"subtype": { "type": "string" },
												"parameters": {
													"type": "object",
													"additionalProperties": { "type": "string" }
												},
												"wildcardType": { "type": "boolean" },
												"wildcardSubtype": { "type": "boolean" }
											}
										},
										"allowedMethods": {
											"uniqueItems": true,
											"type": "array",
											"items": { "type": "string" }
										},
										"cookies": {
											"type": "object",
											"additionalProperties": {
												"type": "object",
												"properties": {
													"name": { "type": "string" },
													"value": { "type": "string" },
													"version": { "type": "integer", "format": "int32" },
													"path": { "type": "string" },
													"domain": { "type": "string" },
													"comment": { "type": "string" },
													"maxAge": { "type": "integer", "format": "int32" },
													"expiry": { "type": "string", "format": "date-time" },
													"secure": { "type": "boolean" },
													"httpOnly": { "type": "boolean" }
												}
											}
										},
										"entityTag": {
											"type": "object",
											"properties": {
												"value": { "type": "string" },
												"weak": { "type": "boolean" }
											}
										},
										"stringHeaders": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "string" } }
										},
										"lastModified": { "type": "string", "format": "date-time" },
										"date": { "type": "string", "format": "date-time" },
										"headers": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "object" } }
										},
										"entity": { "type": "object" },
										"links": {
											"uniqueItems": true,
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"type": { "type": "string" },
													"params": {
														"type": "object",
														"additionalProperties": { "type": "string" }
													},
													"uri": { "type": "string", "format": "uri" },
													"title": { "type": "string" },
													"uriBuilder": { "type": "object" },
													"rel": { "type": "string" },
													"rels": { "type": "array", "items": { "type": "string" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Add to Analysis Builder\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/analyses/{id}/simulate-losses": {
			"post": {
				"tags": [ "MetricsV2" ],
				"summary": "Simulate PLT analysis",
				"description": "",
				"operationId": "runELTToPLTConversionv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the analysis on which you want to run ELT to PLT conversion workflow. Should be valid analysis ID.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/SimulateELTToPLTInput" } }
					},
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "workflowId",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"metadata": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "object" } }
										},
										"status": { "type": "integer", "format": "int32" },
										"length": { "type": "integer", "format": "int32" },
										"location": { "type": "string", "format": "uri" },
										"language": {
											"type": "object",
											"properties": {
												"language": { "type": "string" },
												"script": { "type": "string" },
												"country": { "type": "string" },
												"variant": { "type": "string" },
												"extensionKeys": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"unicodeLocaleAttributes": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"unicodeLocaleKeys": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"iso3Language": { "type": "string" },
												"iso3Country": { "type": "string" },
												"displayLanguage": { "type": "string" },
												"displayScript": { "type": "string" },
												"displayCountry": { "type": "string" },
												"displayVariant": { "type": "string" },
												"displayName": { "type": "string" }
											}
										},
										"statusInfo": {
											"type": "object",
											"properties": {
												"family": {
													"type": "string",
													"enum": [
														"INFORMATIONAL",
														"SUCCESSFUL",
														"REDIRECTION",
														"CLIENT_ERROR",
														"SERVER_ERROR",
														"OTHER"
													]
												},
												"statusCode": { "type": "integer", "format": "int32" },
												"reasonPhrase": { "type": "string" }
											}
										},
										"mediaType": {
											"type": "object",
											"properties": {
												"type": { "type": "string" },
												"subtype": { "type": "string" },
												"parameters": {
													"type": "object",
													"additionalProperties": { "type": "string" }
												},
												"wildcardType": { "type": "boolean" },
												"wildcardSubtype": { "type": "boolean" }
											}
										},
										"allowedMethods": {
											"uniqueItems": true,
											"type": "array",
											"items": { "type": "string" }
										},
										"cookies": {
											"type": "object",
											"additionalProperties": {
												"type": "object",
												"properties": {
													"name": { "type": "string" },
													"value": { "type": "string" },
													"version": { "type": "integer", "format": "int32" },
													"path": { "type": "string" },
													"domain": { "type": "string" },
													"comment": { "type": "string" },
													"maxAge": { "type": "integer", "format": "int32" },
													"expiry": { "type": "string", "format": "date-time" },
													"secure": { "type": "boolean" },
													"httpOnly": { "type": "boolean" }
												}
											}
										},
										"entityTag": {
											"type": "object",
											"properties": {
												"value": { "type": "string" },
												"weak": { "type": "boolean" }
											}
										},
										"stringHeaders": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "string" } }
										},
										"lastModified": { "type": "string", "format": "date-time" },
										"date": { "type": "string", "format": "date-time" },
										"headers": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "object" } }
										},
										"entity": { "type": "object" },
										"links": {
											"uniqueItems": true,
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"type": { "type": "string" },
													"params": {
														"type": "object",
														"additionalProperties": { "type": "string" }
													},
													"uri": { "type": "string", "format": "uri" },
													"title": { "type": "string" },
													"uriBuilder": { "type": "object" },
													"rel": { "type": "string" },
													"rels": { "type": "array", "items": { "type": "string" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"ELT to PLT Simulation\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/analyses/{id}/": {
			"put": {
				"tags": [ "MetricsV2" ],
				"summary": "Rename analysis",
				"description": "",
				"operationId": "runRenameAnalysisv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of analysis to be renamed. \\ Should be valid analysis ID.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/RenameAnalysisInput" } }
					},
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "workflowId",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"metadata": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "object" } }
										},
										"status": { "type": "integer", "format": "int32" },
										"length": { "type": "integer", "format": "int32" },
										"location": { "type": "string", "format": "uri" },
										"language": {
											"type": "object",
											"properties": {
												"language": { "type": "string" },
												"script": { "type": "string" },
												"country": { "type": "string" },
												"variant": { "type": "string" },
												"extensionKeys": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"unicodeLocaleAttributes": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"unicodeLocaleKeys": {
													"uniqueItems": true,
													"type": "array",
													"items": { "type": "string" }
												},
												"iso3Language": { "type": "string" },
												"iso3Country": { "type": "string" },
												"displayLanguage": { "type": "string" },
												"displayScript": { "type": "string" },
												"displayCountry": { "type": "string" },
												"displayVariant": { "type": "string" },
												"displayName": { "type": "string" }
											}
										},
										"statusInfo": {
											"type": "object",
											"properties": {
												"family": {
													"type": "string",
													"enum": [
														"INFORMATIONAL",
														"SUCCESSFUL",
														"REDIRECTION",
														"CLIENT_ERROR",
														"SERVER_ERROR",
														"OTHER"
													]
												},
												"statusCode": { "type": "integer", "format": "int32" },
												"reasonPhrase": { "type": "string" }
											}
										},
										"mediaType": {
											"type": "object",
											"properties": {
												"type": { "type": "string" },
												"subtype": { "type": "string" },
												"parameters": {
													"type": "object",
													"additionalProperties": { "type": "string" }
												},
												"wildcardType": { "type": "boolean" },
												"wildcardSubtype": { "type": "boolean" }
											}
										},
										"allowedMethods": {
											"uniqueItems": true,
											"type": "array",
											"items": { "type": "string" }
										},
										"cookies": {
											"type": "object",
											"additionalProperties": {
												"type": "object",
												"properties": {
													"name": { "type": "string" },
													"value": { "type": "string" },
													"version": { "type": "integer", "format": "int32" },
													"path": { "type": "string" },
													"domain": { "type": "string" },
													"comment": { "type": "string" },
													"maxAge": { "type": "integer", "format": "int32" },
													"expiry": { "type": "string", "format": "date-time" },
													"secure": { "type": "boolean" },
													"httpOnly": { "type": "boolean" }
												}
											}
										},
										"entityTag": {
											"type": "object",
											"properties": {
												"value": { "type": "string" },
												"weak": { "type": "boolean" }
											}
										},
										"stringHeaders": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "string" } }
										},
										"lastModified": { "type": "string", "format": "date-time" },
										"date": { "type": "string", "format": "date-time" },
										"headers": {
											"type": "object",
											"additionalProperties": { "type": "array", "items": { "type": "object" } }
										},
										"entity": { "type": "object" },
										"links": {
											"uniqueItems": true,
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"type": { "type": "string" },
													"params": {
														"type": "object",
														"additionalProperties": { "type": "string" }
													},
													"uri": { "type": "string", "format": "uri" },
													"title": { "type": "string" },
													"uriBuilder": { "type": "object" },
													"rel": { "type": "string" },
													"rels": { "type": "array", "items": { "type": "string" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Rename Analysis\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/accounts/{id}/convertcurrency": {
			"post": {
				"tags": [ "AccountV1" ],
				"summary": "Convert currency by account",
				"description": "",
				"operationId": "convertAccountCurrencyv1",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "*/*": { "schema": { "$ref": "#/components/schemas/Currency" } } },
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "workflowId",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request. The input data is invalid.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Accounts\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/accounts/{id}/copy": {
			"post": {
				"tags": [ "AccountV1" ],
				"summary": "Copy account",
				"description": "",
				"operationId": "copyAccountsv1",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/CopyAccountInfo" } } },
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "workflowId",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Accounts\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/accounts": {
			"get": {
				"tags": [ "AccountV1" ],
				"summary": "Get accounts",
				"description": "",
				"operationId": "searchAccounts",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"schema": { "type": "string" }
					},
					{
						"name": "q",
						"in": "query",
						"description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
						"schema": { "type": "string" }
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Specify `ASC` to display the results in alphabetical or numerical ascending order or `DESC` to display the results in descending order.",
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at `0`.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "portfoliofilter",
						"in": "query",
						"description": "Indicates if search was triggered by portfolio.",
						"schema": { "type": "boolean" }
					},
					{
						"name": "policyExpirationDays",
						"description": "The date the latest policy expires.",
						"in": "query",
						"schema": { "type": "integer", "format": "int32", "default": 120 }
					}
				],
				"responses": {
					"200": {
						"description": "List of accounts successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/AccountSearchResult" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Accounts\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"post": {
				"tags": [ "AccountV1" ],
				"summary": "Create account",
				"description": "",
				"operationId": "createAccount",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Account" } } },
					"required": true
				},
				"responses": {
					"201": {
						"description": "Account created.",
						"headers": {
							"Location": {
								"description": "Account resource",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Accounts\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/accounts/{id}": {
			"get": {
				"tags": [ "AccountV1" ],
				"summary": "Get account",
				"description": "",
				"operationId": "getAccount",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Account information successfully retrieved.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Account" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Accounts\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "AccountV1" ],
				"summary": "Update account",
				"description": "",
				"operationId": "updateAccount",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Account" } } },
					"required": true
				},
				"responses": {
					"204": { "description": "Validation updated." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Accounts\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "AccountV1" ],
				"summary": "Delete account",
				"description": "",
				"operationId": "deleteAccount",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "workflowId",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Accounts\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/accounts/{id}/validatemedia": {
			"get": {
				"tags": [ "AccountV1" ],
				"summary": "Get validation files by account",
				"description": "",
				"operationId": "downloadValidationAccountFile",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Validation retrieved.",
						"content": {
							"*/*": { "schema": { "type": "object" } },
							"application/json": { "schema": { "type": "object" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": {
							"*/*": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } },
							"application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } }
						}
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Accounts\" action.",
						"content": {
							"*/*": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } },
							"application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } }
						}
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/accounts/{id}/geohaz": {
			"post": {
				"tags": [ "AccountV1" ],
				"summary": "Geohazard account",
				"description": "",
				"operationId": "geohazAccount",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": { "type": "array", "items": { "$ref": "#/components/schemas/LayerInfo" } }
						}
					},
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "url containing identifier of the submitted workflow.",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Accounts\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/accounts/{id}/analyses": {
			"get": {
				"tags": [ "AccountV1" ],
				"summary": "Get analyses by account",
				"description": "",
				"operationId": "getAccountAnalysesResults",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "q",
						"in": "query",
						"description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
						"schema": { "type": "string" }
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Specify `ASC` to display the results in alphabetical or numerical ascending order or `DESC` to display the results in descending order.",
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "userName",
						"in": "query",
						"description": "Name of user that ran the analysis.",
						"schema": { "type": "string" }
					},
					{
						"name": "runDate",
						"in": "query",
						"description": "Date that the analysis was run.",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Analyses for exposure successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/AnalysisSearchResult" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"deprecated": true,
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/accounts/{id}/metrics": {
			"get": {
				"tags": [ "AccountV1" ],
				"summary": "Get metrics by account",
				"description": "",
				"operationId": "getAccountMetrics",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Metrics for a specified account are successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/AccountMetrics" } }
						}
					},
					"400": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Accounts\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/accounts/{id}/coordinate": {
			"get": {
				"tags": [ "AccountV1" ],
				"summary": "Get account locations",
				"description": "",
				"operationId": "getCoordinateByLatitudeAndLongitude",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "latitude",
						"in": "query",
						"description": "Latitude",
						"schema": { "type": "number", "format": "double" }
					},
					{
						"name": "longitude",
						"in": "query",
						"description": "Longitude",
						"schema": { "type": "number", "format": "double" }
					}
				],
				"responses": {
					"200": {
						"description": "Location coordinate retrieved.",
						"content": {
							"application/json": {
								"schema": { "type": "array", "items": { "$ref": "#/components/schemas/Coordinate" } }
							}
						}
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Accounts\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/accounts/{id}/coordinates": {
			"get": {
				"tags": [ "AccountV1" ],
				"summary": "Get location coordinates by account",
				"description": "",
				"operationId": "getCoordinatesByAccount",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "List of location coordinates retrieved.",
						"content": {
							"application/json": {
								"schema": { "type": "array", "items": { "$ref": "#/components/schemas/Coordinate" } }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Accounts\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/accounts/{id}/countries": {
			"get": {
				"tags": [ "AccountV1" ],
				"summary": "Get countries by account",
				"description": "",
				"operationId": "getCountriesByAccount",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "List of countries retrieved.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/CountryMetrics" }
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Accounts\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/accounts/count": {
			"get": {
				"tags": [ "AccountV1" ],
				"summary": "Count accounts",
				"description": "",
				"operationId": "getExposureCountAccount",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Account count successfully retrieved.",
						"content": { "application/json": { "schema": { "type": "integer", "format": "int64" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Accounts\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/accounts/{id}/locationcount": {
			"get": {
				"tags": [ "AccountV1" ],
				"summary": "Count locations by account",
				"description": "",
				"operationId": "getLocationCount",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Number of locations is successfully retrieved.",
						"content": { "application/json": { "schema": { "type": "integer", "format": "int64" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/accounts/{id}/surplustreatieslocation": {
			"get": {
				"tags": [ "AccountV1" ],
				"summary": "Get location surplus treaties by account",
				"description": "",
				"operationId": "getLocationSurplusTreaties",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Location level surplus treaties retrieved.",
						"content": {
							"application/json": {
								"schema": { "type": "array", "items": { "$ref": "#/components/schemas/Treaty" } }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Accounts\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/accounts/{id}/policycount": {
			"get": {
				"tags": [ "AccountV1" ],
				"summary": "Count policies by account",
				"description": "",
				"operationId": "getPolicyCount",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Number of policies is successfully retrieved.",
						"content": { "application/json": { "schema": { "type": "integer", "format": "int64" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/accounts/{id}/sites": {
			"get": {
				"tags": [ "AccountV1" ],
				"summary": "Get sites by account",
				"description": "",
				"operationId": "getSiteNames",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "List of site names retrieved.",
						"content": {
							"application/json": { "schema": { "type": "array", "items": { "type": "string" } } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Accounts\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/accounts/{id}/move": {
			"post": {
				"tags": [ "AccountV1" ],
				"summary": "Move account to EDM",
				"description": "",
				"operationId": "moveAccount",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "option",
						"in": "query",
						"description": "Include (`1`) or exclude (`0`) locations in moved account.",
						"schema": { "maximum": 1, "minimum": 0, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"201": {
						"description": "Account successfully moved.",
						"headers": {
							"Location": {
								"description": "URI for newly created account",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Accounts\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/accounts/{id}/process": {
			"post": {
				"tags": [ "AccountV1" ],
				"summary": "Analyze account",
				"description": "",
				"operationId": "processAccount",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProcessInput" } } },
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "url containing identifier of the submitted workflow.",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Add to Analysis Builder\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"deprecated": true,
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/accounts/{id}/summary_report": {
			"post": {
				"tags": [ "AccountV1" ],
				"summary": "Generate summary report by account",
				"description": "",
				"operationId": "summaryReportAccount",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/ExposureSummaryReportInput" } }
					},
					"required": true
				},
				"responses": {
					"202": {
						"description": "Job accepted.",
						"headers": {
							"Location": {
								"description": "url containing identifier of the submitted workflow.",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Download Report\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/accounts/{id}/validate": {
			"get": {
				"tags": [ "AccountV1" ],
				"summary": "Validate account",
				"description": "",
				"operationId": "validateAccount",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Validation retrieved.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/LocationConditionValidationInfo" }
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Accounts\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/aggregate-portfolios/{id}/convert-currency": {
			"post": {
				"tags": [ "Aggregate PortfolioV1" ],
				"summary": "Convert the currency of  aggregate portfolio",
				"description": "",
				"operationId": "convertAggregatePortfolioCurrencyv1",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the aggregate portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "*/*": { "schema": { "$ref": "#/components/schemas/Currency" } } },
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "workflowId",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request. The input data is invalid.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Aggregate Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/aggregate-portfolios/{id}/copy": {
			"post": {
				"tags": [ "Aggregate PortfolioV1" ],
				"summary": "Copy aggregate portfolio",
				"description": "",
				"operationId": "copyAggregatePortfoliov1",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the aggregate portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/CopyAggregatePortfolioInfo" } }
					},
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "workflowId",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Aggregate Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/aggregate-portfolios": {
			"get": {
				"tags": [ "Aggregate PortfolioV1" ],
				"summary": "Get aggregate portfolios",
				"description": "",
				"operationId": "searchAggregatePortfoliosv1",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"schema": { "type": "string" }
					},
					{
						"name": "q",
						"in": "query",
						"description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
						"schema": { "type": "string" }
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Specify `ASC` to display the results in alphabetical or numerical ascending order or `DESC` to display the results in descending order.",
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "List of aggregate portfolios retrieved.",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/AggregatePortfolioSearchResult" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Aggregate Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"post": {
				"tags": [ "Aggregate PortfolioV1" ],
				"summary": "Create aggregate portfolio",
				"description": "",
				"operationId": "createAggregatePortfoliov1",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/AggregatePortfolio" } }
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "Aggregate portfolio created.",
						"headers": {
							"Location": {
								"description": "Aggregate portfolio resource",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Aggregate Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/aggregate-portfolios/{id}": {
			"get": {
				"tags": [ "Aggregate PortfolioV1" ],
				"summary": "Get aggregate portfolio",
				"description": "",
				"operationId": "getAggregatePortfolioByIdv1",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the aggregate portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Aggregate portfolio retrieved.",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/AggregatePortfolioSearchItem" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Aggregate Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "Aggregate PortfolioV1" ],
				"summary": "Update aggregate portfolio",
				"description": "",
				"operationId": "updateAggregatePortfoliov1",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the aggregate portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/AggregatePortfolio" } }
					},
					"required": true
				},
				"responses": {
					"204": { "description": "Aggregate portfolio successfully updated." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Aggregate Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "Aggregate PortfolioV1" ],
				"summary": "Delete aggregate portfolio",
				"description": "",
				"operationId": "deleteAggregatePortfoliov1",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "url containing identifier of the submitted workflow.",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Aggregate Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/aggregate-portfolios/{id}/analyses": {
			"get": {
				"tags": [ "Aggregate PortfolioV1" ],
				"summary": "Get analyses by aggregate portfolio",
				"description": "",
				"operationId": "getAggregatePortfolioAnalysesResultsv1",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the aggregate portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "q",
						"in": "query",
						"description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
						"schema": { "type": "string" }
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Specify `ASC` to display the results in alphabetical or numerical ascending order or `DESC` to display the results in descending order.",
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "Analyses for exposure successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/AnalysisSearchResultV2" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/aggregate-portfolios/{id}/metrics": {
			"get": {
				"tags": [ "Aggregate PortfolioV1" ],
				"summary": "Get metrics by aggregate portfolio",
				"description": "",
				"operationId": "getAggregatePortfolioMetricsv1",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the aggregate portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Metrics for a specified aggregate portfolio are successfully retrieved.",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/AggregatePortfolioMetrics" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Aggregate Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/aggregate-portfolios/{id}/treaties": {
			"get": {
				"tags": [ "Aggregate PortfolioV1" ],
				"summary": "Get treaties by aggregate portfolio",
				"description": "",
				"operationId": "getAggregatePortfolioTreatiesv1",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the aggregate portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Treaties applicable for a specified aggregate portfolio are successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/TreatySearchResult" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Aggregate Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/aggregate-portfolios/{id}/countries": {
			"get": {
				"tags": [ "Aggregate PortfolioV1" ],
				"summary": "Get countries by aggregate portfolio",
				"description": "",
				"operationId": "getCountriesByAggregatePortfoliov1",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the aggregate portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "List of countries retrieved.",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/AggregatePortfolioCountryMetrics" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Aggregate Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/aggregate-portfolios/{id}/profiles": {
			"get": {
				"tags": [ "Aggregate PortfolioV1" ],
				"summary": "Get ALM profiles by aggregate portfolio",
				"description": "",
				"operationId": "getDefaultProfilesv1",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the aggregate portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "softwareVersionCode",
						"in": "query",
						"description": "Software version code.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "includeHD",
						"in": "query",
						"description": "Indicator to include HD profiles",
						"schema": { "type": "boolean" }
					}
				],
				"responses": {
					"200": {
						"description": "List of ALM profiles retrieved.",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/DefaultAlmProfilesResponse" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Aggregate Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/aggregate-portfolios/count": {
			"get": {
				"tags": [ "Aggregate PortfolioV1" ],
				"summary": "Count aggregate portfolios",
				"description": "",
				"operationId": "getExposureCountAggregatePortfolio",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Aggregate portfolio count successfully retrieved.",
						"content": { "application/json": { "schema": { "type": "integer", "format": "int64" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Aggregate Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/aggregate-portfolios/{id}/process": {
			"post": {
				"tags": [ "Aggregate PortfolioV1" ],
				"summary": "Analyze aggregate portfolio",
				"description": "",
				"operationId": "processAggregatePortfoliov1",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the aggregate portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/AlmProcessInput" } } },
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "url containing identifier of the submitted workflow.",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Add to Analysis Builder\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/aggregate-portfolios/{id}/aggregate-exposures-lists": {
			"get": {
				"tags": [ "Aggregate PortfolioV1" ],
				"summary": "Get exposures by aggregate portfolio",
				"description": "",
				"operationId": "getAggregateExposureListsv1",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the aggregate portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "countryCode",
						"in": "query",
						"description": "Country to filter by.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "resolution",
						"in": "query",
						"description": "Resolution to filter by.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "List of aggregate exposure values retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/AggregateExposuresList" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Aggregate Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"deprecated": true,
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/branches": {
			"get": {
				"tags": [ "BranchV1" ],
				"summary": "Get branches",
				"description": "",
				"operationId": "getBranches",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "q",
						"in": "query",
						"description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
						"schema": { "type": "string" }
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "List of branches in the data source is successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/BranchSearchResult" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Contract Tags\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"post": {
				"tags": [ "BranchV1" ],
				"summary": "Create branch",
				"description": "",
				"operationId": "createBranch",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Branch" } } },
					"required": true
				},
				"responses": {
					"201": {
						"description": "New branch is created in the data source is successfully.",
						"headers": {
							"Location": {
								"description": "Location of the new Branch",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Contract Tags\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"409": {
						"description": "Conflict. Resource already exists.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/branches/{id}": {
			"get": {
				"tags": [ "BranchV1" ],
				"summary": "Get branch by ID",
				"description": "",
				"operationId": "getBranchById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the branch.",
						"required": true,
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Branch by Id in the data source is successfully retrieved.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Branch" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Contract Tags\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "Branch not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "BranchV1" ],
				"summary": "Update branch",
				"description": "",
				"operationId": "updateBranch",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "id",
						"in": "path",
						"description": "ID of the branch.",
						"required": true,
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Branch" } } },
					"required": true
				},
				"responses": {
					"204": { "description": "Updated. branch is updated in the data source is successfully." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Contract Tags\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "BranchV1" ],
				"summary": "Delete branch",
				"description": "",
				"operationId": "deleteBranch",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "id",
						"in": "path",
						"description": "ID of the branch.",
						"required": true,
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"204": { "description": "Branch is deleted from the data source is successfully." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Contract Tags\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/cedants": {
			"get": {
				"tags": [ "CedantV1" ],
				"summary": "Get cedants",
				"description": "",
				"operationId": "getCedants",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "q",
						"in": "query",
						"description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
						"schema": { "type": "string" }
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "List of cedants in the data source is successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/CedantSearchResult" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Contract Tags\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"post": {
				"tags": [ "CedantV1" ],
				"summary": "Create cedant",
				"description": "",
				"operationId": "createCedant",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Cedant" } } },
					"required": true
				},
				"responses": {
					"201": {
						"description": "New cedant is created in the data source is successfully.",
						"headers": {
							"Location": {
								"description": "Location of the new Cedant",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Contract Tags\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"409": {
						"description": "Conflict. Resource already exists.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/cedants/{id}": {
			"get": {
				"tags": [ "CedantV1" ],
				"summary": "Get cedant",
				"description": "",
				"operationId": "getCedantById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the cedant.",
						"required": true,
						"schema": { "maxLength": 2147483647, "minLength": 1, "type": "string" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Cedant by Id in the data source is successfully retrieved.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Cedant" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Contract Tags\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "Cedant not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "CedantV1" ],
				"summary": "Update cedant",
				"description": "",
				"operationId": "updateCedant",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "id",
						"in": "path",
						"description": "ID of the cedant.",
						"required": true,
						"schema": { "maxLength": 2147483647, "minLength": 1, "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Cedant" } } },
					"required": true
				},
				"responses": {
					"204": { "description": "Cedant is updated in the data source is successfully." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Contract Tags\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "CedantV1" ],
				"summary": "Delete cedant",
				"description": "",
				"operationId": "deleteCedant",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "id",
						"in": "path",
						"description": "ID of the cedant.",
						"required": true,
						"schema": { "maxLength": 2147483647, "minLength": 1, "type": "string" }
					}
				],
				"responses": {
					"204": { "description": "Deleted. cedant is deleted from the data source is successfully." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Contract Tags\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/conditions/{id}": {
			"get": {
				"tags": [ "PolicyV1" ],
				"summary": "Get policy condition",
				"description": "",
				"operationId": "getPolicyConditionTemplates",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Information for a specified policy condition is successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/PolicyCondition" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/exposurebatches": {
			"post": {
				"tags": [ "PortfolioV1" ],
				"summary": "Manage portfolio exposures in batch",
				"description": "",
				"operationId": "executeBatchOperation",
				"parameters": [
					{
						"name": "operation",
						"in": "query",
						"description": "Operation of batch resource",
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": { "type": "array", "items": { "$ref": "#/components/schemas/BatchRequest" } }
						}
					}
				},
				"responses": {
					"200": { "description": "Operation executed." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/faclayers": {
			"get": {
				"tags": [ "UtilityV1" ],
				"summary": "Get facultataives",
				"description": "",
				"operationId": "getFacultatives",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "q",
						"in": "query",
						"description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
						"schema": { "type": "string" }
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "List of facultataives in the data source is successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/FacultativeSearchResult" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Facultative Cessions\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"post": {
				"tags": [ "UtilityV1" ],
				"summary": "Create facultative",
				"description": "",
				"operationId": "createFacultative",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Facultative" } } },
					"required": true
				},
				"responses": {
					"201": {
						"description": "New facultative is created in the data source is successfully.",
						"headers": {
							"Location": {
								"description": "Location of the new Facultative",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Facultative Cessions\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"409": {
						"description": "Conflict. Resource already exists.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/faclayers/{id}": {
			"get": {
				"tags": [ "UtilityV1" ],
				"summary": "Get facultative by ID",
				"description": "",
				"operationId": "getFacultativeById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the faclutative.",
						"required": true,
						"schema": { "maxLength": 2147483647, "minLength": 1, "type": "string" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Facultative by Id in the data source is successfully retrieved.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Facultative" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Facultative Cessions\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "Facultative not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "UtilityV1" ],
				"summary": "Update facultative",
				"description": "",
				"operationId": "updateFacultative",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "id",
						"in": "path",
						"description": "ID of the facultative.",
						"required": true,
						"schema": { "maxLength": 2147483647, "minLength": 1, "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Facultative" } } },
					"required": true
				},
				"responses": {
					"204": { "description": "Facultative is updated in the data source is successfully." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Facultative Cessions\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "UtilityV1" ],
				"summary": "Delete facultative",
				"description": "",
				"operationId": "deleteFacultative",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "id",
						"in": "path",
						"description": "ID of the facultative.",
						"required": true,
						"schema": { "maxLength": 2147483647, "minLength": 1, "type": "string" }
					}
				],
				"responses": {
					"204": { "description": "Deleted. Facultative is deleted from the data source successfully." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Facultative Cessions\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/globaledit/dryrun": {
			"post": {
				"tags": [ "UtilityV1" ],
				"summary": "Update exposures dry run",
				"description": "",
				"operationId": "dryRun",
				"parameters": [
					{
						"name": "exposureId",
						"in": "query",
						"description": "Exposure ID",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "exposureType",
						"in": "query",
						"description": "Exposure type: ACCOUNT or PORTFOLIO.",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"PORTFOLIO",
								"ACCOUNT",
								"LOCATION",
								"POLICY",
								"STEP_POLICY",
								"TREATY",
								"AGGPORTFOLIO"
							]
						}
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": { "content": { "text/plain": { "schema": { "type": "string" } } }, "required": true },
				"responses": {
					"200": {
						"description": "The bulk edit dry run was successfully performed.",
						"content": { "application/json": { "schema": { "type": "string" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				}
			}
		},
		"/v1/globaledit": {
			"post": {
				"tags": [ "UtilityV1" ],
				"summary": "Update exposures",
				"description": "",
				"operationId": "globalEdit",
				"parameters": [
					{
						"name": "exposureId",
						"in": "query",
						"description": "Exposure ID",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "exposureType",
						"in": "query",
						"description": "Exposure type: ACCOUNT or PORTFOLIO.",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"PORTFOLIO",
								"ACCOUNT",
								"LOCATION",
								"POLICY",
								"STEP_POLICY",
								"TREATY",
								"AGGPORTFOLIO"
							]
						}
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": { "content": { "text/plain": { "schema": { "type": "string" } } }, "required": true },
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "workflowId",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				}
			}
		},
		"/v1/lobs": {
			"get": {
				"tags": [ "Line of BusinessV1" ],
				"summary": "Get lines of business",
				"description": "",
				"operationId": "getLineOfBusinesss",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "q",
						"in": "query",
						"description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
						"schema": { "type": "string" }
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "Get List of lineOfBusinesses in the data source is successfully retrieved.",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/LineOfBusinessSearchResult" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Contract Tags\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"post": {
				"tags": [ "Line of BusinessV1" ],
				"summary": "Create line of business",
				"description": "",
				"operationId": "createLineOfBusiness",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/LineOfBusiness" } } },
					"required": true
				},
				"responses": {
					"201": {
						"description": "New LineOfBusiness is created in the data source is successfully.",
						"headers": {
							"Location": {
								"description": "Account resource",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Contract Tags\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/lobs/{id}": {
			"get": {
				"tags": [ "Line of BusinessV1" ],
				"summary": "Get line of business by ID",
				"description": "",
				"operationId": "getLineOfBusinessById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the LineOfBusiness.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "LineOfBusiness by Id in the data source is successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/LineOfBusiness" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Contract Tags\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "Line of BusinessV1" ],
				"summary": "Update line of business",
				"description": "",
				"operationId": "updateLineOfBusiness",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/LineOfBusiness" } } },
					"required": true
				},
				"responses": {
					"204": { "description": "LineOfBusiness is updated in the data source is successfully." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Contract Tags\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "Line of BusinessV1" ],
				"summary": "Delete line of business",
				"description": "",
				"operationId": "deleteLineOfBusiness",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"204": { "description": "LineOfBusiness is deleted from the data source is successfully." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Contract Tags\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/locations/locationcondition/batch": {
			"post": {
				"tags": [ "LocationV1" ],
				"summary": "Manage location conditions in batch",
				"description": "",
				"operationId": "batchProcessLocationConditions",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": { "type": "array", "items": { "$ref": "#/components/schemas/BatchRequest" } }
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "Batch successfully initiated",
						"headers": {
							"Location": {
								"description": "Location of the locationcondition/batch",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"405": {
						"description": "Method not allowed",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/locations/{id}/buildingattribute": {
			"post": {
				"tags": [ "LocationV1" ],
				"summary": "Create building attribute",
				"description": "",
				"operationId": "createBuildingAttribute",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/BuildingAttribute" } }
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "Building attribute successfully created",
						"headers": {
							"Location": {
								"description": "Location of the new building attribute",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/locations": {
			"get": {
				"tags": [ "LocationV1" ],
				"summary": "Get locations",
				"description": "",
				"operationId": "searchLocations",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "q",
						"in": "query",
						"description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
						"schema": { "type": "string" }
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{ "name": "withflzone", "in": "query", "schema": { "type": "boolean", "default": false } }
				],
				"responses": {
					"200": {
						"description": "List of locations is successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/LocationSearchResult" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"post": {
				"tags": [ "LocationV1" ],
				"summary": "Create location",
				"description": "",
				"operationId": "createLocation",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Location" } } },
					"required": true
				},
				"responses": {
					"201": {
						"description": "Created. New location is successfully created.",
						"headers": {
							"Location": {
								"description": "URL for the new location",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/locations/{id}/locationbidetail": {
			"post": {
				"tags": [ "LocationV1" ],
				"summary": "Create BI peril",
				"description": "",
				"operationId": "createLocationBiDetail",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/LocationBiDetail" } }
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "Bi detail successfully created.",
						"headers": {
							"Location": {
								"description": "Location of the new bi detail",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/locations/{id}/locationcondition": {
			"post": {
				"tags": [ "LocationV1" ],
				"summary": "Creates location condition",
				"description": "",
				"operationId": "createLocationCondition",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/LocationCondition" } }
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "Location condition successfully created",
						"headers": {
							"Location": {
								"description": "Location of the new location condition",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/locations/{id}/coverage": {
			"post": {
				"tags": [ "LocationV1" ],
				"summary": "Create location coverage",
				"description": "",
				"operationId": "createLocationCoverage",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/LocationCoverage" } }
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "Coverage successfully created.",
						"headers": {
							"Location": {
								"description": "Location of the new coverage",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/locations/{id}/locationeqdetail": {
			"post": {
				"tags": [ "LocationV1" ],
				"summary": "Create EQ peril",
				"description": "",
				"operationId": "createLocationEqDetail",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/LocationEqDetail" } }
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "EQ detail successfully created.",
						"headers": {
							"Location": {
								"description": "Location of the new EQ detail",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/locations/{id}/locationfldetail": {
			"post": {
				"tags": [ "LocationV1" ],
				"summary": "Create FL peril",
				"description": "",
				"operationId": "createLocationFlDetail",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/LocationFlDetail" } }
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "Created",
						"headers": {
							"Location": {
								"description": "Location of the new FL detail",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/locations/{id}/locationfrdetail": {
			"post": {
				"tags": [ "LocationV1" ],
				"summary": "Create FR peril",
				"description": "",
				"operationId": "createLocationFrDetail",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/LocationFrDetail" } }
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "FR Detail successfully created",
						"headers": {
							"Location": {
								"description": "Location of new FR detail",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/locations/{id}/cession": {
			"post": {
				"tags": [ "LocationV1" ],
				"summary": "Create location reinsurance cession",
				"description": "",
				"operationId": "createLocationReinsuranceCession",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/ReinsuranceCession" } }
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "Created. New location is successfully created.",
						"headers": {
							"Location": {
								"description": "url of the new location",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/locations/{id}/locationtodetail": {
			"post": {
				"tags": [ "LocationV1" ],
				"summary": "Create TO peril",
				"description": "",
				"operationId": "createLocationToDetail",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/LocationToDetail" } }
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "TO detail successfully created",
						"headers": {
							"Location": {
								"description": "Location of the new TO detail",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/locations/{id}/locationtrdetail": {
			"post": {
				"tags": [ "LocationV1" ],
				"summary": "Create TR peril",
				"description": "",
				"operationId": "createLocationTrDetail",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/LocationTrDetail" } }
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "Location TR details successfully created.",
						"headers": {
							"Location": {
								"description": "Location of Location TR Details",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/locations/{id}/locationwcdetail": {
			"post": {
				"tags": [ "LocationV1" ],
				"summary": "Create WC peril",
				"description": "",
				"operationId": "createLocationWcDetail",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/LocationWcDetail" } }
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "Location WC details successfully created",
						"headers": {
							"Location": {
								"description": "Location of Location WC Detail",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/locations/{id}/locationwsdetail": {
			"post": {
				"tags": [ "LocationV1" ],
				"summary": "Create WS peril",
				"description": "",
				"operationId": "createLocationWsDetail",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/LocationWsDetail" } }
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "Location WS Details successfully created",
						"headers": {
							"Location": {
								"description": "Location of Location WS Details",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/locations/{id}/buildingattribute/{buildingattributeid}": {
			"get": {
				"tags": [ "LocationV1" ],
				"summary": "Get building attribute",
				"description": "",
				"operationId": "getBuildingAttribute",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "buildingattributeid",
						"in": "path",
						"description": "ID number of the building attribute.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Building attribute successfully retrieved",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/BuildingAttribute" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "LocationV1" ],
				"summary": "Update building attribute",
				"description": "",
				"operationId": "updateBuildingAttribute",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "buildingattributeid",
						"in": "path",
						"description": "ID number of the location building attribute record.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/BuildingAttribute" } }
					},
					"required": true
				},
				"responses": {
					"204": { "description": "Building attribute updated" },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/MetaLinks" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "LocationV1" ],
				"summary": "Delete building attribute",
				"description": "",
				"operationId": "deleteBuildingAttribute",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "buildingattributeid",
						"in": "path",
						"description": "ID number of the location building attribute record.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"204": { "description": "Building attribute successfully deleted" },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/locations/{id}": {
			"get": {
				"tags": [ "LocationV1" ],
				"summary": "Get location",
				"description": "",
				"operationId": "getLocation",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": " Information for a specified location is successfully retrieved.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Location" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "LocationV1" ],
				"summary": "Update location",
				"description": "",
				"operationId": "updateLocation",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Location" } } },
					"required": true
				},
				"responses": {
					"204": { "description": "Location updated" },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "LocationV1" ],
				"summary": "Delete location",
				"description": "",
				"operationId": "deleteLocation",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"204": { "description": "Location successfully deleted." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/locations/{id}/locationbidetail/{locationbidetailid}": {
			"get": {
				"tags": [ "LocationV1" ],
				"summary": "Get BI peril by location",
				"description": "",
				"operationId": "getLocationBiDetail",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "locationbidetailid",
						"in": "path",
						"description": "ID number of the location bi detail record.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Returns location BI detail",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/LocationBiDetail" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "LocationV1" ],
				"summary": "Update BI peril",
				"description": "",
				"operationId": "updateLocationBiDetail",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "locationbidetailid",
						"in": "path",
						"description": "ID number of the location bi detail record.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/LocationBiDetail" } }
					},
					"required": true
				},
				"responses": {
					"204": { "description": "Bi detail successfully updated." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/MetaLinks" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "LocationV1" ],
				"summary": "Delete BI peril",
				"description": "",
				"operationId": "deleteLocationBiDetail",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "locationbidetailid",
						"in": "path",
						"description": "ID number of the location bi detail record.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"204": { "description": "Bi detail successfully deleted" },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/locations/{id}/locationcondition/{conditionid}": {
			"get": {
				"tags": [ "LocationV1" ],
				"summary": "Get location condition",
				"description": "",
				"operationId": "getLocationConditionById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "conditionid",
						"in": "path",
						"description": "ID number of the location condition.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Building attribute successfully retrieved",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/BuildingAttribute" }
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "LocationV1" ],
				"summary": "Update location condition",
				"description": "",
				"operationId": "updateLocationCondition",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "conditionid",
						"in": "path",
						"description": "ID number of the location condition record.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/LocationCondition" } }
					},
					"required": true
				},
				"responses": {
					"204": { "description": "Location condition successfully updated" },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/MetaLinks" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "LocationV1" ],
				"summary": "Delete location condition",
				"description": "",
				"operationId": "deleteLocationCondition",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "conditionid",
						"in": "path",
						"description": "ID number of the location condition record.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"204": { "description": "Location condition successfully deleted" },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/locations/{id}/coverage/{coverageid}": {
			"get": {
				"tags": [ "LocationV1" ],
				"summary": "Gets location coverage",
				"description": "",
				"operationId": "getLocationCoverage",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "coverageid",
						"in": "path",
						"description": "ID number of the location coverage record.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/LocationCoverage" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "LocationV1" ],
				"summary": "Update coverage",
				"description": "",
				"operationId": "updateLocationCoverage",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "coverageid",
						"in": "path",
						"description": "ID number of the location coverage record.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/LocationCoverage" } }
					},
					"required": true
				},
				"responses": {
					"204": { "description": "Coverage successfully updated" },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/MetaLinks" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "LocationV1" ],
				"summary": "Delete location coverage",
				"description": "",
				"operationId": "deleteLocationCoverage",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "coverageid",
						"in": "path",
						"description": "ID number of the location coverage record.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"204": { "description": "Location coverage successfully deleted." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/locations/{id}/locationeqdetail/{locationeqdetailid}": {
			"get": {
				"tags": [ "LocationV1" ],
				"summary": "Get EQ peril",
				"description": "",
				"operationId": "getLocationEqDetail",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "locationeqdetailid",
						"in": "path",
						"description": "ID number of the location earthquake record.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "EQ detail successfully retrieved",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/LocationEqDetail" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "LocationV1" ],
				"summary": "Update EQ peril",
				"description": "",
				"operationId": "updateLocationEqDetail",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "locationeqdetailid",
						"in": "path",
						"description": "ID number of the location earthquake record.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/LocationEqDetail" } }
					},
					"required": true
				},
				"responses": {
					"204": { "description": "EQ Detail Successfully updated" },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/MetaLinks" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "LocationV1" ],
				"summary": "Delete EQ peril",
				"description": "",
				"operationId": "deleteLocationEqDetail",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "locationeqdetailid",
						"in": "path",
						"description": "ID number of the location earthquake record.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"204": { "description": "EQ detail successfully deleted." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/locations/{id}/locationfldetail/{locationfldetailid}": {
			"get": {
				"tags": [ "LocationV1" ],
				"summary": "Get FL peril",
				"description": "",
				"operationId": "getLocationFlDetail",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "locationfldetailid",
						"in": "path",
						"description": "ID number of the location flood record.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "FL detail successfully retrieved",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/LocationFlDetail" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "LocationV1" ],
				"summary": "Update FL peril",
				"description": "",
				"operationId": "updateLocationFlDetail",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "locationfldetailid",
						"in": "path",
						"description": "ID number of the location flood record.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/LocationFlDetail" } }
					},
					"required": true
				},
				"responses": {
					"204": { "description": "FL detail successfully updated" },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": { "description": "The requested resource was not found." }
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "LocationV1" ],
				"summary": "Delete FL peril",
				"description": "",
				"operationId": "deleteLocationFlDetail",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "locationfldetailid",
						"in": "path",
						"description": "ID number of the location flood record.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"204": { "description": "FL detail successfully deleted" },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/locations/{id}/locationfrdetail/{locationfrdetailid}": {
			"get": {
				"tags": [ "LocationV1" ],
				"summary": "Get location FR peril",
				"description": "",
				"operationId": "getLocationFrDetail",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "locationfrdetailid",
						"in": "path",
						"description": "ID number of the location fire record.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "FR detail successfully retrieved",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/LocationFrDetail" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "LocationV1" ],
				"summary": "Update FR peril",
				"description": "",
				"operationId": "updateLocationFrDetail",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "locationfrdetailid",
						"in": "path",
						"description": "ID number of the location fire record.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/LocationFrDetail" } }
					},
					"required": true
				},
				"responses": {
					"204": { "description": "FR detail successfully updated." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "LocationV1" ],
				"summary": "Delete FR peril",
				"description": "",
				"operationId": "deleteLocationFrDetail",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "locationfrdetailid",
						"in": "path",
						"description": "ID number of the location fire record.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"204": { "description": "FR detail successfully deleted" },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/locations/{id}/cession/{cessionid}": {
			"get": {
				"tags": [ "LocationV1" ],
				"summary": "Get reinsurance cession",
				"description": "",
				"operationId": "getLocationReinsuranceCessionDetail",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "cessionid",
						"in": "path",
						"description": "ID number of the cession.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "ReinsuranceCession details successfully returned.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ReinsuranceCession" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "LocationV1" ],
				"summary": "Update reinsurance cession",
				"description": "",
				"operationId": "updateLocationReinsuranceCession",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "cessionid",
						"in": "path",
						"description": "ID number of the cession.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/ReinsuranceCession" } }
					},
					"required": true
				},
				"responses": {
					"204": { "description": "Location reinsurance cession successfully updated" },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "LocationV1" ],
				"summary": "Delete reinsurance cession",
				"description": "",
				"operationId": "deleteLocationReinsuranceCession",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "cessionid",
						"in": "path",
						"description": "ID number of the cession.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"204": { "description": "Location reinsurance cession successfully deleted." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/locations/{id}/locationtodetail/{locationtodetailid}": {
			"get": {
				"tags": [ "LocationV1" ],
				"summary": "Get TO peril",
				"description": "",
				"operationId": "getLocationToDetail",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "locationtodetailid",
						"in": "path",
						"description": "ID number of the location tornado record.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "TO detail successfully retrieved",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/LocationToDetail" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "LocationV1" ],
				"summary": "Update TO peril",
				"description": "",
				"operationId": "updateLocationToDetail",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "locationtodetailid",
						"in": "path",
						"description": "ID number of the location tornado record.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/LocationToDetail" } }
					},
					"required": true
				},
				"responses": {
					"204": { "description": "TO detail successfully updated" },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/MetaLinks" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "LocationV1" ],
				"summary": "Delete TO peril",
				"description": "",
				"operationId": "deleteLocationToDetail",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "locationtodetailid",
						"in": "path",
						"description": "ID number of the location tornado record.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"204": { "description": "TO detail successfully deleted" },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/locations/{id}/locationtrdetail/{locationtrdetailid}": {
			"get": {
				"tags": [ "LocationV1" ],
				"summary": "Get TR peril",
				"description": "",
				"operationId": "getLocationTrDetail",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "locationtrdetailid",
						"in": "path",
						"description": "ID number of the location terrorism record.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Location TR detail successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/LocationTrDetail" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "LocationV1" ],
				"summary": "Update TR peril",
				"description": "",
				"operationId": "updateLocationTrDetail",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "locationtrdetailid",
						"in": "path",
						"description": "ID number of the location terrorism record.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/LocationTrDetail" } }
					},
					"required": true
				},
				"responses": {
					"204": { "description": "Location TR detail successfully updated." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "LocationV1" ],
				"summary": "Delete TR peril",
				"description": "",
				"operationId": "deleteLocationTrDetail",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "locationtrdetailid",
						"in": "path",
						"description": "ID number of the location terrorism record.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"204": { "description": "Location TR detail successfully deleted." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/locations/{id}/locationwcdetail/{locationwcdetailid}": {
			"get": {
				"tags": [ "LocationV1" ],
				"summary": "Get WC peril",
				"description": "",
				"operationId": "getLocationWcDetail",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "locationwcdetailid",
						"in": "path",
						"description": "ID number of the location worker compensation record.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Location WC detail successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/LocationWcDetail" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "LocationV1" ],
				"summary": "Update WC peril",
				"description": "",
				"operationId": "updateLocationWcDetail",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "locationwcdetailid",
						"in": "path",
						"description": "ID number of the location worker compensation record.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/LocationWcDetail" } }
					},
					"required": true
				},
				"responses": {
					"204": { "description": "Location WC details successfully updated." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "LocationV1" ],
				"summary": "Delete WC peril",
				"description": "",
				"operationId": "deleteLocationWcDetail",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "locationwcdetailid",
						"in": "path",
						"description": "ID number of the location worker compensation record.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"204": { "description": "Location WC detail successfully deleted." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/locations/{id}/locationwsdetail/{locationwsdetailid}": {
			"get": {
				"tags": [ "LocationV1" ],
				"summary": "Get WS peril",
				"description": "",
				"operationId": "getLocationWsDetail",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "locationwsdetailid",
						"in": "path",
						"description": "ID number of the location windstorm record.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Location WS Detail successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/LocationWsDetail" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "LocationV1" ],
				"summary": "Update WS peril",
				"description": "",
				"operationId": "updateLocationWsDetail",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "locationwsdetailid",
						"in": "path",
						"description": "ID number of the location windstorm record.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/LocationWsDetail" } }
					},
					"required": true
				},
				"responses": {
					"204": { "description": "Location WS Detail successfully updated." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "LocationV1" ],
				"summary": "Delete WS peril",
				"description": "",
				"operationId": "deleteLocationWsDetail",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "locationwsdetailid",
						"in": "path",
						"description": "ID number of the location windstorm record.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"204": { "description": "Location WS Detail successfully deleted." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/locations/geocode": {
			"post": {
				"tags": [ "LocationV1" ],
				"summary": "Geocode address",
				"description": "",
				"operationId": "geoCodeByAddress",
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Address" } } },
					"required": true
				},
				"responses": {
					"200": {
						"description": "The geocoding of the address is successfully performed.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Address" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/locations/{id}/geocode": {
			"post": {
				"tags": [ "LocationV1" ],
				"summary": "Geocode location",
				"description": "",
				"operationId": "geoCodeByLocationId",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": { "type": "array", "items": { "$ref": "#/components/schemas/LayerInfo" } }
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "Created. The location geocod request is created successfully.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Address" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/locations/{id}/policyconditions": {
			"get": {
				"tags": [ "LocationV1" ],
				"summary": "Get policy conditions by location",
				"description": "",
				"operationId": "getPolicyConditions",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": " Policy conditions successfully retrieved.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/PolicyCondition" }
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/policyconditions": {
			"get": {
				"tags": [ "Policy ConditionV1" ],
				"summary": "Get policy conditions",
				"description": "",
				"operationId": "getAllPolicyConditions",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Retrieves all policy conditions in the EDM",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/PolicyCondition" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/policies/{id}/policycondition/{conditionid}/backfill": {
			"post": {
				"tags": [ "PolicyV1" ],
				"summary": "Back fill policy condition",
				"description": "",
				"operationId": "backFillPolicyCondition",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the policy.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "conditionid",
						"in": "path",
						"description": "ID number of the Policy Condition.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine)."
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/policies/copy": {
			"post": {
				"tags": [ "PolicyV1" ],
				"summary": "Copy policy",
				"description": "",
				"operationId": "copyPolicy",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/CopyPolicyInfo" } } },
					"required": true
				},
				"responses": {
					"200": {
						"description": "Existing policy is successfully copied.",
						"headers": {
							"Location": {
								"description": "Policy id of the copy policy",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/policies": {
			"get": {
				"tags": [ "PolicyV1" ],
				"summary": "Get policies",
				"description": "",
				"operationId": "searchPolicies",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "q",
						"in": "query",
						"description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
						"schema": { "type": "string" }
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "List of policies is successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/PolicySearchResult" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"post": {
				"tags": [ "PolicyV1" ],
				"summary": "Create policy",
				"description": "",
				"operationId": "createPolicy",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Policy" } } },
					"required": true
				},
				"responses": {
					"201": {
						"description": "Policy is successfully created.",
						"headers": {
							"Location": {
								"description": "Location of the new policy",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/policies/{id}/policycondition": {
			"post": {
				"tags": [ "PolicyV1" ],
				"summary": "Create policy condition",
				"description": "",
				"operationId": "createPolicyCondition",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the policy.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/PolicyCondition" } } },
					"required": true
				},
				"responses": {
					"201": {
						"description": "Condition for a specified policy is successfully created.",
						"headers": {
							"Location": {
								"description": "location of the new policy condition",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/policies/{id}/policycondition/{conditionid}/criteria": {
			"post": {
				"tags": [ "PolicyV1" ],
				"summary": "Creates policy condition criteria",
				"description": "",
				"operationId": "createPolicyConditionCriteria",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the policy.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "conditionid",
						"in": "path",
						"description": "ID number of the Policy Condition.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/PolicyConditionCriteria" } }
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "Policy condition successfully created",
						"headers": {
							"Location": {
								"description": "Location of the new policy condition criteria",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/policies/{id}/coverage": {
			"post": {
				"tags": [ "PolicyV1" ],
				"summary": "Create policy coverage",
				"description": "",
				"operationId": "createPolicyCoverage",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the policy.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/PolicyCoverage" } } },
					"required": true
				},
				"responses": {
					"201": {
						"description": "Policy coverage successfully created.",
						"headers": {
							"Location": {
								"description": "Location of the new policy coverage",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/policies/{id}/cession": {
			"post": {
				"tags": [ "PolicyV1" ],
				"summary": "Create reinsurance cession",
				"description": "",
				"operationId": "createPolicyReinsuranceCession",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the policy.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/ReinsuranceCession" } }
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "Reinsurance cession for a specified policy is successfully created.",
						"headers": {
							"Location": {
								"description": "Location of the new policy reinsurance cession",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/policies/{id}": {
			"get": {
				"tags": [ "PolicyV1" ],
				"summary": "Get policy",
				"description": "",
				"operationId": "getPolicy",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the policy.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Information on a specified policy is successfully retrieved.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Policy" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "PolicyV1" ],
				"summary": "Update policy",
				"description": "",
				"operationId": "updatePolicy",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the policy.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Policy" } } },
					"required": true
				},
				"responses": {
					"204": { "description": "Policy successfully updated" },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "PolicyV1" ],
				"summary": "Delete policy",
				"description": "",
				"operationId": "deletePolicy",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the policy.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"204": { "description": "Policy successfully deleted" },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/policies/{id}/policycondition/{conditionid}": {
			"get": {
				"tags": [ "PolicyV1" ],
				"summary": "Get policy condition",
				"description": "",
				"operationId": "getPolicyCondition",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the policy.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "conditionid",
						"in": "path",
						"description": "ID number of the Policy Condition.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Information for a condition specified by its ID for a policy specified by its ID is successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/PolicyCondition" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "PolicyV1" ],
				"summary": "Update policy condition",
				"description": "",
				"operationId": "updatePolicyCondition",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the policy.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "conditionid",
						"in": "path",
						"description": "ID number of the Policy Condition.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/PolicyCondition" } } },
					"required": true
				},
				"responses": {
					"204": { "description": "Policy condition successfully updated" },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "PolicyV1" ],
				"summary": "Delete policy condition",
				"description": "",
				"operationId": "deletePolicyCondition",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the policy.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "conditionid",
						"in": "path",
						"description": "ID number of the Policy Condition.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"204": { "description": "Policy condition successfully deleted" },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/policies/{id}/policycondition/{conditionid}/criteria/{criteriaid}": {
			"get": {
				"tags": [ "PolicyV1" ],
				"summary": "Get policy condition criteria",
				"description": "",
				"operationId": "getPolicyConditionCriteria",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the policy.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "conditionid",
						"in": "path",
						"description": "ID number of the Policy Condition.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "criteriaid",
						"in": "path",
						"description": "ID number of the Policy Condition Criteria.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Information for the specified policy condition criteria is successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/PolicyConditionCriteria" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "PolicyV1" ],
				"summary": "Update policy condition criteria",
				"description": "",
				"operationId": "updatePolicyConditionCriteria",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the policy.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "conditionid",
						"in": "path",
						"description": "ID number of the Policy Condition.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "criteriaid",
						"in": "path",
						"description": "ID number of the Policy Condition Criteria.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/PolicyConditionCriteria" } }
					},
					"required": true
				},
				"responses": {
					"204": { "description": "Policy condition criteria successfully updated." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "PolicyV1" ],
				"summary": "Delete policy condition criteria",
				"description": "",
				"operationId": "deletePolicyConditionCriteria",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the policy.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "conditionid",
						"in": "path",
						"description": "ID number of the Policy Condition.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "criteriaid",
						"in": "path",
						"description": "ID number of the Policy Condition Criteria.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"204": { "description": "Policy condition criteria successfully deleted" },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/policies/{id}/coverage/{coverageid}": {
			"get": {
				"tags": [ "PolicyV1" ],
				"summary": "Get policy coverage",
				"description": "",
				"operationId": "getPolicyCoverage",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the policy.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "coverageid",
						"in": "path",
						"description": "ID number of the Policy Coverage.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Information on a specified poliy coverage is successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/PolicyCoverage" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "PolicyV1" ],
				"summary": "Update policy coverage",
				"description": "",
				"operationId": "updatePolicyCoverage",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the policy.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "coverageid",
						"in": "path",
						"description": "ID number of the Policy Coverage.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/PolicyCoverage" } } },
					"required": true
				},
				"responses": {
					"204": { "description": "Policy coverage successfully updated." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "PolicyV1" ],
				"summary": "Delete policy coverage",
				"description": "",
				"operationId": "deletePolicyCoverage",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the policy.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "coverageid",
						"in": "path",
						"description": "ID number of the Policy Coverage.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"204": { "description": "Policy coverage successfully deleted" },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/policies/{id}/cession/{cessionid}": {
			"get": {
				"tags": [ "PolicyV1" ],
				"summary": "Get reinsurance cession",
				"description": "",
				"operationId": "getPolicyReinsuranceCession",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the policy.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "cessionid",
						"in": "path",
						"description": "ID number of the Cession.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Reinsurance cession retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ReinsuranceCession" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "PolicyV1" ],
				"summary": "Update reinsurance cession",
				"description": "",
				"operationId": "updatePolicyReinsuranceCession",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the policy.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "cessionid",
						"in": "path",
						"description": "ID number of the Cession.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/ReinsuranceCession" } }
					},
					"required": true
				},
				"responses": {
					"204": { "description": "Reinsurance cession successfully updated" },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "PolicyV1" ],
				"summary": "Delete reinsurance cession",
				"description": "",
				"operationId": "deletePolicyReinsuranceCession",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the policy.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "cessionid",
						"in": "path",
						"description": "ID number of the Cession.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"204": { "description": "Reinsurance cession successfully deleted" },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/policies/{id}/policycondition/{conditionid}/locationconditions": {
			"get": {
				"tags": [ "PolicyV1" ],
				"summary": "Get location conditions",
				"description": "",
				"operationId": "getLocationConditions",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the policy.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "conditionid",
						"in": "path",
						"description": "ID number of the Policy Condition.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Location conditions for a specified policy condition are successfully retrieved.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/LocationCondition" }
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/policies/{id}/surplustreaties": {
			"get": {
				"tags": [ "PolicyV1" ],
				"summary": "Get surplus treaties",
				"description": "",
				"operationId": "getSurplusTreaties",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the policy.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "List of surplus treaties for a specified policy is successfully retrieved.",
						"content": {
							"application/json": {
								"schema": { "type": "array", "items": { "$ref": "#/components/schemas/Treaty" } }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/portfolios/{id}/convertcurrency": {
			"post": {
				"tags": [ "PortfolioV1" ],
				"summary": "Convert currency by portfolio",
				"description": "",
				"operationId": "convertPortfolioCurrency",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "*/*": { "schema": { "$ref": "#/components/schemas/Currency" } } },
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "url containing identifier of the submitted workflow.",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request. The input data is invalid.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/portfolios/{id}/copy": {
			"post": {
				"tags": [ "PortfolioV1" ],
				"summary": "Copy portfolio",
				"description": "",
				"operationId": "copyPortfolio",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/CopyPortfolioInfo" } }
					},
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "url containing identifier of the submitted workflow.",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/portfolios": {
			"get": {
				"tags": [ "PortfolioV1" ],
				"summary": "Get portfolios",
				"description": "",
				"operationId": "searchPortfolios",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"schema": { "type": "string" }
					},
					{
						"name": "q",
						"in": "query",
						"description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
						"schema": { "type": "string" }
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Specify `ASC` to display the results in alphabetical or numerical ascending order or `DESC` to display the results in descending order.",
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "List of portfolios retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/PortfolioSearchResult" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"post": {
				"tags": [ "PortfolioV1" ],
				"summary": "Create portfolio",
				"description": "",
				"operationId": "createPortfolio",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Portfolio" } } },
					"required": true
				},
				"responses": {
					"201": {
						"description": "Portfolio created.",
						"headers": {
							"Location": {
								"description": "Portfolio resource",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/portfolios/{id}": {
			"get": {
				"tags": [ "PortfolioV1" ],
				"summary": "Get portfolio",
				"description": "",
				"operationId": "getPortfolio",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Portfolio information retrieved.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Portfolio" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "PortfolioV1" ],
				"summary": "Update portfolio",
				"description": "",
				"operationId": "updatePortfolio",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Portfolio" } } },
					"required": true
				},
				"responses": {
					"204": { "description": "Portfolio successfully updated." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "PortfolioV1" ],
				"summary": "Delete portfolio",
				"description": "",
				"operationId": "deletePortfolio",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "deleteType",
						"in": "query",
						"description": "The scope of the data deleted: `PORTFOLIO_INFO`, `PORTFOLIO_ALL_ACCOUNTS`, or `PORTFOLIO_EXCEPT_ACCOUNTS`",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [ "PORTFOLIO_INFO", "PORTFOLIO_ALL_ACCOUNTS", "PORTFOLIO_EXCEPT_ACCOUNTS" ]
						}
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "url containing identifier of the submitted workflow.",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/portfolios/{id}/geohaz": {
			"post": {
				"tags": [ "PortfolioV1" ],
				"summary": "Geohazard portfolio",
				"description": "",
				"operationId": "geohazPortfolio",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": { "type": "array", "items": { "$ref": "#/components/schemas/LayerInfo" } }
						}
					},
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "url containing identifier of the submitted workflow.",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/portfolios/{id}/coordinate": {
			"get": {
				"tags": [ "PortfolioV1" ],
				"summary": "Get portfolio locations",
				"description": "",
				"operationId": "getCoordinateByLatitudeAndLongitudePortfolio",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "latitude",
						"in": "query",
						"description": "Latitude",
						"schema": { "type": "number", "format": "double" }
					},
					{
						"name": "longitude",
						"in": "query",
						"description": "Longitude",
						"schema": { "type": "number", "format": "double" }
					}
				],
				"responses": {
					"200": {
						"description": "Location coordinate retrieved.",
						"content": {
							"application/json": {
								"schema": { "type": "array", "items": { "$ref": "#/components/schemas/Coordinate" } }
							}
						}
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/portfolios/{id}/coordinates": {
			"get": {
				"tags": [ "PortfolioV1" ],
				"summary": "Get location coordinates by portfolio",
				"description": "",
				"operationId": "getCoordinatesByPortfolio",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Location coordinates retrieved.",
						"content": {
							"application/json": {
								"schema": { "type": "array", "items": { "$ref": "#/components/schemas/Coordinate" } }
							}
						}
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/portfolios/count": {
			"get": {
				"tags": [ "PortfolioV1" ],
				"summary": "Count portfolios",
				"description": "",
				"operationId": "getExposureCountPortfolio",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Portfolio count successfully retrieved.",
						"content": { "application/json": { "schema": { "type": "integer", "format": "int64" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/portfolios/{id}/analyses": {
			"get": {
				"tags": [ "PortfolioV1" ],
				"summary": "Get analyses by portfolio",
				"description": "",
				"operationId": "getPortfolioAnalysesResults",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "q",
						"in": "query",
						"description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
						"schema": { "type": "string" }
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Specify `ASC` to display the results in alphabetical or numerical ascending order or `DESC` to display the results in descending order.",
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "Analyses for exposure successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/AnalysisSearchResult" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"deprecated": true,
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/portfolios/{id}/metrics": {
			"get": {
				"tags": [ "PortfolioV1" ],
				"summary": "Get metrics by portfolio",
				"description": "",
				"operationId": "getPortfolioMetrics",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Metrics for a specified portfolio are successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/PortfolioMetrics" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/portfolios/{id}/filteredaccounts": {
			"put": {
				"tags": [ "PortfolioV1" ],
				"summary": "Manage filtered accounts",
				"description": "",
				"operationId": "manageFilteredAccounts",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"*/*": { "schema": { "$ref": "#/components/schemas/PortfolioFilteredAccountsInput" } }
					},
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine)."
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/portfolios/{id}/accounts": {
			"get": {
				"tags": [ "PortfolioV1" ],
				"summary": "Get accounts by portfolio",
				"description": "",
				"operationId": "searchPortfolioAccounts",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"schema": { "type": "string" }
					},
					{
						"name": "q",
						"in": "query",
						"description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
						"schema": { "type": "string" }
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Specify `ASC` to display the results in alphabetical or numerical ascending order or `DESC` to display the results in descending order.",
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "List of accounts retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/AccountSearchResult" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "PortfolioV1" ],
				"summary": "Manage accounts by portfolio",
				"description": "",
				"operationId": "managePortfolioAccounts",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/PortfolioAccountsInput" } }
					},
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine)."
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/portfolios/{id}/process": {
			"post": {
				"tags": [ "PortfolioV1" ],
				"summary": "Analyze portfolio",
				"description": "",
				"operationId": "processPortfolio",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProcessInput" } } },
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "url containing identifier of the submitted workflow.",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Add to Analysis Builder\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"deprecated": true,
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/portfolios/{id}/summary_report": {
			"post": {
				"tags": [ "PortfolioV1" ],
				"summary": "Generate summary report by portfolio",
				"description": "",
				"operationId": "summaryReportPortfolio",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/ExposureSummaryReportInput" } }
					},
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "url containing identifier of the submitted workflow.",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Download Report\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/producers": {
			"get": {
				"tags": [ "ProducerV1" ],
				"summary": "Get producers",
				"description": "",
				"operationId": "getProducers",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "q",
						"in": "query",
						"description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
						"schema": { "type": "string" }
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "List of producers in the data source is successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ProducerSearchResult" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Contract Tags\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"post": {
				"tags": [ "ProducerV1" ],
				"summary": "Create producer",
				"description": "",
				"operationId": "createProducer",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Producer" } } },
					"required": true
				},
				"responses": {
					"201": {
						"description": "New producer is created in the data source is successfully.",
						"headers": {
							"Location": {
								"description": "location of the new Producer ",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Contract Tags\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"409": {
						"description": "409",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/producers/{id}": {
			"get": {
				"tags": [ "ProducerV1" ],
				"summary": "Get producer by ID",
				"description": "",
				"operationId": "getProducerById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the Producer.",
						"required": true,
						"schema": { "maxLength": 2147483647, "minLength": 1, "type": "string" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Producer by Id in the data source is successfully retrieved.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Producer" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Contract Tags\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "ProducerV1" ],
				"summary": "Update producer",
				"description": "",
				"operationId": "updateProducer",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "maxLength": 2147483647, "minLength": 1, "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Producer" } } },
					"required": true
				},
				"responses": {
					"204": { "description": "Producer is updated in the data source is successfully." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Contract Tags\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "ProducerV1" ],
				"summary": "Delete producer",
				"description": "",
				"operationId": "deleteProducer",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "maxLength": 2147483647, "minLength": 1, "type": "string" }
					}
				],
				"responses": {
					"204": { "description": "Producer is deleted from the data source is successfully." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Contract Tags\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/steppolicies/copy": {
			"post": {
				"tags": [ "Step PolicyV1" ],
				"summary": "Copy step policy",
				"description": "",
				"operationId": "copyStepPolicy",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/CopyStepPolicyInfo" } }
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "Existing step policy is successfully copied.",
						"headers": {
							"Location": {
								"description": "Step policy id of the copy step policy",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/steppolicies": {
			"get": {
				"tags": [ "Step PolicyV1" ],
				"summary": "Get step policies",
				"description": "",
				"operationId": "searchStepPolicies",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "q",
						"in": "query",
						"description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
						"schema": { "type": "string" }
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "List of step policies is successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/StepPolicySearchResult" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"post": {
				"tags": [ "Step PolicyV1" ],
				"summary": "Create step policy",
				"description": "",
				"operationId": "createStepPolicy",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/StepPolicy" } } },
					"required": true
				},
				"responses": {
					"201": {
						"description": "Step Policy is successfully created.",
						"headers": {
							"Location": {
								"description": "Location of the new step policy",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/steppolicies/{id}": {
			"get": {
				"tags": [ "Step PolicyV1" ],
				"summary": "Get step policy",
				"description": "",
				"operationId": "getStepPolicy",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the step policy.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Information on a specified step policy is successfully retrieved.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/StepPolicy" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "Step PolicyV1" ],
				"summary": "Update step policy",
				"description": "",
				"operationId": "updateStepPolicy",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the step policy.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/StepPolicy" } } },
					"required": true
				},
				"responses": {
					"204": { "description": "Step policy successfully updated" },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "Step PolicyV1" ],
				"summary": "Delete step policy",
				"description": "",
				"operationId": "deleteStepPolicy",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the step policy.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"204": { "description": "Step policy successfully deleted" },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/treaties/lob/batch": {
			"post": {
				"tags": [ "TreatyV1" ],
				"summary": "Batch manage treaty LOBs",
				"description": "",
				"operationId": "batchProcessTreatyLobs",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": { "type": "array", "items": { "$ref": "#/components/schemas/BatchRequest" } }
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Treaty batch executed.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"metadata": {
												"type": "object",
												"additionalProperties": {
													"type": "array",
													"items": { "type": "object" }
												}
											},
											"status": { "type": "integer", "format": "int32" },
											"length": { "type": "integer", "format": "int32" },
											"location": { "type": "string", "format": "uri" },
											"language": {
												"type": "object",
												"properties": {
													"language": { "type": "string" },
													"script": { "type": "string" },
													"country": { "type": "string" },
													"variant": { "type": "string" },
													"extensionKeys": {
														"uniqueItems": true,
														"type": "array",
														"items": { "type": "string" }
													},
													"unicodeLocaleAttributes": {
														"uniqueItems": true,
														"type": "array",
														"items": { "type": "string" }
													},
													"unicodeLocaleKeys": {
														"uniqueItems": true,
														"type": "array",
														"items": { "type": "string" }
													},
													"iso3Language": { "type": "string" },
													"iso3Country": { "type": "string" },
													"displayLanguage": { "type": "string" },
													"displayScript": { "type": "string" },
													"displayCountry": { "type": "string" },
													"displayVariant": { "type": "string" },
													"displayName": { "type": "string" }
												}
											},
											"statusInfo": {
												"type": "object",
												"properties": {
													"family": {
														"type": "string",
														"enum": [
															"INFORMATIONAL",
															"SUCCESSFUL",
															"REDIRECTION",
															"CLIENT_ERROR",
															"SERVER_ERROR",
															"OTHER"
														]
													},
													"statusCode": { "type": "integer", "format": "int32" },
													"reasonPhrase": { "type": "string" }
												}
											},
											"mediaType": {
												"type": "object",
												"properties": {
													"type": { "type": "string" },
													"subtype": { "type": "string" },
													"parameters": {
														"type": "object",
														"additionalProperties": { "type": "string" }
													},
													"wildcardType": { "type": "boolean" },
													"wildcardSubtype": { "type": "boolean" }
												}
											},
											"allowedMethods": {
												"uniqueItems": true,
												"type": "array",
												"items": { "type": "string" }
											},
											"cookies": {
												"type": "object",
												"additionalProperties": {
													"type": "object",
													"properties": {
														"name": { "type": "string" },
														"value": { "type": "string" },
														"version": { "type": "integer", "format": "int32" },
														"path": { "type": "string" },
														"domain": { "type": "string" },
														"comment": { "type": "string" },
														"maxAge": { "type": "integer", "format": "int32" },
														"expiry": { "type": "string", "format": "date-time" },
														"secure": { "type": "boolean" },
														"httpOnly": { "type": "boolean" }
													}
												}
											},
											"entityTag": {
												"type": "object",
												"properties": {
													"value": { "type": "string" },
													"weak": { "type": "boolean" }
												}
											},
											"stringHeaders": {
												"type": "object",
												"additionalProperties": {
													"type": "array",
													"items": { "type": "string" }
												}
											},
											"lastModified": { "type": "string", "format": "date-time" },
											"date": { "type": "string", "format": "date-time" },
											"headers": {
												"type": "object",
												"additionalProperties": {
													"type": "array",
													"items": { "type": "object" }
												}
											},
											"entity": { "type": "object" },
											"links": {
												"uniqueItems": true,
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"type": { "type": "string" },
														"params": {
															"type": "object",
															"additionalProperties": { "type": "string" }
														},
														"uri": { "type": "string", "format": "uri" },
														"title": { "type": "string" },
														"uriBuilder": { "type": "object" },
														"rel": { "type": "string" },
														"rels": { "type": "array", "items": { "type": "string" } }
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Treaties\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/treaties/{id}/convertcurrency": {
			"post": {
				"tags": [ "TreatyV1" ],
				"summary": "Convert currency by treaty",
				"description": "",
				"operationId": "convertCurrencyTreaty",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the treaty.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "*/*": { "schema": { "$ref": "#/components/schemas/Currency" } } },
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "workflowId",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request. The input data is invalid.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Treaties\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/treaties/{id}/copy": {
			"post": {
				"tags": [ "TreatyV1" ],
				"summary": "Copy treaty",
				"description": "",
				"operationId": "copyTreaty",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the treaty.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/CopyTreatyInfo" } } },
					"required": true
				},
				"responses": {
					"201": {
						"description": "Treaty copied.",
						"headers": {
							"Location": {
								"description": "Treaty",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Treaties\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/treaties/{treatyId}/lossoccurrences": {
			"get": {
				"tags": [ "TreatyV1" ],
				"summary": "Get loss occurrences by treaty",
				"description": "",
				"operationId": "getLossOccurrences",
				"parameters": [
					{
						"name": "treatyId",
						"in": "path",
						"description": "Treaty Id.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "List of treaty loss occurrences retrieved.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/LossOccurrence" }
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Treaties\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"post": {
				"tags": [ "TreatyV1" ],
				"summary": "Create loss occurrence",
				"description": "",
				"operationId": "createLossOccurrence",
				"parameters": [
					{
						"name": "treatyId",
						"in": "path",
						"description": "Treaty Id.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/LossOccurrence" } } },
					"required": true
				},
				"responses": {
					"201": {
						"description": "treaty loss occurrence created.",
						"headers": {
							"Location": {
								"description": "treaty loss occurrence",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Treaties\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/treaties": {
			"get": {
				"tags": [ "TreatyV1" ],
				"summary": "Get treaties",
				"description": "",
				"operationId": "getTreatiesByFilters",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "q",
						"in": "query",
						"description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
						"schema": { "type": "string" }
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "List of treaties retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/TreatySearchResult" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Treaties\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"post": {
				"tags": [ "TreatyV1" ],
				"summary": "Create treaty",
				"description": "",
				"operationId": "createTreaty",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Treaty" } } },
					"required": true
				},
				"responses": {
					"201": {
						"description": "Treaty created.",
						"headers": {
							"Location": {
								"description": "Treaty",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Treaties\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/treaties/{id}/lob": {
			"post": {
				"tags": [ "TreatyV1" ],
				"summary": "Create LOB by treaty",
				"description": "",
				"operationId": "createTreatyLob",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the location.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/LineOfBusiness" } } },
					"required": true
				},
				"responses": {
					"201": {
						"description": "Treaty line of business created.",
						"headers": {
							"Location": {
								"description": "location of the new policy condition criteria",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Treaties\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/treaties/{treatyId}/lossoccurrences/{lossOccurrenceId}": {
			"get": {
				"tags": [ "TreatyV1" ],
				"summary": "Get loss occurrence by treaty",
				"description": "",
				"operationId": "getLossOccurrence",
				"parameters": [
					{
						"name": "treatyId",
						"in": "path",
						"description": "Treaty Id.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "lossOccurrenceId",
						"in": "path",
						"description": "Treaty loss occurrence Id.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Treaty loss occurrences retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/LossOccurrence" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Treaties\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "TreatyV1" ],
				"summary": "Update loss occurrence",
				"description": "",
				"operationId": "updateLossOccurrence",
				"parameters": [
					{
						"name": "treatyId",
						"in": "path",
						"description": "Treaty Id.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "lossOccurrenceId",
						"in": "path",
						"description": "Treaty loss occurrence Id.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/LossOccurrence" } } },
					"required": true
				},
				"responses": {
					"204": { "description": "Treaty loss occurrence updated." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Treaties\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "TreatyV1" ],
				"summary": "Delete loss occurrence",
				"description": "",
				"operationId": "deleteLossOccurrence",
				"parameters": [
					{
						"name": "treatyId",
						"in": "path",
						"description": "Treaty Id.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "lossOccurrenceId",
						"in": "path",
						"description": "Treaty loss occurrence Id.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"204": { "description": "Treaty loss occurrence deleted." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Treaties\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/treaties/{id}": {
			"get": {
				"tags": [ "TreatyV1" ],
				"summary": "Get treaty",
				"description": "",
				"operationId": "getTreaty",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Treaty Id.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Treaty retrieved.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Treaty" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Treaties\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "TreatyV1" ],
				"summary": "Update treaty",
				"description": "",
				"operationId": "updateTreaty",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the treaty.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Treaty" } } },
					"required": true
				},
				"responses": {
					"204": { "description": "Treaty updated." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Treaties\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "TreatyV1" ],
				"summary": "Delete treaty",
				"description": "",
				"operationId": "deleteTreaty",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "id",
						"in": "path",
						"description": "Treaty Id.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"204": { "description": "Treaty deleted." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Treaties\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/treaties/{id}/lob/{lobid}": {
			"get": {
				"tags": [ "TreatyV1" ],
				"summary": "Get LOB by treaty",
				"description": "",
				"operationId": "getTreatyLob",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the treaty.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "lobid",
						"in": "path",
						"description": "ID number of the lob.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Treaty line of business retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/LineOfBusiness" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Treaties\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "TreatyV1" ],
				"summary": "Delete treaty LOB",
				"description": "",
				"operationId": "deleteTreatyLob",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the treaty.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "lobid",
						"in": "path",
						"description": "ID number of the lob.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"204": { "description": "Treaty line of business deleted." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Treaties\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/treaties/count": {
			"get": {
				"tags": [ "TreatyV1" ],
				"summary": "Count treaties",
				"description": "",
				"operationId": "getExposureCountTreaty",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Treaty count successfully retrieved.",
						"content": { "application/json": { "schema": { "type": "integer", "format": "int64" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Treaties\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/treaties/getbytype": {
			"get": {
				"tags": [ "TreatyV1" ],
				"summary": "Get treaties",
				"description": "",
				"operationId": "getTreaties",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "type",
						"in": "query",
						"description": "Type of treaty.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "exposuretype",
						"in": "query",
						"description": "Type of exposure. Specify 'POL' for policy abd 'LOC' for location.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "List of treaties retrieved.",
						"content": {
							"application/json": {
								"schema": { "type": "array", "items": { "$ref": "#/components/schemas/Treaty" } }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Treaties\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/underwriters": {
			"get": {
				"tags": [ "UnderwriterV1" ],
				"summary": "Get underwriters",
				"description": "",
				"operationId": "getUnderwriters",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "q",
						"in": "query",
						"description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
						"schema": { "type": "string" }
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Specify comma-delimited field names followed by `ASC` (to display the results in alphabetical or numerical ascending order) or `DESC` (to display the results in descending order.)",
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "List of underwriters in the data source is successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/UnderwriterSearchResult" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Contract Tags\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"post": {
				"tags": [ "UnderwriterV1" ],
				"summary": "Create underwriter",
				"description": "",
				"operationId": "createUnderwriter",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnderWriter" } } },
					"required": true
				},
				"responses": {
					"201": {
						"description": "Created. New underwriter is created in the data source is successfully.",
						"headers": {
							"Location": {
								"description": "Location of the new Underwriter",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Contract Tags\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"409": {
						"description": "Conflict. Resource already exists.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/underwriters/{id}": {
			"get": {
				"tags": [ "UnderwriterV1" ],
				"summary": "Get underwriter",
				"description": "",
				"operationId": "getUnderwriterById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the underwriter.",
						"required": true,
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Underwriter by Id in the data source is successfully retrieved.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnderWriter" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Contract Tags\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "Underwriter not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "UnderwriterV1" ],
				"summary": "Update underwriter",
				"description": "",
				"operationId": "updateUnderwriter",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "id",
						"in": "path",
						"description": "ID of the underwriter.",
						"required": true,
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/UnderWriter" } } },
					"required": true
				},
				"responses": {
					"204": { "description": "Underwriter is updated in the data source is successfully." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Contract Tags\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "UnderwriterV1" ],
				"summary": "Delete underwriter",
				"description": "",
				"operationId": "deleteUnderwriter",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "id",
						"in": "path",
						"description": "ID of the underwriter.",
						"required": true,
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"204": { "description": "Underwriter is deleted from the data source is successfully." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Contract Tags\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/utils/convert/criteriatoquery": {
			"post": {
				"tags": [ "UtilityV1" ],
				"summary": "Convert policy condition to query",
				"description": "",
				"operationId": "convertPolicyCriteriaToQueryString",
				"requestBody": {
					"description": "List of policy condition criteria.",
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": { "$ref": "#/components/schemas/PolicyConditionCriteria" }
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Policy condition criteria is successfully converted into a query string.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/QueryEntity" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/utils/convert/portfoliocriteriatoquery": {
			"post": {
				"tags": [ "UtilityV1" ],
				"summary": "Convert portfolio condition to query",
				"description": "",
				"operationId": "convertPortfolioCriteriaToQueryString",
				"requestBody": {
					"description": "List of policy condition criteria.",
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": { "$ref": "#/components/schemas/PortfolioConditionCriteria" }
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Policy condition criteria is successfully converted into a query string.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/QueryEntity" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/accounts/{id}/convertcurrency": {
			"post": {
				"tags": [ "AccountV2" ],
				"summary": "Convert currency by account",
				"description": "",
				"operationId": "convertAccountCurrencyv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "*/*": { "schema": { "$ref": "#/components/schemas/Currency" } } },
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "workflowId",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request. The input data is invalid.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Accounts\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/accounts/{id}/copy": {
			"post": {
				"tags": [ "AccountV2" ],
				"summary": "Copy account",
				"description": "",
				"operationId": "copyAccountsv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/CopyAccountInfo" } } },
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "workflowId",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Accounts\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/accounts": {
			"get": {
				"tags": [ "AccountV2" ],
				"summary": "Get accounts",
				"description": "",
				"operationId": "searchAccountsv2",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"schema": { "type": "string" }
					},
					{
						"name": "q",
						"in": "query",
						"description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
						"schema": { "type": "string" }
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Specify `ASC` to display the results in alphabetical or numerical ascending order or `DESC` to display the results in descending order.",
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "portfoliofilter",
						"in": "query",
						"description": "If This search was triggered from portfolio starting at _0_.",
						"schema": { "type": "boolean" }
					},
					{
						"name": "policyExpirationDays",
						"in": "query",
						"schema": { "type": "integer", "format": "int32", "default": 120 }
					}
				],
				"responses": {
					"200": {
						"description": "List of accounts successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/AccountSearchResult" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Accounts\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"post": {
				"tags": [ "AccountV2" ],
				"summary": "Create account",
				"description": "",
				"operationId": "createAccountv2",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Account" } } },
					"required": true
				},
				"responses": {
					"201": {
						"description": "Account created.",
						"headers": {
							"Location": {
								"description": "Account resource",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Accounts\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/accounts/{id}": {
			"get": {
				"tags": [ "AccountV2" ],
				"summary": "Get account",
				"description": "",
				"operationId": "getAccountv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Account information successfully retrieved.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Account" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Accounts\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "AccountV2" ],
				"summary": "Update account",
				"description": "",
				"operationId": "updateAccountv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Account" } } },
					"required": true
				},
				"responses": {
					"204": { "description": "Validation updated." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Accounts\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "AccountV2" ],
				"summary": "Delete account",
				"description": "",
				"operationId": "deleteAccountv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "workflowId",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Accounts\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/accounts/{id}/validatemedia": {
			"get": {
				"tags": [ "AccountV2" ],
				"summary": "Get validation file by account",
				"description": "",
				"operationId": "downloadValidationAccountFilev2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Validation retrieved.",
						"content": {
							"*/*": { "schema": { "type": "object" } },
							"application/json": { "schema": { "type": "object" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": {
							"*/*": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } },
							"application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } }
						}
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Accounts\" action.",
						"content": {
							"*/*": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } },
							"application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } }
						}
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/accounts/{id}/geohaz": {
			"post": {
				"tags": [ "AccountV2" ],
				"summary": "Geohazard account",
				"description": "",
				"operationId": "geohazAccountv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"description": "Layers that define geocoding or hazard lookup jobs.",
					"content": {
						"application/json": {
							"schema": { "type": "array", "items": { "$ref": "#/components/schemas/LayerInfo" } }
						}
					},
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "url containing identifier of the submitted workflow.",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Accounts\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/accounts/{id}/analyses": {
			"get": {
				"tags": [ "AccountV2" ],
				"summary": "Get analyses by account",
				"description": "",
				"operationId": "getAccountAnalysesResultsV2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "q",
						"in": "query",
						"description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
						"schema": { "type": "string" }
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Specify `ASC` to display the results in alphabetical or numerical ascending order or `DESC` to display the results in descending order.",
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "userName",
						"in": "query",
						"description": "Name of user that ran the analysis.",
						"schema": { "type": "string" }
					},
					{
						"name": "runDate",
						"in": "query",
						"description": "Date that the analysis was run.",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Analyses for exposure successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/AnalysisSearchResultV2" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/accounts/{id}/metrics": {
			"get": {
				"tags": [ "AccountV2" ],
				"summary": "Get metrics by account",
				"description": "",
				"operationId": "getAccountMetricsv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Metrics for a specified account are successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/AccountMetrics" } }
						}
					},
					"400": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Accounts\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/accounts/{id}/coordinate": {
			"get": {
				"tags": [ "AccountV2" ],
				"summary": "Get account locations",
				"description": "",
				"operationId": "getCoordinateByLatitudeAndLongitudeAccountv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "latitude",
						"in": "query",
						"description": "Latitude",
						"schema": { "type": "number", "format": "double" }
					},
					{
						"name": "longitude",
						"in": "query",
						"description": "Longitude",
						"schema": { "type": "number", "format": "double" }
					}
				],
				"responses": {
					"200": {
						"description": "Location coordinate retrieved.",
						"content": {
							"application/json": {
								"schema": { "type": "array", "items": { "$ref": "#/components/schemas/Coordinate" } }
							}
						}
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Accounts\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/accounts/{id}/coordinates": {
			"get": {
				"tags": [ "AccountV2" ],
				"summary": "Get location coordinates by account",
				"description": "",
				"operationId": "getCoordinatesByAccountv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "List of location coordinates retrieved.",
						"content": {
							"application/json": {
								"schema": { "type": "array", "items": { "$ref": "#/components/schemas/Coordinate" } }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Accounts\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/accounts/{id}/countries": {
			"get": {
				"tags": [ "AccountV2" ],
				"summary": "Get countries by account",
				"description": "",
				"operationId": "getCountriesByAccountv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "List of countries retrieved.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/CountryMetrics" }
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Accounts\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/accounts/count": {
			"get": {
				"tags": [ "AccountV2" ],
				"summary": "Count accounts",
				"description": "",
				"operationId": "getExposureCountAccountv2",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Account count successfully retrieved.",
						"content": { "application/json": { "schema": { "type": "integer", "format": "int64" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Accounts\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/accounts/{id}/locationcount": {
			"get": {
				"tags": [ "AccountV2" ],
				"summary": "Count locations by account",
				"description": "",
				"operationId": "getLocationCountv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Number of locations is successfully retrieved.",
						"content": { "application/json": { "schema": { "type": "integer", "format": "int64" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/accounts/{id}/surplustreatieslocation": {
			"get": {
				"tags": [ "AccountV2" ],
				"summary": "Get location level surplus treaties for  account",
				"description": "",
				"operationId": "getLocationSurplusTreatiesv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Location level surplus treaties retrieved.",
						"content": {
							"application/json": {
								"schema": { "type": "array", "items": { "$ref": "#/components/schemas/Treaty" } }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Accounts\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/accounts/{id}/policycount": {
			"get": {
				"tags": [ "AccountV2" ],
				"summary": "Count policies by account",
				"description": "",
				"operationId": "getPolicyCountv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Number of policies is successfully retrieved.",
						"content": { "application/json": { "schema": { "type": "integer", "format": "int64" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/accounts/{id}/sites": {
			"get": {
				"tags": [ "AccountV2" ],
				"summary": "Get site names for  account",
				"description": "",
				"operationId": "getSiteNamesv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "List of site names retrieved.",
						"content": {
							"application/json": { "schema": { "type": "array", "items": { "type": "string" } } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Accounts\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/accounts/{id}/move": {
			"post": {
				"tags": [ "AccountV2" ],
				"summary": "Move account to EDM",
				"description": "",
				"operationId": "moveAccountv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "option",
						"in": "query",
						"description": "Include (`1`) or exclude (`0`) locations in moved account.",
						"schema": { "maximum": 1, "minimum": 0, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"201": {
						"description": "Account successfully moved.",
						"headers": {
							"Location": {
								"description": "URI for newly created account",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Accounts\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/accounts/{id}/process": {
			"post": {
				"tags": [ "AccountV2" ],
				"summary": "Analyze account",
				"description": "",
				"operationId": "processAccountv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProcessInputV2" } } },
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "url containing identifier of the submitted workflow.",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Add to Analysis Builder\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/accounts/{id}/summary_report": {
			"post": {
				"tags": [ "AccountV2" ],
				"summary": "Generate summary report by account",
				"description": "",
				"operationId": "summaryReportAccountv2",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/ExposureSummaryReportInput" } }
					},
					"required": true
				},
				"responses": {
					"202": {
						"description": "Job accepted.",
						"headers": {
							"Location": {
								"description": "url containing identifier of the submitted workflow.",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Download Report\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/accounts/{id}/validate": {
			"get": {
				"tags": [ "AccountV2" ],
				"summary": "Validate account",
				"description": "",
				"operationId": "validateAccountv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the account.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Validation retrieved.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/LocationConditionValidationInfo" }
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Accounts\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/aggregate-portfolios/{id}/convert-currency": {
			"post": {
				"tags": [ "Aggregate PortfolioV2" ],
				"summary": "Convert currency by aggregate portfolio",
				"description": "",
				"operationId": "convertAggregatePortfolioCurrencyv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the aggregate portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "*/*": { "schema": { "$ref": "#/components/schemas/Currency" } } },
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "workflowId",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request. The input data is invalid.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Aggregate Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/aggregate-portfolios/{id}/copy": {
			"post": {
				"tags": [ "Aggregate PortfolioV2" ],
				"summary": "Copy aggregate portfolio",
				"description": "",
				"operationId": "copyAggregatePortfoliov2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the aggregate portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/CopyAggregatePortfolioInfo" } }
					},
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "workflowId",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Aggregate Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/aggregate-portfolios": {
			"get": {
				"tags": [ "Aggregate PortfolioV2" ],
				"summary": "Get aggregate portfolios",
				"description": "",
				"operationId": "searchAggregatePortfoliosv2",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"schema": { "type": "string" }
					},
					{
						"name": "q",
						"in": "query",
						"description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
						"schema": { "type": "string" }
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Specify `ASC` to display the results in alphabetical or numerical ascending order or `DESC` to display the results in descending order.",
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "List of aggregate portfolios retrieved.",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/AggregatePortfolioSearchResult" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Aggregate Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"post": {
				"tags": [ "Aggregate PortfolioV2" ],
				"summary": "Create aggregate portfolio",
				"description": "",
				"operationId": "createAggregatePortfoliov2",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/AggregatePortfolio" } }
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "Aggregate portfolio created.",
						"headers": {
							"Location": {
								"description": "Aggregate portfolio resource",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Aggregate Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/aggregate-portfolios/{id}": {
			"get": {
				"tags": [ "Aggregate PortfolioV2" ],
				"summary": "Get aggregate portfolio",
				"description": "",
				"operationId": "getAggregatePortfolioByIdv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the aggregate portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Aggregate portfolio retrieved.",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/AggregatePortfolioSearchItem" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Aggregate Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "Aggregate PortfolioV2" ],
				"summary": "Update aggregate portfolio",
				"description": "",
				"operationId": "updateAggregatePortfoliov2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the aggregate portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/AggregatePortfolio" } }
					},
					"required": true
				},
				"responses": {
					"204": { "description": "Aggregate portfolio successfully updated." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Aggregate Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "Aggregate PortfolioV2" ],
				"summary": "Delete aggregate portfolio",
				"description": "",
				"operationId": "deleteAggregatePortfoliov2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "url containing identifier of the submitted workflow.",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Aggregate Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/aggregate-portfolios/{id}/analyses": {
			"get": {
				"tags": [ "Aggregate PortfolioV2" ],
				"summary": "Get analyses by aggregate portfolio",
				"description": "",
				"operationId": "getAggregatePortfolioAnalysesResultsv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the aggregate portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "q",
						"in": "query",
						"description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
						"schema": { "type": "string" }
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Specify `ASC` to display the results in alphabetical or numerical ascending order or `DESC` to display the results in descending order.",
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "userName",
						"in": "query",
						"description": "Name of user that ran the analysis.",
						"schema": { "type": "string" }
					},
					{
						"name": "runDate",
						"in": "query",
						"description": "Date that the analysis was run.",
						"schema": { "type": "string" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "Analyses for exposure successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/AnalysisSearchResultV2" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/aggregate-portfolios/{id}/metrics": {
			"get": {
				"tags": [ "Aggregate PortfolioV2" ],
				"summary": "Get metrics by aggregate portfolio",
				"description": "",
				"operationId": "getAggregatePortfolioMetricsv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the aggregate portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Metrics for a specified aggregate portfolio are successfully retrieved.",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/AggregatePortfolioMetrics" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Aggregate Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/aggregate-portfolios/{id}/treaties": {
			"get": {
				"tags": [ "Aggregate PortfolioV2" ],
				"summary": "Get treaties by aggregate portfolio",
				"description": "",
				"operationId": "getAggregatePortfolioTreatiesv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the aggregate portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Treaties applicable for a specified aggregate portfolio are successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/TreatySearchResult" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Aggregate Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/aggregate-portfolios/{id}/countries": {
			"get": {
				"tags": [ "Aggregate PortfolioV2" ],
				"summary": "Get countries by aggregate portfolio",
				"description": "",
				"operationId": "getCountriesByAggregatePortfoliov2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the aggregate portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "List of countries retrieved.",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/AggregatePortfolioCountryMetrics" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Aggregate Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/aggregate-portfolios/{id}/profiles": {
			"get": {
				"tags": [ "Aggregate PortfolioV2" ],
				"summary": "Get ALM profiles by aggregate portfolio",
				"description": "",
				"operationId": "getDefaultProfilesv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the aggregate portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "softwareVersionCode",
						"in": "query",
						"description": "Software version code.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "includeHD",
						"in": "query",
						"description": "Indicator to include HD profiles",
						"schema": { "type": "boolean" }
					}
				],
				"responses": {
					"200": {
						"description": "List of ALM profiles retrieved.",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/DefaultAlmProfilesResponse" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Aggregate Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/aggregate-portfolios/count": {
			"get": {
				"tags": [ "Aggregate PortfolioV2" ],
				"summary": "Count aggregate portfolios",
				"description": "",
				"operationId": "getExposureCountAggregatePortfoliov2",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Aggregate portfolio count successfully retrieved.",
						"content": { "application/json": { "schema": { "type": "integer", "format": "int64" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Aggregate Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/aggregate-portfolios/{id}/process": {
			"post": {
				"tags": [ "Aggregate PortfolioV2" ],
				"summary": "Analyze aggregate portfolio",
				"description": "",
				"operationId": "processAggregatePortfoliov2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the aggregate portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/AlmProcessInput" } } },
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "url containing identifier of the submitted workflow.",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Add to Analysis Builder\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/aggregate-portfolios/{id}/aggregate-exposures-lists": {
			"get": {
				"tags": [ "Aggregate PortfolioV2" ],
				"summary": "Get aggregate exposures by aggregate",
				"description": "",
				"operationId": "searchAggregateExposuresv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the aggregate portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "countryCode",
						"in": "query",
						"description": "Country to filter by.",
						"schema": { "type": "string" }
					},
					{
						"name": "resolution",
						"in": "query",
						"description": "Resolution to filter by.",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "List of aggregate exposure values retrieved.",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/AggregateExposuresListSearchResult" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Aggregate Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/exposurebatches": {
			"post": {
				"tags": [ "PortfolioV2" ],
				"summary": "Manage portfolio exposures in batch",
				"description": "",
				"operationId": "executeBatchOperationv2",
				"parameters": [
					{
						"name": "operation",
						"in": "query",
						"description": "Operation of batch resource",
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": { "type": "array", "items": { "$ref": "#/components/schemas/BatchRequest" } }
						}
					}
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine)."
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/portfolios/{id}/convertcurrency": {
			"post": {
				"tags": [ "PortfolioV2" ],
				"summary": "Convert currency by portfolio",
				"description": "",
				"operationId": "convertPortfolioCurrencyv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "*/*": { "schema": { "$ref": "#/components/schemas/Currency" } } },
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "url containing identifier of the submitted workflow.",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request. The input data is invalid.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/portfolios/{id}/copy": {
			"post": {
				"tags": [ "PortfolioV2" ],
				"summary": "Copy portfolio",
				"description": "",
				"operationId": "copyPortfoliov2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/CopyPortfolioInfo" } }
					},
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "url containing identifier of the submitted workflow.",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/portfolios": {
			"get": {
				"tags": [ "PortfolioV2" ],
				"summary": "Get portfolios",
				"description": "",
				"operationId": "searchPortfoliosv2",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"schema": { "type": "string" }
					},
					{
						"name": "q",
						"in": "query",
						"description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
						"schema": { "type": "string" }
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Specify `ASC` to display the results in alphabetical or numerical ascending order or `DESC` to display the results in descending order.",
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "List of portfolios retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/PortfolioSearchResult" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"post": {
				"tags": [ "PortfolioV2" ],
				"summary": "Create portfolio",
				"description": "",
				"operationId": "createPortfoliov2",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Portfolio" } } },
					"required": true
				},
				"responses": {
					"201": {
						"description": "Portfolio created.",
						"headers": {
							"Location": {
								"description": "Portfolio resource",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/portfolios/{id}": {
			"get": {
				"tags": [ "PortfolioV2" ],
				"summary": "Get portfolio",
				"description": "",
				"operationId": "getPortfoliov2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Portfolio information retrieved.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Portfolio" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "PortfolioV2" ],
				"summary": "Update portfolio",
				"description": "",
				"operationId": "updatePortfoliov2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Portfolio" } } },
					"required": true
				},
				"responses": {
					"204": { "description": "Portfolio successfully updated." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "PortfolioV2" ],
				"summary": "Delete portfolio",
				"description": "",
				"operationId": "deletePortfoliov2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "deleteType",
						"in": "query",
						"description": "The scope of the data deleted: `PORTFOLIO_INFO`, `PORTFOLIO_ALL_ACCOUNTS`, or `PORTFOLIO_EXCEPT_ACCOUNTS`",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [ "PORTFOLIO_INFO", "PORTFOLIO_ALL_ACCOUNTS", "PORTFOLIO_EXCEPT_ACCOUNTS" ]
						}
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "url containing identifier of the submitted workflow.",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/portfolios/{id}/geohaz": {
			"post": {
				"tags": [ "PortfolioV2" ],
				"summary": "Geohazards portfolio",
				"description": "",
				"operationId": "geohazPortfoliov2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": { "type": "array", "items": { "$ref": "#/components/schemas/LayerInfo" } }
						}
					},
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "url containing identifier of the submitted workflow.",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/portfolios/{id}/coordinate": {
			"get": {
				"tags": [ "PortfolioV2" ],
				"summary": "Get portfolio locations",
				"description": "",
				"operationId": "getCoordinateByLatitudeAndLongitudePortfoliov2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "latitude",
						"in": "query",
						"description": "Latitude",
						"schema": { "type": "number", "format": "double" }
					},
					{
						"name": "longitude",
						"in": "query",
						"description": "Longitude",
						"schema": { "type": "number", "format": "double" }
					}
				],
				"responses": {
					"200": {
						"description": "Location coordinate retrieved.",
						"content": {
							"application/json": {
								"schema": { "type": "array", "items": { "$ref": "#/components/schemas/Coordinate" } }
							}
						}
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/portfolios/{id}/coordinates": {
			"get": {
				"tags": [ "PortfolioV2" ],
				"summary": "Get location coordinates by portfolio",
				"description": "",
				"operationId": "getCoordinatesByPortfoliov2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Location coordinates retrieved.",
						"content": {
							"application/json": {
								"schema": { "type": "array", "items": { "$ref": "#/components/schemas/Coordinate" } }
							}
						}
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/portfolios/count": {
			"get": {
				"tags": [ "PortfolioV2" ],
				"summary": "Count portfolios",
				"description": "",
				"operationId": "getExposureCountPortfoliov2",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Portfolio count successfully retrieved.",
						"content": { "application/json": { "schema": { "type": "integer", "format": "int64" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/portfolios/{id}/analyses": {
			"get": {
				"tags": [ "PortfolioV2" ],
				"summary": "Get analyses by portfolio",
				"description": "",
				"operationId": "getPortfolioAnalysesResultsV2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "q",
						"in": "query",
						"description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
						"schema": { "type": "string" }
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Specify `ASC` to display the results in alphabetical or numerical ascending order or `DESC` to display the results in descending order.",
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "userName",
						"in": "query",
						"description": "Name of user that ran the analysis.",
						"schema": { "type": "string" }
					},
					{
						"name": "runDate",
						"in": "query",
						"description": "Date that the analysis was run.",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Analyses for exposure successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/AnalysisSearchResultV2" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Results\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/portfolios/{id}/metrics": {
			"get": {
				"tags": [ "PortfolioV2" ],
				"summary": "Get metrics by portfolio",
				"description": "",
				"operationId": "getPortfolioMetricsv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Metrics for a specified portfolio are successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/PortfolioMetrics" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/portfolios/{id}/filteredaccounts": {
			"put": {
				"tags": [ "PortfolioV2" ],
				"summary": "Manage filtered accounts by portfolio",
				"description": "",
				"operationId": "manageFilteredAccountsv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"*/*": { "schema": { "$ref": "#/components/schemas/PortfolioFilteredAccountsInput" } }
					},
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine)."
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/portfolios/{id}/accounts": {
			"get": {
				"tags": [ "PortfolioV2" ],
				"summary": "Get accounts by portfolio",
				"description": "",
				"operationId": "searchPortfolioAccountsv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"schema": { "type": "string" }
					},
					{
						"name": "q",
						"in": "query",
						"description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
						"schema": { "type": "string" }
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Specify `ASC` to display the results in alphabetical or numerical ascending order or `DESC` to display the results in descending order.",
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "List of accounts retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/AccountSearchResult" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"View Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"put": {
				"tags": [ "PortfolioV2" ],
				"summary": "Manage accounts by portfolio",
				"description": "",
				"operationId": "managePortfolioAccountsv2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/PortfolioAccountsInput" } }
					},
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine)."
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Portfolios\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/portfolios/{id}/process": {
			"post": {
				"tags": [ "PortfolioV2" ],
				"summary": "Analyze portfolio",
				"description": "",
				"operationId": "processPortfolioV2",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProcessInputV2" } } },
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "url containing identifier of the submitted workflow.",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Add to Analysis Builder\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/portfolios/{id}/summary_report": {
			"post": {
				"tags": [ "PortfolioV2" ],
				"summary": "Generate summary report by portfolio",
				"description": "",
				"operationId": "summaryReportPortfoliov2",
				"parameters": [
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "id",
						"in": "path",
						"description": "ID number of the portfolio.",
						"required": true,
						"schema": { "minimum": 1, "type": "integer", "format": "int32" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/ExposureSummaryReportInput" } }
					},
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "url containing identifier of the submitted workflow.",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Download Report\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
    "/v3/exposurebatches": {
      "post": {
        "tags": [
          "Exposure BatchV3"
        ],
        "summary": "Manage exposures in batch",
        "description": "",
        "operationId": "executeBatchOperationV3",
        "parameters": [
          {
            "name": "datasource",
            "in": "query",
            "description": "Name of the data source.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Encoding",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkExposureInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Operation executed.",
            "headers": {
              "Location": {
                "description": "URL of the batch workflow.",
                "style": "simple",
                "schema": {
                  "type": "string",
                  "format": "URI"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Please check that you are provided all required values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Access to this resource has been denied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "RMS_Auth": []
          }
        ]
      }
    },
		"/v1/storage": {
			"post": {
				"tags": [ "File StorageV1" ],
				"summary": "Create storage bucket",
				"description": "",
				"operationId": "createBucket",
				"responses": {
					"201": {
						"description": "Storage bucket is successfully created.",
						"headers": {
							"Location": {
								"description": "Location of the new bucket",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "*/*": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/storage/{bucketId}/files/{fileId}/aggregate-exposures-lists": {
			"post": {
				"tags": [ "File StorageV1" ],
				"summary": "Extract aggregate exposure values",
				"description": "",
				"operationId": "extractAggregateExposureValues",
				"parameters": [
					{
						"name": "bucketId",
						"in": "path",
						"description": "Bucket ID",
						"required": true,
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "fileId",
						"in": "path",
						"description": "ID of the file.",
						"required": true,
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "delimiter",
						"in": "query",
						"schema": { "type": "string", "enum": [ "TAB", "COMMA", "SEMICOLON" ] }
					}
				],
				"requestBody": {
					"content": {
						"*/*": { "schema": { "$ref": "#/components/schemas/AggregatePortfolioFlatFileMapping" } }
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "List of aggregate exposure values retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/AggregateExposuresList" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/storage/{bucketId}/path": {
			"post": {
				"tags": [ "File StorageV1" ],
				"summary": "Get file location on S3",
				"description": "",
				"operationId": "getBucketPath",
				"parameters": [
					{
						"name": "bucketId",
						"in": "path",
						"description": "Bucket ID",
						"required": true,
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/FileInput" } } },
					"required": true
				},
				"responses": {
					"201": {
						"description": "File id and S3 location is successfully retrieved.",
						"headers": {
							"Location": {
								"description": "File Resource location",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						},
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/S3Bucket" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/storage/{bucketId}/files/{fileId}/media": {
			"get": {
				"tags": [ "File StorageV1" ],
				"summary": "Get file URI by storage bucket",
				"description": "",
				"operationId": "getFileContents",
				"parameters": [
					{
						"name": "bucketId",
						"in": "path",
						"description": "Bucket ID",
						"required": true,
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "fileId",
						"in": "path",
						"description": "ID of the file requested.",
						"required": true,
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "Media information for the specified file is successfully retrieved.",
						"headers": {
							"Content-Disposition": {
								"description": "Pre-signed S3 URL for uploading database",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorBody" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/storage/{bucketId}/files/aggregate-exposures-lists": {
			"post": {
				"tags": [ "File StorageV1" ],
				"summary": "Get aggregate exposures",
				"description": "",
				"operationId": "saveObjectFromExtractedAlmFile",
				"parameters": [
					{
						"name": "bucketId",
						"in": "path",
						"description": "Bucket ID",
						"required": true,
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"requestBody": {
					"content": { "*/*": { "schema": { "$ref": "#/components/schemas/AggregateExposuresList" } } },
					"required": true
				},
				"responses": {
					"201": { "description": "Success saving." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/uploads/{uploadId}/edm": {
			"post": {
				"tags": [ "File StorageV1" ],
				"summary": "Upload EDM",
				"description": "",
				"operationId": "CreateUploadTask",
				"parameters": [
					{
						"name": "uploadId",
						"in": "path",
						"description": "ID for upload requested.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "datasource",
						"in": "query",
						"description": "Name of the data source to be created. Data Source name can only contain characters from 0-9 A-Z a-z and _ (underscore) - (hyphen) and ' '(space)",
						"required": true,
						"schema": {
							"maxLength": 80,
							"minLength": 1,
							"pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
							"type": "string"
						}
					},
					{
						"name": "servername",
						"in": "query",
						"description": "Name of the server instance to host the EDM.",
						"schema": { "type": "string" }
					}
				],
        "requestBody" : {
          "description" : "Specify the edm import input",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EdmImportInput"
              }
            }
          }
        },
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "Location of the file",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Databases/Exposure Sets\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/uploads/{uploadId}/rdm": {
			"post": {
				"tags": [ "File StorageV1" ],
				"summary": "Upload RDM",
				"description": "",
				"operationId": "CreateUploadTaskForRdm",
				"parameters": [
					{
						"name": "uploadId",
						"in": "path",
						"description": "ID for upload requested.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "servername",
						"in": "query",
						"description": "Name of the server instance to host the RDM.",
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/RDMImportInput" } } },
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "Location of the file",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Databases/Exposure Sets\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/uploads": {
			"get": {
				"tags": [ "File StorageV1" ],
				"summary": "Get storage bucket URI",
				"operationId": "getUrlForUpload",
				"parameters": [
					{
						"name": "filename",
						"in": "query",
						"description": "File name",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "dbtype",
						"in": "query",
						"description": "Database type",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"NONE",
								"EDM",
								"USERCONFIG",
								"EVENTINFO",
								"RDM",
								"WEB",
								"TABDATA",
								"TARGET",
								"SYSTEMDATA",
								"GEOGRAPHY",
								"GEOCODE",
								"MAPCONFIG",
								"DLMPROFILES",
								"VULNERABILITY",
								"ANLSHAZARD",
								"REPORT",
								"UWG"
							]
						}
					},
					{
						"name": "fileextension",
						"in": "query",
						"description": "File extension",
						"required": true,
						"schema": { "type": "string", "enum": [ "CSV", "PARQUET", "BAK", "MDF" ] }
					}
				],
				"responses": {
					"201": {
						"description": "Bucket URL.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/S3UploadHelper" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Databases/Exposure Sets\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/data-bridge/de-register/{datasourcename}": {
			"delete": {
				"tags": [ "DatastoreV1" ],
				"summary": "Deregister EDM",
				"description": "",
				"operationId": "deregisterDatabase",
				"parameters": [
					{
						"name": "datasourcename",
						"in": "path",
						"description": "Data source name",
						"required": true,
						"schema": {
							"maxLength": 80,
							"minLength": 1,
							"pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
							"type": "string"
						}
					}
				],
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine)."
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/data-bridge/{serverId}/databases": {
			"get": {
				"tags": [ "DatastoreV1" ],
				"summary": "Get data modules on Data Bridge",
				"description": "",
				"operationId": "getAvailableDatabases",
				"parameters": [
					{
						"name": "serverId",
						"in": "path",
						"required": true,
						"schema": { "type": "integer", "format": "int64" }
					},
					{
						"name": "dbType",
						"in": "query",
						"schema": { "type": "string", "default": "EDM", "enum": [ "EDM", "RDM" ] }
					},
					{
						"name": "q",
						"in": "query",
						"description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
						"schema": { "type": "string" }
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Specify `ASC` to display the results in alphabetical or numerical ascending order or `DESC` to display the results in descending order.",
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at `0`.",
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "List all available EDMs from DB instance is successfully retrieved.",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/DataBridgeDatabaseSearchResult" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/data-bridge/register": {
			"post": {
				"tags": [ "DatastoreV1" ],
				"summary": "Register EDM",
				"description": "",
				"operationId": "registerDatabase",
				"parameters": [
					{
						"name": "datasourcename",
						"in": "query",
						"description": "Name of the datasource to register with Risk Modeler.",
						"required": true,
						"schema": {
							"maxLength": 80,
							"minLength": 1,
							"pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
							"type": "string"
						}
					}
				],
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine)."
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/datasources": {
			"get": {
				"tags": [ "DatasourcesV1" ],
				"summary": "Get EDMs",
				"description": "",
				"operationId": "searchEdms",
				"parameters": [
					{
						"name": "q",
						"in": "query",
						"description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
						"schema": { "type": "string" }
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Specify `ASC` to display the results in alphabetical or numerical ascending order or `DESC` to display the results in descending order.",
						"schema": { "type": "string", "default": "datasourceName ASC" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at `0`.",
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "EDM list is successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/DataSourceSearchResult" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"post": {
				"tags": [ "DatasourcesV1" ],
				"summary": "Administer data source",
				"description": "",
				"operationId": "dbOperations",
				"parameters": [
					{
						"name": "datasourcename",
						"in": "query",
						"description": "Unique name of EDM data source. Valid characters: `0`-`9`, `A`-`Z`, `a`-`z`, `_` (underscore), `-` (hyphen), and ' ' (space). Maximum length is 80 characters.",
						"required": true,
						"schema": {
							"maxLength": 80,
							"minLength": 1,
							"pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
							"type": "string"
						}
					},
					{
						"name": "filename",
						"in": "query",
						"description": "Name of the file for download. Can only contain characters from 0-9 A-Z a-z and _ (underscore)  - (hyphen) and ' '(space)",
						"schema": { "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$", "type": "string" }
					},
					{
						"name": "operation",
						"in": "query",
						"description": "Database operation to perform",
						"required": true,
						"schema": { "type": "string", "enum": [ "CREATE", "DOWNLOAD_EDM" ] }
					},
					{
						"name": "servername",
						"in": "query",
						"description": "Name of server instance hosting the EDM.",
						"schema": { "type": "string" }
					},
					{
						"name": "format",
						"in": "query",
						"description": "Specify which file format to use for downloading the database.  Defaults to BAK if absent.",
						"schema": { "type": "string", "default": "BAK", "enum": [ "CSV", "PARQUET", "BAK", "MDF" ] }
					},
					{
						"name": "sqlversion",
						"in": "query",
						"description": "SQL server version of exported BAK or MDF.",
						"schema": { "type": "string", "default": "2014", "enum": [ "2014", "2019" ] }
					}
				],
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine)."
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/datasources/{datasourcename}": {
			"delete": {
				"tags": [ "DatasourcesV1" ],
				"summary": "Delete EDM",
				"description": "",
				"operationId": "deleteEdm",
				"parameters": [
					{
						"name": "datasourcename",
						"in": "path",
						"description": "Data source name",
						"required": true,
						"schema": {
							"maxLength": 80,
							"minLength": 1,
							"pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
							"type": "string"
						}
					}
				],
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine)."
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Databases/Exposure Sets\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/datasources/db-instances": {
			"get": {
				"tags": [ "DatasourcesV1" ],
				"summary": "Get SQL Server instances",
				"description": "",
				"operationId": "searchDbInstances",
				"parameters": [
					{
						"name": "type",
						"in": "query",
						"description": "DB instance namespace RM or Data Bridge",
						"schema": { "type": "string" }
					},
					{
						"name": "status",
						"in": "query",
						"description": "DB instance status active or inactive",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "tenant DB instance list is successfully retrieved.",
						"content": {
							"application/json": {
								"schema": { "type": "array", "items": { "$ref": "#/components/schemas/ServerInfo" } }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/exports": {
			"post": {
				"tags": [ "ExportsV1" ],
				"summary": "Export data module to file",
				"description": "",
				"operationId": "exportDatav1",
				"parameters": [
					{
						"name": "servername",
						"in": "query",
						"description": "The optional `servername` query parameter specifies the name of the server.",
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ExportInput" } } },
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "URL of the export job.",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"deprecated": true,
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/exports/downloadresults": {
			"post": {
				"tags": [ "ExportsV1" ],
				"summary": "Download analysis results",
				"description": "",
				"operationId": "downloadResults",
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/DownloadResultsInput" } }
					},
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "Workflow relative URL",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Download CSV/Parquet\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"deprecated": true,
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/imports/createaccount/{bucketId}": {
			"post": {
				"tags": [ "ImportsV1" ],
				"summary": "Create MRI account file account data",
				"description": "",
				"operationId": "createAccountData",
				"parameters": [
					{
						"name": "bucketId",
						"in": "path",
						"description": "ID number of the bucket.",
						"required": true,
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "delimiter",
						"in": "query",
						"description": "Specify the type of delimiter ( 'TAB' | 'COMMA' | 'SEMICOLON' ).",
						"schema": { "type": "string", "enum": [ "TAB", "COMMA", "SEMICOLON" ] }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/AccountFileInput" } }
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "Created. Account file needed by MRI for running the import of account data is successfully created.",
						"content": { "application/json": { "schema": { "type": "integer", "format": "int32" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Import Flat Files\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/imports": {
			"post": {
				"tags": [ "ImportsV1" ],
				"summary": "Import exposures from flat file",
				"description": "",
				"operationId": "createJob",
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/SubmittedImportJob" } }
					},
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "workflowId",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Import Flat Files\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/imports/extractaccountsfromlocationfile/{bucketId}/{fileId}": {
			"get": {
				"tags": [ "ImportsV1" ],
				"summary": "Extract account data from MRI location file",
				"operationId": "extractAccountsFromLocationFile",
				"parameters": [
					{
						"name": "bucketId",
						"in": "path",
						"description": "Bucket ID.",
						"required": true,
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "fileId",
						"in": "path",
						"description": "File ID",
						"required": true,
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "delimiter",
						"in": "query",
						"schema": { "type": "string", "enum": [ "TAB", "COMMA", "SEMICOLON" ] }
					}
				],
				"responses": {
					"200": {
						"description": "Import job initiated.",
						"content": { "application/json": { "schema": { "type": "integer", "format": "int32" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Import Flat Files\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/imports/extractsample/{bucketId}/{fileId}": {
			"get": {
				"tags": [ "ImportsV1" ],
				"summary": "Extract data from MRI file",
				"operationId": "extractData",
				"parameters": [
					{
						"name": "bucketId",
						"in": "path",
						"description": "ID number of the bucket.",
						"required": true,
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "fileId",
						"in": "path",
						"required": true,
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "delimiter",
						"in": "query",
						"schema": { "type": "string", "enum": [ "TAB", "COMMA", "SEMICOLON" ] }
					}
				],
				"responses": {
					"200": {
						"description": "MRI extraction result.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ImportSourceFileResult" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Import Flat Files\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/imports/extractmapping/{bucketId}/{fileId}": {
			"get": {
				"tags": [ "ImportsV1" ],
				"summary": "Extract data from MRI mapping file",
				"description": "",
				"operationId": "extractMapping",
				"parameters": [
					{
						"name": "bucketId",
						"in": "path",
						"description": "ID number of the bucket.",
						"required": true,
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "fileId",
						"in": "path",
						"description": "File ID",
						"required": true,
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "Data from a specified mapping file is successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ImportMappingOutput" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Import Flat Files\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/imports/createmapping/{bucketId}": {
			"post": {
				"tags": [ "ImportsV1" ],
				"summary": "Create MRI mapping file",
				"description": "",
				"operationId": "sendMapping",
				"parameters": [
					{
						"name": "bucketId",
						"in": "path",
						"description": "ID number of the bucket.",
						"required": true,
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/ImportMappingInput" } }
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "Created. Mapping file is successfully created.",
						"content": { "application/json": { "schema": { "type": "integer", "format": "int32" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Import Flat Files\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/data-bridge/de-register/{datasourcename}": {
			"delete": {
				"tags": [ "DatastoreV2" ],
				"summary": "Deregister EDM",
				"description": "",
				"operationId": "deregisterDatabasev2",
				"parameters": [
					{
						"name": "datasourcename",
						"in": "path",
						"description": "Data source name",
						"required": true,
						"schema": {
							"maxLength": 80,
							"minLength": 1,
							"pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
							"type": "string"
						}
					}
				],
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine)."
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/data-bridge/{serverId}/databases": {
			"get": {
				"tags": [ "DatastoreV2" ],
				"summary": "Get data modules on Data Bridge",
				"description": "",
				"operationId": "getAvailableDatabasesv2",
				"parameters": [
					{
						"name": "serverId",
						"in": "path",
						"required": true,
						"schema": { "type": "integer", "format": "int64" }
					},
					{
						"name": "dbType",
						"in": "query",
						"schema": { "type": "string", "default": "EDM", "enum": [ "EDM", "RDM" ] }
					},
					{
						"name": "q",
						"in": "query",
						"description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
						"schema": { "type": "string" }
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Specify `ASC` to display the results in alphabetical or numerical ascending order or `DESC` to display the results in descending order.",
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "List all available EDMs from DB instance is successfully retrieved.",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/DataBridgeDatabaseSearchResult" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/data-bridge/register": {
			"post": {
				"tags": [ "DatastoreV2" ],
				"summary": "Register EDM",
				"description": "",
				"operationId": "registerDatabaseV2",
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/DataBridgeRegisterInput" } }
					},
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine)."
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all\n  required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/datasources": {
			"get": {
				"tags": [ "DatasourcesV2" ],
				"summary": "Get EDMs",
				"description": "",
				"operationId": "searchEdmsV2",
				"parameters": [
					{
						"name": "q",
						"in": "query",
						"description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
						"schema": { "type": "string" }
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Specify `ASC` to display the results in alphabetical or numerical ascending order or `DESC` to display the results in descending order.",
						"schema": { "type": "string", "default": "datasourceName ASC" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "EDM list is successfully retrieved.",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/DataSourceSearchResultV2" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"post": {
				"tags": [ "DatasourcesV2" ],
				"summary": "Manage data source",
				"description": "",
				"operationId": "dbOperationsv2",
				"parameters": [
					{
						"name": "datasourcename",
						"in": "query",
						"description": "Unique name of EDM data source. Valid characters: `0`-`9`, `A`-`Z`, `a`-`z`, `_` (underscore), `-` (hyphen), and ' ' (space). Maximum length is 80 characters.",
						"required": true,
						"schema": {
							"maxLength": 80,
							"minLength": 1,
							"pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
							"type": "string"
						}
					},
					{
						"name": "filename",
						"in": "query",
						"description": "Name of the file for download. Can only contain characters from 0-9 A-Z a-z and _ (underscore)  - (hyphen) and ' '(space)",
						"schema": { "pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$", "type": "string" }
					},
					{
						"name": "operation",
						"in": "query",
						"description": "Database operation to perform",
						"required": true,
						"schema": { "type": "string", "enum": [ "CREATE", "DOWNLOAD_EDM" ] }
					},
					{
						"name": "servername",
						"in": "query",
						"description": "Name of server instance hosting the EDM.",
						"schema": { "type": "string" }
					},
					{
						"name": "format",
						"in": "query",
						"description": "Specify which file format to use for downloading the database.  Defaults to BAK if absent.",
						"schema": { "type": "string", "default": "BAK", "enum": [ "CSV", "PARQUET", "BAK", "MDF" ] }
					},
					{
						"name": "sqlversion",
						"in": "query",
						"description": "SQL server version of exported BAK or MDF.",
						"schema": { "type": "string", "default": "2014", "enum": [ "2014", "2019" ] }
					}
				],
        "requestBody" : {
          "description" : "Specify the edm request",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EdmRequest"
              }
            }
          }
        },
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine)."
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/datasources/{datasourcename}": {
			"delete": {
				"tags": [ "DatasourcesV2" ],
				"summary": "Delete EDM",
				"description": "",
				"operationId": "deleteEdm_1",
				"parameters": [
					{
						"name": "datasourcename",
						"in": "path",
						"description": "Data source name",
						"required": true,
						"schema": {
							"maxLength": 80,
							"minLength": 1,
							"pattern": "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
							"type": "string"
						}
					}
				],
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine)."
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Databases/Exposure Sets\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/datasources/db-instances": {
			"get": {
				"tags": [ "DatasourcesV2" ],
				"summary": "Get SQL Server instances",
				"description": "",
				"operationId": "searchDbInstancesv2",
				"parameters": [
					{
						"name": "type",
						"in": "query",
						"description": "DB instance namespace RM or Data Bridge",
						"schema": { "type": "string" }
					},
					{
						"name": "status",
						"in": "query",
						"description": "DB instance status active or inactive",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "tenant DB instance list is successfully retrieved.",
						"content": {
							"application/json": {
								"schema": { "type": "array", "items": { "$ref": "#/components/schemas/ServerInfo" } }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v2/exports": {
			"post": {
				"tags": [ "ExportsV2" ],
				"summary": "Export data module to file",
				"description": "",
				"operationId": "exportdatav2",
				"parameters": [
					{
						"name": "servername",
						"in": "query",
						"description": "The optional `servername` query parameter specifies the name of the server.",
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ExportInput" } } },
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "URL of the export job.",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/domains/{domainname}/tablespace/{tablespace}/entities/{entity}": {
			"get": {
				"tags": [ "DomainsV1" ],
				"summary": "Get entity by domain tablespace",
				"description": "",
				"operationId": "getEntitiesMetaOrValuesv1",
				"parameters": [
					{
						"name": "domainname",
						"in": "path",
						"description": "Name of the domain.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "tablespace",
						"in": "path",
						"description": "Name of the tablespace.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "entity",
						"in": "path",
						"description": "Name of the entity.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Metadata for an entity in a domain tablespace is successfully retrieved.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityMeta" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"post": {
				"tags": [ "DomainsV1" ],
				"summary": "Create currency",
				"description": "",
				"operationId": "createCurrencyv1",
				"parameters": [
					{
						"name": "domainname",
						"in": "path",
						"description": "Name of the domain.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "tablespace",
						"in": "path",
						"description": "Name of the tablespace.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "entity",
						"in": "path",
						"description": "Name of the entity.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/KeyValueStore" } } }
				},
				"responses": {
					"201": {
						"description": "Created. New Currency is created in the data source successfully.",
						"headers": {
							"Location": {
								"description": "Location of the Currency resource.",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"409": {
						"description": "Conflict. Resource already exists.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/domains": {
			"get": {
				"tags": [ "DomainsV1" ],
				"summary": "Get domains",
				"description": "",
				"operationId": "getDomainsv1",
				"responses": {
					"200": {
						"description": "List of domains is successfully retrieved.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/DomainReference" }
								}
							}
						}
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/domains/{domainname}/tablespace/{tablespace}/entities": {
			"get": {
				"tags": [ "DomainsV1" ],
				"summary": "Get entities by domain tablespace",
				"description": "",
				"operationId": "getEntitiesv1",
				"parameters": [
					{
						"name": "domainname",
						"in": "path",
						"description": "Name of the domain.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "tablespace",
						"in": "path",
						"description": "Name of the tablespace.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "List of entities for a domain tablespace is successfully retrieved.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/DomainReference" }
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/domains/{domainname}/tablespace/{tablespace}/entities/{entity}/meta": {
			"get": {
				"tags": [ "DomainsV1" ],
				"summary": "Get attributes domain tablespace entity",
				"description": "",
				"operationId": "getEntityAttributesv1",
				"parameters": [
					{
						"name": "domainname",
						"in": "path",
						"description": "Name of the domain.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "tablespace",
						"in": "path",
						"description": "Name of the tablespace.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "entity",
						"in": "path",
						"description": "Name of the entity.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "tag",
						"in": "query",
						"description": "Name of the metadata tag.",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Attributes for a specified entry in a domain tablespace are successfully retrieved.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/DomainResult" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"404": {
						"description": "The requested resource was not found.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/domains/{domainname}/tablespace/{tablespace}/entities/{entity}/values": {
			"get": {
				"tags": [ "DomainsV1" ],
				"summary": "Get entity values",
				"description": "",
				"operationId": "getEntityValuesv1",
				"parameters": [
					{
						"name": "domainname",
						"in": "path",
						"description": "Name of the domain.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "tablespace",
						"in": "path",
						"description": "Name of the tablespace.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "entity",
						"in": "path",
						"description": "Name of the entity.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "fields",
						"in": "query",
						"description": "Comma delimited list of fields to be fetched. Defaults to all.",
						"schema": { "type": "string" }
					},
					{
						"name": "tag",
						"in": "query",
						"description": "Name of the metadata tag.",
						"schema": { "type": "string" }
					},
					{ "name": "attributename", "in": "query", "schema": { "type": "string" } },
					{
						"name": "sortby",
						"in": "query",
						"description": "This parameter is not currently used.",
						"schema": { "type": "string" }
					},
					{
						"name": "sortorder",
						"in": "query",
						"description": "This parameter is not currently used.",
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Optional attribute to filter the values. Defaults to returning all values.",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Values for a specified domain/tablespace/entity is successfully retrieved.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityResult" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/domains/{domainname}/tablespace/{tablespace}/entities/{entity}/hazards": {
			"get": {
				"tags": [ "DomainsV1" ],
				"summary": "Get hazards",
				"description": "",
				"operationId": "getHazardsv1",
				"parameters": [
					{
						"name": "domainname",
						"in": "path",
						"description": "Name of the domain.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "tablespace",
						"in": "path",
						"description": "Name of the tablespace.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "entity",
						"in": "path",
						"description": "Name of the entity.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "jsonfield",
						"in": "query",
						"description": "Name of the field user wants to fetch in the hazards.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "option",
						"in": "query",
						"description": "Optional attribute to filter the values. Defaults to returning all values.",
						"schema": { "type": "string" }
					},
					{
						"name": "tag",
						"in": "query",
						"description": "Name of the metadata tag.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "q",
						"in": "query",
						"description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
						"schema": { "type": "string" }
					},
					{
						"name": "sortby",
						"in": "query",
						"description": "The name of the field on which to sort the results.",
						"schema": { "type": "string" }
					},
					{
						"name": "sortorder",
						"in": "query",
						"description": "Specify `ASC` to display the results in alphabetical or numerical ascending order or `DESC` to display the results in descending order.",
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at _0_.",
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "List of hazards for a specified domain/tablespace/entity is successfully retrieved.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/EntityResult" } } }
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/domains/{domainname}/tablespace/{tablespace}/entities/{entity}/secondarymodifiers": {
			"get": {
				"tags": [ "DomainsV1" ],
				"summary": "Get secondary modifiers",
				"description": "",
				"operationId": "getSecondaryModifiersv1",
				"parameters": [
					{
						"name": "domainname",
						"in": "path",
						"description": "Name of the domain.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "tablespace",
						"in": "path",
						"description": "Name of the tablespace.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "entity",
						"in": "path",
						"description": "Name of the entity.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "jsonfield",
						"in": "query",
						"description": "Name of the field user wants to fetch in the secondary modifiers.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "option",
						"in": "query",
						"description": "Optional attribute to filter the values. Defaults to returning all values.",
						"schema": { "type": "string" }
					},
					{
						"name": "tag",
						"in": "query",
						"description": "Name of the metadata tag.",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"name": "q",
						"in": "query",
						"description": "Filters query results by evaluating the value of expressions. The service supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
						"schema": { "type": "string" }
					},
					{
						"name": "sortby",
						"in": "query",
						"description": "The name of the field on which to sort the results.",
						"schema": { "type": "string" }
					},
					{
						"name": "sortorder",
						"in": "query",
						"description": "Specify `ASC` to display the results in alphabetical or numerical ascending order or `DESC` to display the results in descending order.",
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, \\ starting at _0_.",
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "List of secondary modifiers for a specified domain/tablespace/entity is successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/SecondaryModifierResult" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all \\ required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/domains/{domainname}/tablespace": {
			"get": {
				"tags": [ "DomainsV1" ],
				"summary": "Get tablespaces",
				"description": "",
				"operationId": "getTablespacesv1",
				"parameters": [
					{
						"name": "domainname",
						"in": "path",
						"description": "Name of the domain.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "List of table spaces for a domain is successfully retrieved.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/DomainReference" }
								}
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/exposuresets/{exposureSetId}/groups": {
			"get": {
				"tags": [ "Exposure SetsV1" ],
				"summary": "Get groups by exposure set",
				"description": "",
				"operationId": "searchExposureSetGroups",
				"parameters": [
					{
						"name": "exposureSetId",
						"in": "path",
						"description": "ID exposure set to update.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Exposure set group list successfully retrieved.",
						"content": {
							"application/json": {
								"schema": { "type": "array", "items": { "$ref": "#/components/schemas/GroupDetail" } }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/exposuresets": {
			"get": {
				"tags": [ "Exposure SetsV1" ],
				"summary": "Get exposure sets",
				"description": "",
				"operationId": "searchExposureSetId",
				"parameters": [
					{
						"name": "q",
						"in": "query",
						"description": "Filters applied to the query results of the `id` or `name` attribute. The operation supports four types of operators:\n* Comparison: `q=[attribute][comparison operator][value]` e.g. `id=100`, `id!=100`, `id>100`\n* Logical: `q=[expression][logical operator][expression]` e.g. `id=100 AND name=\"xyz\"` , `id=100 OR type=\"abc\"`\n* List: `q=[attribute][list operator][values list]` e.g. `id IN (1,2,3]`, `name NOT IN (\"abc\",\"xyz\")`\n* Matching: `q=[attribute][comparison operator][pattern]`, e.g. `name LIKE \"abc \"` , `type NOT LIKE \" xyz* \"`\nTo learn more, see [Query Exposure Data](https://developer.rms.com/rms-developers/docs/query-exposure-data).",
						"schema": { "type": "string" }
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Sort order for query results based on the `id` or `name` attribute. Specify `ASC` to display the results in alphabetical or numerical ascending order or `DESC` to display the results in descending order.",
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of retrieved records to display on the page.",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of the page displaying the returned records, starting at '0'.",
						"schema": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"200": {
						"description": "Exposure set list successfully retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ExposureSetSearchResult" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/exposuresets/{exposureSetId}": {
			"patch": {
				"tags": [ "Exposure SetsV1" ],
				"summary": "Update exposure set",
				"operationId": "updateExposureSet",
				"parameters": [
					{
						"name": "exposureSetId",
						"in": "path",
						"description": "ID of the exposure set to update.",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"description": "Specify the patch request input",
					"content": {
						"*/*": {
							"schema": {
								"type": "array",
								"items": { "$ref": "#/components/schemas/PatchExposureSetReq" }
							}
						}
					}
				},
				"responses": {
					"200": { "description": "Update to exposure set name or group successfully." },
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource is denied or not authorized to perform the \"Edit Databases/Exposure Sets\" action.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/workflows/{id}": {
			"get": {
				"tags": [ "WorkflowsV1" ],
				"summary": "Get workflow or operation",
				"description": "",
				"operationId": "getWorkflowv1",
				"parameters": [
					{ "name": "id", "in": "path", "required": true, "schema": { "type": "string" } },
					{
						"name": "parent",
						"in": "query",
						"description": "Workflow ID of the requested operation",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "Workflow or operation retrieved.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Workflow" } } }
					},
					"204": {
						"description": "Content not ready for the requested operation. It may be retried after a delay"
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"delete": {
				"tags": [ "WorkflowsV1" ],
				"summary": "Cancel workflow",
				"description": "",
				"operationId": "cancelWorkflowv1",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "id",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine)."
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		},
		"/v1/workflows": {
			"get": {
				"tags": [ "WorkflowsV1" ],
				"summary": "Get workflows",
				"description": "",
				"operationId": "getWorkflowsv1",
				"parameters": [
					{
						"name": "ids",
						"in": "query",
						"description": "comma separated id list",
						"schema": { "type": "string" }
					},
					{
						"name": "limit",
						"in": "query",
						"description": "limit",
						"schema": { "type": "integer", "format": "int32" }
					},
					{
						"name": "offset",
						"in": "query",
						"description": "offset",
						"schema": { "type": "integer", "format": "int32" }
					},
					{ "name": "status", "in": "query", "description": "status", "schema": { "type": "string" } },
					{
						"name": "workflowtype",
						"in": "query",
						"description": "workflow type",
						"schema": { "type": "string" }
					},
					{
						"name": "from",
						"in": "query",
						"description": "from submitted date as timestamp",
						"schema": { "type": "string" }
					},
					{
						"name": "to",
						"in": "query",
						"description": "to submitted date as timestamp",
						"schema": { "type": "string" }
					},
					{
						"name": "username",
						"in": "query",
						"description": "Name of the user to fetch the workflows",
						"schema": { "type": "string" }
					},
					{
						"name": "workflowname",
						"in": "query",
						"description": "Name of the workflow for filtering",
						"schema": { "type": "string" }
					},
					{
						"name": "sortby",
						"in": "query",
						"description": "Field to sort on",
						"schema": { "type": "string" }
					},
					{
						"name": "sortorder",
						"in": "query",
						"description": "Sorting order ASC or DESC",
						"schema": { "type": "string" }
					},
					{ "name": "scheduled", "in": "query", "schema": { "type": "string" } }
				],
				"responses": {
					"200": {
						"description": "List of workflows retrieved.",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/WorkflowSearchResult" } }
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			},
			"post": {
				"tags": [ "WorkflowsV1" ],
				"summary": "Create user-defined workflow",
				"description": "",
				"operationId": "createUserDefinedWorkflow",
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/UserDefinedWorkflow" } }
					}
				},
				"responses": {
					"202": {
						"description": "Accepted: A job with the specified ID has been added to the workflow engine queue for processing. Send periodic HTTP GET requests to the URI for the job status. See [Workflow Engine Jobs](https://developer.rms.com/rms-developers/docs/workflow-engine).",
						"headers": {
							"Location": {
								"description": "URL of the batch workflow.",
								"style": "simple",
								"schema": { "type": "string", "format": "URI" }
							}
						}
					},
					"400": {
						"description": "Bad Request: Please check that you are provided all required values.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					},
					"403": {
						"description": "Forbidden: Access to this resource has been denied.",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorMessage" } } }
					}
				},
				"security": [ { "RMS_Auth": [] } ]
			}
		}
	},
  "components" : {
    "schemas" : {
      "ErrorMessage" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          },
          "logId" : {
            "type" : "string"
          }
        }
      },
      "AnalysisGroup" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "groupId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "propagateDetailedLosses" : {
            "type" : "boolean"
          },
          "analysisIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "rateSchemes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EventRateScheme"
            }
          },
          "name" : {
            "maxLength" : 64,
            "minLength" : 1,
            "pattern" : "^\\w((?!--)[\\w\\s:-])*\\w$|^\\w*$",
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "currency" : {
            "type" : "string"
          }
        }
      },
      "EventRateScheme" : {
        "type" : "object",
        "properties" : {
          "modelRegionCode" : {
            "maxLength" : 4,
            "minLength" : 4,
            "type" : "string"
          },
          "perilCode" : {
            "maxLength" : 2,
            "minLength" : 2,
            "type" : "string"
          },
          "modelVersion" : {
            "type" : "string"
          },
          "eventRateSchemeName" : {
            "type" : "string"
          },
          "eventRateSchemeId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "isDefault" : {
            "type" : "boolean"
          },
          "isActive" : {
            "type" : "boolean"
          }
        }
      },
      "AnalysisGroupSearchResult" : {
        "type" : "object",
        "properties" : {
          "totalMatchCount" : {
            "type" : "integer",
            "format" : "int64"
          },
          "searchMatchingAnalysisGroupList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AnalysisGroup"
            }
          }
        }
      },
      "Cedant" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "maxLength" : 20,
            "minLength" : 0,
            "pattern" : "^\\w([\\w-]*\\w|)$",
            "type" : "string"
          },
          "name" : {
            "maxLength" : 40,
            "minLength" : 0,
            "type" : "string"
          }
        }
      },
      "ExposureValue" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "code" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "LineOfBusiness" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "maxLength" : 20,
            "minLength" : 0,
            "type" : "string"
          }
        }
      },
      "LossOccurrence" : {
        "required" : [ "treatyId" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "treatyId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "regionPeril" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "lossOccurrenceTime" : {
            "type" : "integer",
            "format" : "int32"
          },
          "lossOccurrenceRadius" : {
            "type" : "integer",
            "format" : "int32"
          },
          "radiusUnit" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "multiLossOccurrence" : {
            "$ref" : "#/components/schemas/ExposureValue"
          }
        }
      },
      "Producer" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "maxLength" : 20,
            "minLength" : 0,
            "pattern" : "^\\w([\\w-]*\\w|)$",
            "type" : "string"
          },
          "name" : {
            "maxLength" : 40,
            "minLength" : 0,
            "type" : "string"
          }
        }
      },
      "TreatyWithAnalysisInfo" : {
        "required" : [ "attachLevel", "cedant", "treatyNumber", "treatyType" ],
        "type" : "object",
        "properties" : {
          "treatyId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "treatyNumber" : {
            "maxLength" : 20,
            "minLength" : 0,
            "type" : "string"
          },
          "treatyName" : {
            "maxLength" : 40,
            "minLength" : 0,
            "type" : "string"
          },
          "cedant" : {
            "$ref" : "#/components/schemas/Cedant"
          },
          "producer" : {
            "$ref" : "#/components/schemas/Producer"
          },
          "treatyType" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "currency" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "attachBasis" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "attachLevel" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "premium" : {
            "type" : "number",
            "format" : "double"
          },
          "occurLimit" : {
            "type" : "number",
            "format" : "double"
          },
          "attachPt" : {
            "type" : "number",
            "format" : "double"
          },
          "riskLimit" : {
            "type" : "number",
            "format" : "double"
          },
          "retentAmt" : {
            "type" : "number",
            "format" : "double"
          },
          "pcntPlaced" : {
            "type" : "number",
            "format" : "double"
          },
          "effectDate" : {
            "type" : "string"
          },
          "expireDate" : {
            "type" : "string"
          },
          "pcntRetent" : {
            "type" : "number",
            "format" : "double"
          },
          "pcntRiShare" : {
            "type" : "number",
            "format" : "double"
          },
          "pcntCovered" : {
            "type" : "number",
            "format" : "double"
          },
          "priority" : {
            "type" : "integer",
            "format" : "int32"
          },
          "numOfReinst" : {
            "type" : "integer",
            "format" : "int32"
          },
          "reinstCharge" : {
            "type" : "number",
            "format" : "double"
          },
          "maolAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "isValid" : {
            "type" : "boolean"
          },
          "userId1" : {
            "type" : "string"
          },
          "userId2" : {
            "type" : "string"
          },
          "lobs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LineOfBusiness"
            }
          },
          "aggregateDeductible" : {
            "type" : "number",
            "format" : "double"
          },
          "aggregateLimit" : {
            "type" : "number",
            "format" : "double"
          },
          "lossOccurrences" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LossOccurrence"
            }
          },
          "analysisId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "analysisName" : {
            "type" : "string"
          }
        }
      },
      "ConvertEventInput" : {
        "type" : "object",
        "properties" : {
          "analysisName" : {
            "maxLength" : 64,
            "minLength" : 0,
            "pattern" : "^\\w((?!--)[\\w\\s:-])*\\w$|^\\w*$",
            "type" : "string",
            "description" : "The name for the analysis with converted rates and/or losses. can only contain characters only 0-9, A-Z, a-z, underscore(_), hyphen(-), colon(:), and space. Can't start or end with hyphen, space, or colon, and can't include multiple consecutive hyphens (--)",
            "example" : "NewAnalysisName"
          },
          "eventRateSchemeIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "eventLossAdjustmentSchemeIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        }
      },
      "ConvertResultCurrencyInput" : {
        "type" : "object",
        "properties" : {
          "currency" : {
            "$ref" : "#/components/schemas/Currency"
          }
        }
      },
      "Currency" : {
        "required" : [ "asOfDate", "code", "scheme", "vintage" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string"
          },
          "scheme" : {
            "type" : "string"
          },
          "asOfDate" : {
            "type" : "string"
          },
          "vintage" : {
            "type" : "string"
          }
        }
      },
      "PateBatchInput" : {
        "type" : "object",
        "properties" : {
          "treatyId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pateId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "groupId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "analysisId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "treatyType" : {
            "type" : "string"
          }
        }
      },
      "AnalysisSummaryReportInput" : {
        "required" : [ "perilList" ],
        "type" : "object",
        "properties" : {
          "perilList" : {
            "maxItems" : 2147483647,
            "minItems" : 1,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "reportName" : {
            "type" : "string"
          }
        }
      },
      "LocationAAL" : {
        "type" : "object",
        "properties" : {
          "locationId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "locationName" : {
            "type" : "string"
          },
          "locationNumber" : {
            "type" : "string"
          },
          "aal" : {
            "type" : "number",
            "format" : "double"
          },
          "standardDeviation" : {
            "type" : "number",
            "format" : "double"
          },
          "coefficientOfVariation" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "LocationAALResult" : {
        "type" : "object",
        "properties" : {
          "totalCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "offset" : {
            "type" : "integer",
            "format" : "int32"
          },
          "limit" : {
            "type" : "integer",
            "format" : "int32"
          },
          "locationAALs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LocationAAL"
            }
          }
        }
      },
      "AnalysesItem" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          },
          "runDate" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "currency" : {
            "type" : "string"
          },
          "type" : {
            "type" : "integer",
            "format" : "int32"
          },
          "exposureType" : {
            "type" : "integer",
            "format" : "int32"
          },
          "peril" : {
            "type" : "string"
          },
          "status" : {
            "type" : "integer",
            "format" : "int32"
          },
          "region" : {
            "type" : "string"
          },
          "engineVersion" : {
            "type" : "string"
          },
          "groupType" : {
            "type" : "string"
          },
          "cedant" : {
            "type" : "string"
          },
          "lob" : {
            "type" : "string"
          },
          "engineType" : {
            "type" : "integer",
            "format" : "int32"
          },
          "subperil" : {
            "type" : "integer",
            "format" : "int32"
          },
          "exposureId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "dataSource" : {
            "type" : "string"
          },
          "jobId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "jobUUID" : {
            "type" : "string"
          },
          "isGroup" : {
            "type" : "boolean"
          },
          "engineName" : {
            "type" : "string"
          },
          "statusName" : {
            "type" : "string"
          },
          "typeName" : {
            "type" : "string"
          },
          "subperilName" : {
            "type" : "string"
          },
          "rdmName" : {
            "type" : "string"
          },
          "regroup" : {
            "type" : "integer",
            "format" : "int32"
          },
          "currencyName" : {
            "type" : "string"
          },
          "perilName" : {
            "type" : "string"
          },
          "regionName" : {
            "type" : "string"
          },
          "lossAmplification" : {
            "type" : "integer",
            "format" : "int32"
          },
          "lossAmplificationName" : {
            "type" : "string"
          },
          "mode" : {
            "type" : "integer",
            "format" : "int32"
          },
          "modeName" : {
            "type" : "string"
          },
          "insuranceType" : {
            "type" : "integer",
            "format" : "int32"
          },
          "insuranceTypeName" : {
            "type" : "string"
          },
          "vulnerabilityCurve" : {
            "type" : "integer",
            "format" : "int32"
          },
          "vulnerabilityCurveName" : {
            "type" : "string"
          },
          "riGuid" : {
            "type" : "string"
          }
        }
      },
      "AnalysisSearchResult" : {
        "type" : "object",
        "properties" : {
          "searchTotalMatch" : {
            "type" : "integer",
            "format" : "int64"
          },
          "searchItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AnalysesItem"
            }
          }
        }
      },
      "AnalysisRegionSearchResult" : {
        "type" : "object",
        "properties" : {
          "searchTotalMatch" : {
            "type" : "integer",
            "format" : "int64"
          },
          "searchItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RegionItem"
            }
          }
        }
      },
      "RegionItem" : {
        "type" : "object",
        "properties" : {
          "region" : {
            "type" : "string"
          },
          "subRegion" : {
            "type" : "string"
          },
          "peril" : {
            "type" : "string"
          },
          "rateschemeid" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "CedantSearchResult" : {
        "type" : "object",
        "properties" : {
          "searchTotalMatch" : {
            "type" : "integer",
            "format" : "int64"
          },
          "searchItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Cedant"
            }
          }
        }
      },
      "Bucket" : {
        "type" : "object"
      },
      "MetricMetadata" : {
        "type" : "object",
        "properties" : {
          "eventWeightId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "parameters" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "MetricValue" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "value" : {
            "$ref" : "#/components/schemas/Value"
          },
          "bucket" : {
            "$ref" : "#/components/schemas/Bucket"
          }
        }
      },
      "MetricsOutput" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "workflowId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "structure" : {
            "type" : "string"
          },
          "position" : {
            "type" : "string"
          },
          "portfolioId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "variationId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "dimensions" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "metricName" : {
            "type" : "string"
          },
          "metricMetadata" : {
            "$ref" : "#/components/schemas/MetricMetadata"
          },
          "modelSettings" : {
            "$ref" : "#/components/schemas/ModelSettings"
          },
          "metricValue" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MetricValue"
            }
          },
          "exposureNumber" : {
            "type" : "string"
          }
        }
      },
      "ModelSettings" : {
        "type" : "object",
        "properties" : {
          "modelProfileId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "currency" : {
            "$ref" : "#/components/schemas/Currency"
          },
          "minLossThreshold" : {
            "type" : "number",
            "format" : "float"
          },
          "numPeriods" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "Value" : {
        "type" : "object",
        "properties" : {
          "returnPeriods" : {
            "type" : "array",
            "items" : {
              "type" : "number",
              "format" : "double"
            }
          },
          "positionValues" : {
            "type" : "array",
            "items" : {
              "type" : "number",
              "format" : "double"
            }
          }
        }
      },
      "EPInterpolateResult" : {
        "type" : "object",
        "properties" : {
          "returnPeriod" : {
            "type" : "number",
            "format" : "double"
          },
          "criticalProbability" : {
            "type" : "number",
            "format" : "double"
          },
          "result" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Result"
            }
          }
        }
      },
      "Result" : {
        "type" : "object",
        "properties" : {
          "perspective" : {
            "type" : "string"
          },
          "values" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Values"
            }
          }
        }
      },
      "Values" : {
        "type" : "object",
        "properties" : {
          "metricName" : {
            "type" : "string"
          },
          "metricValue" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "EventLossItem" : {
        "type" : "object",
        "properties" : {
          "anlsid" : {
            "type" : "integer",
            "format" : "int32"
          },
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sourceid" : {
            "type" : "integer",
            "format" : "int32"
          },
          "eventid" : {
            "type" : "integer",
            "format" : "int32"
          },
          "perspvalue" : {
            "type" : "number",
            "format" : "double"
          },
          "perspcode" : {
            "type" : "string"
          },
          "stddevi" : {
            "type" : "number",
            "format" : "double"
          },
          "stddevc" : {
            "type" : "number",
            "format" : "double"
          },
          "expvalue" : {
            "type" : "number",
            "format" : "double"
          },
          "rate" : {
            "type" : "number",
            "format" : "double"
          },
          "status" : {
            "type" : "integer",
            "format" : "int32"
          },
          "peril" : {
            "type" : "string"
          },
          "region" : {
            "type" : "string"
          },
          "oepWUC" : {
            "type" : "number",
            "format" : "double"
          },
          "exposureNumber" : {
            "type" : "string"
          }
        }
      },
      "MetricsResult" : {
        "type" : "object",
        "properties" : {
          "searchTotalMatch" : {
            "type" : "integer",
            "format" : "int32"
          },
          "metricType" : {
            "type" : "string",
            "enum" : [ "STATS", "ELT", "EP" ]
          },
          "granularities" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "POLICY" ]
            }
          },
          "metrics" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "KeyLossItem" : {
        "type" : "object",
        "properties" : {
          "eventid" : {
            "type" : "integer",
            "format" : "int32"
          },
          "stddev" : {
            "type" : "number",
            "format" : "double"
          },
          "meanloss" : {
            "type" : "number",
            "format" : "double"
          },
          "cv" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "Pate" : {
        "required" : [ "attachLevel", "cedant", "treatyNumber", "treatyType" ],
        "type" : "object",
        "properties" : {
          "treatyId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "treatyNumber" : {
            "maxLength" : 20,
            "minLength" : 0,
            "type" : "string"
          },
          "treatyName" : {
            "maxLength" : 40,
            "minLength" : 0,
            "type" : "string"
          },
          "cedant" : {
            "$ref" : "#/components/schemas/Cedant"
          },
          "producer" : {
            "$ref" : "#/components/schemas/Producer"
          },
          "treatyType" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "currency" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "attachBasis" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "attachLevel" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "premium" : {
            "type" : "number",
            "format" : "double"
          },
          "occurLimit" : {
            "type" : "number",
            "format" : "double"
          },
          "attachPt" : {
            "type" : "number",
            "format" : "double"
          },
          "riskLimit" : {
            "type" : "number",
            "format" : "double"
          },
          "retentAmt" : {
            "type" : "number",
            "format" : "double"
          },
          "pcntPlaced" : {
            "type" : "number",
            "format" : "double"
          },
          "effectDate" : {
            "type" : "string"
          },
          "expireDate" : {
            "type" : "string"
          },
          "pcntRetent" : {
            "type" : "number",
            "format" : "double"
          },
          "pcntRiShare" : {
            "type" : "number",
            "format" : "double"
          },
          "pcntCovered" : {
            "type" : "number",
            "format" : "double"
          },
          "priority" : {
            "type" : "integer",
            "format" : "int32"
          },
          "numOfReinst" : {
            "type" : "integer",
            "format" : "int32"
          },
          "reinstCharge" : {
            "type" : "number",
            "format" : "double"
          },
          "maolAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "isValid" : {
            "type" : "boolean"
          },
          "userId1" : {
            "type" : "string"
          },
          "userId2" : {
            "type" : "string"
          },
          "lobs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LineOfBusiness"
            }
          },
          "aggregateDeductible" : {
            "type" : "number",
            "format" : "double"
          },
          "aggregateLimit" : {
            "type" : "number",
            "format" : "double"
          },
          "lossOccurrences" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LossOccurrence"
            }
          },
          "analysisId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pateId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "operationType" : {
            "type" : "string",
            "enum" : [ "INSERT", "DELETE", "UPDATE", "COPY", "IMPORT" ]
          },
          "groupId" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "PateSearchResult" : {
        "type" : "object",
        "properties" : {
          "totalMatchCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "searchMatchingPateList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Pate"
            }
          }
        }
      },
      "PeriodLossItem" : {
        "type" : "object",
        "properties" : {
          "periodid" : {
            "type" : "integer",
            "format" : "int32"
          },
          "weight" : {
            "type" : "number",
            "format" : "double"
          },
          "eventid" : {
            "type" : "integer",
            "format" : "int32"
          },
          "eventdate" : {
            "type" : "string"
          },
          "lossdate" : {
            "type" : "string"
          },
          "perspvalue" : {
            "type" : "number",
            "format" : "double"
          },
          "peril" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "region" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "exposureNumber" : {
            "type" : "string"
          }
        }
      },
      "EntityItem" : {
        "type" : "object",
        "properties" : {
          "domainName" : {
            "type" : "string"
          },
          "tableSpace" : {
            "type" : "string"
          },
          "tableName" : {
            "type" : "string"
          },
          "dataOwnedBy" : {
            "type" : "string"
          },
          "values" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          },
          "isActive" : {
            "type" : "boolean"
          }
        }
      },
      "EntityResult" : {
        "type" : "object",
        "properties" : {
          "entitiesTotalMatch" : {
            "type" : "integer",
            "format" : "int64"
          },
          "entityItems" : {
            "$ref" : "#/components/schemas/EntityItem"
          }
        }
      },
      "SampledLossItem" : {
        "type" : "object",
        "properties" : {
          "cedant" : {
            "type" : "string"
          },
          "lob" : {
            "type" : "string"
          },
          "losstype" : {
            "type" : "string"
          },
          "sampleid" : {
            "type" : "integer",
            "format" : "int32"
          },
          "eventid" : {
            "type" : "integer",
            "format" : "int32"
          },
          "loss" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "StatisticsItem" : {
        "type" : "object",
        "properties" : {
          "anlsid" : {
            "type" : "integer",
            "format" : "int64"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "perspcode" : {
            "type" : "string"
          },
          "eptype" : {
            "type" : "string"
          },
          "purepremium" : {
            "type" : "number",
            "format" : "double"
          },
          "totalstddev" : {
            "type" : "number",
            "format" : "double"
          },
          "netpurepremium" : {
            "type" : "number",
            "format" : "double"
          },
          "activation" : {
            "type" : "number",
            "format" : "double"
          },
          "exhaustion" : {
            "type" : "number",
            "format" : "double"
          },
          "totlossratio" : {
            "type" : "number",
            "format" : "double"
          },
          "limit" : {
            "type" : "number",
            "format" : "double"
          },
          "premium" : {
            "type" : "number",
            "format" : "double"
          },
          "netstddev" : {
            "type" : "number",
            "format" : "double"
          },
          "exhaustallreinstatements" : {
            "type" : "number",
            "format" : "double"
          },
          "exposurenumber" : {
            "type" : "string"
          }
        }
      },
      "Treaty" : {
        "required" : [ "attachLevel", "cedant", "treatyNumber", "treatyType" ],
        "type" : "object",
        "properties" : {
          "treatyId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "treatyNumber" : {
            "maxLength" : 20,
            "minLength" : 0,
            "type" : "string"
          },
          "treatyName" : {
            "maxLength" : 40,
            "minLength" : 0,
            "type" : "string"
          },
          "cedant" : {
            "$ref" : "#/components/schemas/Cedant"
          },
          "producer" : {
            "$ref" : "#/components/schemas/Producer"
          },
          "treatyType" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "currency" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "attachBasis" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "attachLevel" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "premium" : {
            "type" : "number",
            "format" : "double"
          },
          "occurLimit" : {
            "type" : "number",
            "format" : "double"
          },
          "attachPt" : {
            "type" : "number",
            "format" : "double"
          },
          "riskLimit" : {
            "type" : "number",
            "format" : "double"
          },
          "retentAmt" : {
            "type" : "number",
            "format" : "double"
          },
          "pcntPlaced" : {
            "type" : "number",
            "format" : "double"
          },
          "effectDate" : {
            "type" : "string"
          },
          "expireDate" : {
            "type" : "string"
          },
          "pcntRetent" : {
            "type" : "number",
            "format" : "double"
          },
          "pcntRiShare" : {
            "type" : "number",
            "format" : "double"
          },
          "pcntCovered" : {
            "type" : "number",
            "format" : "double"
          },
          "priority" : {
            "type" : "integer",
            "format" : "int32"
          },
          "numOfReinst" : {
            "type" : "integer",
            "format" : "int32"
          },
          "reinstCharge" : {
            "type" : "number",
            "format" : "double"
          },
          "maolAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "isValid" : {
            "type" : "boolean"
          },
          "userId1" : {
            "type" : "string"
          },
          "userId2" : {
            "type" : "string"
          },
          "lobs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LineOfBusiness"
            }
          },
          "aggregateDeductible" : {
            "type" : "number",
            "format" : "double"
          },
          "aggregateLimit" : {
            "type" : "number",
            "format" : "double"
          },
          "lossOccurrences" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LossOccurrence"
            }
          }
        }
      },
      "TreatySearchResult" : {
        "type" : "object",
        "properties" : {
          "totalMatchCount" : {
            "type" : "integer",
            "format" : "int64"
          },
          "searchMatchingTreatyList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Treaty"
            }
          }
        }
      },
      "MapPerspectiveInput" : {
        "required" : [ "mapPerspectiveOption", "newPerspective", "sourcePerspective" ],
        "type" : "object",
        "properties" : {
          "analysisName" : {
            "maxLength" : 64,
            "minLength" : 0,
            "pattern" : "^\\w((?!--)[\\w\\s:-])*\\w$|^\\w*$",
            "type" : "string",
            "description" : "The name for the analysis with mapped perspective. can only contain characters only 0-9, A-Z, a-z, underscore(_), hyphen(-), colon(:), and space. Can't start or end with hyphen, space, or colon, and can't include multiple consecutive hyphens (--)",
            "example" : "NewAnalysisName"
          },
          "sourcePerspective" : {
            "type" : "string"
          },
          "newPerspective" : {
            "type" : "string"
          },
          "mapPerspectiveOption" : {
            "type" : "string",
            "enum" : [ "INCLUDE_DOWNSTREAM", "DELETE_OTHER", "SELECTED_ONLY" ]
          }
        }
      },
      "MarginalImpactInput" : {
        "required" : [ "currency", "jobName", "outputType" ],
        "type" : "object",
        "properties" : {
          "marginalImpactAnalysisIds" : {
						"description":"ID of an account-level analysis result. Only one ID is supported in current release.",
            "maxItems" : 1,
            "minItems" : 1,
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "currency" : {
            "$ref" : "#/components/schemas/Currency"
          },
          "outputType" : {
						"description":"Granularity of the report. If `Account`, the report returns projected losses for all policies and locations grouped by peril. If `Policy` the report returns projected losses for all analyses grouped by policy.",
            "type" : "string",
            "enum" : [ "POLICY", "ACCOUNT" ]
          },
          "jobName" : {
            "description" : "Unique name for the job.",
            "maxLength" : 64,
            "minLength" : 1,
            "pattern" : "^\\w((?!--)[\\w\\s:-])*\\w$|^\\w*$",
            "type" : "string"
          },
          "rateSchemes" : {
            "description" : "Array of event rate scheme IDs to be used in metric calculations. If specified, overrides the event rate schemes used in the original analysis results.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EventRateScheme"
            }
          }
        }
      },
      "PateInput" : {
        "type" : "object",
        "properties" : {
          "insert" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Pate"
            }
          },
          "update" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Pate"
            }
          },
          "delete" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Pate"
            }
          }
        }
      },
      "ClimateChangeInput" : {
        "type" : "object",
        "properties" : {
          "analysisName" : {
            "type" : "string",
            "description" : "Name of the final climate change analysis. Can be alpha numeric string.",
            "example" : "ABC Climate"
          },
          "climateConditionView" : {
            "type" : "string",
            "description" : "allowableValues = {Combined All Parameters, Frequency and Intensity Only, Default}",
            "example" : "Combined All Parameters"
          },
          "referenceRateSchemeId" : {
            "type" : "integer",
            "description" : "Rate scheme Id for a particular model. allowableValues = {190 ,202 ,84 ,9}.  \n 190 ---> RMS 2019 Historical Event Rates,  \n 202 ---> RMS 2021 Historical Event Rates,  \n 84  ---> RMS 2015 Stochastic Event Rates,  \n 9 ---> RMS v2.0 Default Rates",
            "format" : "int32",
            "example" : 190
          },
          "rcpScenario" : {
            "type" : "number",
            "description" : "RCP scenario needed for this climate change analysis. allowableValues = {2.6, 4.5, 6.0, 8.5}",
            "format" : "double",
            "example" : 2.6
          },
          "timeHorizon" : {
            "type" : "integer",
            "description" : "Time Horizon for this climate change analysis. Can only be between 2020 and 2100 in 5 year increment.  \n Example - 2020, 2025, 2030, 2035, ....",
            "format" : "int32",
            "example" : 2025
          },
          "is2CWarmingScenario" : {
            "type" : "boolean"
          }
        }
      },
      "SimulateELTToPLTInput" : {
        "required" : [ "simulationPeriods", "simulationSetId" ],
        "type" : "object",
        "properties" : {
          "regionCode" : {
            "type" : "string"
          },
          "perilCode" : {
            "type" : "string"
          },
          "engineVersion" : {
            "type" : "string"
          },
          "eventRateSchemeId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "simulationSetId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "simulationSetName" : {
            "type" : "string"
          },
          "simulationPeriods" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "RenameAnalysisInput" : {
        "type" : "object",
        "properties" : {
          "newAnalysisName" : {
            "type" : "string"
          }
        }
      },
      "AnalysisGroupWithSimulation" : {
        "required" : [ "analysisIds", "currency", "name", "numOfSimulations", "propagateDetailedLosses", "simulateToPLT" ],
        "type" : "object",
        "properties" : {
          "groupId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "analysisIds" : {
            "maxItems" : 2147483647,
            "minItems" : 1,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "reportingWindowStart" : {
            "maxLength" : 2147483647,
            "minLength" : 1,
            "type" : "string"
          },
          "numOfSimulations" : {
            "type" : "integer",
            "format" : "int64"
          },
          "simulationWindowStart" : {
            "maxLength" : 2147483647,
            "minLength" : 1,
            "type" : "string"
          },
          "simulationWindowEnd" : {
            "maxLength" : 2147483647,
            "minLength" : 1,
            "type" : "string"
          },
          "simulateToPLT" : {
            "type" : "boolean"
          },
          "propagateDetailedLosses" : {
            "type" : "boolean"
          },
          "regionPerilSimulationSet" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RegionPerilSimulation"
            }
          },
          "minimizedRegionPerilSimulationSet" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RegionPerilSimulation"
            }
          },
          "name" : {
            "maxLength" : 64,
            "minLength" : 1,
            "pattern" : "^\\w((?!--)[\\w\\s:-])*\\w$|^\\w*$",
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "currency" : {
            "$ref" : "#/components/schemas/Currency"
          }
        }
      },
      "RegionPerilSimulation" : {
        "required" : [ "simulationPeriods", "simulationSetId" ],
        "type" : "object",
        "properties" : {
          "perilCode" : {
            "type" : "string"
          },
          "modelVersion" : {
            "type" : "string"
          },
          "eventRateSchemeId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "regionCode" : {
            "type" : "string"
          },
          "simulationSetId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "simulationPeriods" : {
            "type" : "integer",
            "format" : "int64"
          },
          "modelRegionCode" : {
            "type" : "string"
          },
          "eltAnalysisId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "engineVersion" : {
            "type" : "string"
          }
        }
      },
      "InconsistentField" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "treatyIds" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        }
      },
      "InconsistentTreaties" : {
        "type" : "object",
        "properties" : {
          "treaties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TreatyWithAnalysisInfoV2"
            }
          },
          "inconsistentFields" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InconsistentField"
            }
          }
        }
      },
      "TreatyWithAnalysisInfoV2" : {
        "required" : [ "attachLevel", "cedant", "treatyNumber", "treatyType" ],
        "type" : "object",
        "properties" : {
          "treatyId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "treatyNumber" : {
            "maxLength" : 20,
            "minLength" : 0,
            "type" : "string"
          },
          "treatyName" : {
            "maxLength" : 40,
            "minLength" : 0,
            "type" : "string"
          },
          "cedant" : {
            "$ref" : "#/components/schemas/Cedant"
          },
          "producer" : {
            "$ref" : "#/components/schemas/Producer"
          },
          "treatyType" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "currency" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "attachBasis" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "attachLevel" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "premium" : {
            "type" : "number",
            "format" : "double"
          },
          "occurLimit" : {
            "type" : "number",
            "format" : "double"
          },
          "attachPt" : {
            "type" : "number",
            "format" : "double"
          },
          "riskLimit" : {
            "type" : "number",
            "format" : "double"
          },
          "retentAmt" : {
            "type" : "number",
            "format" : "double"
          },
          "pcntPlaced" : {
            "type" : "number",
            "format" : "double"
          },
          "effectDate" : {
            "type" : "string"
          },
          "expireDate" : {
            "type" : "string"
          },
          "pcntRetent" : {
            "type" : "number",
            "format" : "double"
          },
          "pcntRiShare" : {
            "type" : "number",
            "format" : "double"
          },
          "pcntCovered" : {
            "type" : "number",
            "format" : "double"
          },
          "priority" : {
            "type" : "integer",
            "format" : "int32"
          },
          "numOfReinst" : {
            "type" : "integer",
            "format" : "int32"
          },
          "reinstCharge" : {
            "type" : "number",
            "format" : "double"
          },
          "maolAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "isValid" : {
            "type" : "boolean"
          },
          "userId1" : {
            "type" : "string"
          },
          "userId2" : {
            "type" : "string"
          },
          "lobs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LineOfBusiness"
            }
          },
          "aggregateDeductible" : {
            "type" : "number",
            "format" : "double"
          },
          "aggregateLimit" : {
            "type" : "number",
            "format" : "double"
          },
          "lossOccurrences" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LossOccurrence"
            }
          },
          "analysisId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "analysisName" : {
            "type" : "string"
          },
          "regionPerilId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "regionPeril" : {
            "type" : "string"
          },
          "lossOccurrenceTime" : {
            "type" : "integer",
            "format" : "int32"
          },
          "lossOccurrenceRadius" : {
            "type" : "integer",
            "format" : "int32"
          },
          "radiusUnitId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "radiusUnit" : {
            "type" : "string"
          },
          "multiLossOccurrence" : {
            "type" : "string"
          }
        }
      },
      "AnalysesItemV2" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          },
          "runDate" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "rdmName" : {
            "type" : "string"
          },
          "regroup" : {
            "type" : "integer",
            "format" : "int32"
          },
          "exposureType" : {
            "type" : "integer",
            "format" : "int32"
          },
          "engineVersion" : {
            "type" : "string"
          },
          "groupType" : {
            "type" : "string"
          },
          "cedant" : {
            "type" : "string"
          },
          "lob" : {
            "type" : "string"
          },
          "exposureId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "dataSource" : {
            "type" : "string"
          },
          "riGuid" : {
            "type" : "string"
          },
          "jobId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "jobUUID" : {
            "type" : "string"
          },
          "isGroup" : {
            "type" : "boolean"
          },
          "modelProfile" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "outputProfile" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "engine" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "status" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "type" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "peril" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "subPeril" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "region" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "lossAmplification" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "mode" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "insuranceType" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "vulnerabilityCurve" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "user" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "eventRateSchemes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "currency" : {
            "$ref" : "#/components/schemas/AnalysisCurrency"
          },
          "engineSubType" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "framework" : {
            "type" : "string"
          },
          "simulationSetId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "simulationPeriods" : {
            "type" : "integer",
            "format" : "int32"
          },
          "exposureSetId" : {
            "type" : "string"
          }
        }
      },
      "AnalysisCurrency" : {
        "required" : [ "asOfDate", "code", "scheme", "vintage" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "code" : {
            "type" : "string"
          },
          "scheme" : {
            "type" : "string"
          },
          "asOfDate" : {
            "type" : "string"
          },
          "vintage" : {
            "type" : "string"
          }
        }
      },
      "AnalysisSearchResultV2" : {
        "type" : "object",
        "properties" : {
          "searchTotalMatch" : {
            "type" : "integer",
            "format" : "int64"
          },
          "searchItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AnalysesItemV2"
            }
          }
        }
      },
      "AnalysisRegionSearchResultV2" : {
        "type" : "object",
        "properties" : {
          "searchTotalMatch" : {
            "type" : "integer",
            "format" : "int64"
          },
          "searchItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RegionItemV2"
            }
          }
        }
      },
      "RegionItemV2" : {
        "type" : "object",
        "properties" : {
          "region" : {
            "type" : "string"
          },
          "subRegion" : {
            "type" : "string"
          },
          "peril" : {
            "type" : "string"
          },
          "rateSchemeId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "framework" : {
            "type" : "string"
          },
          "analysisId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "modelProfileId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "petId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "numSamples" : {
            "type" : "integer",
            "format" : "int32"
          },
          "periods" : {
            "type" : "integer",
            "format" : "int32"
          },
          "applyContractFlag" : {
            "type" : "boolean"
          },
          "engineVersion" : {
            "type" : "string"
          }
        }
      },
      "ExposureMetricRequest" : {
        "required" : [ "dataSourceName" ],
        "type" : "object",
        "properties" : {
          "dataSourceName" : {
            "type" : "string"
          },
          "currency" : {
            "type" : "string"
          },
          "portfolios" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "accounts" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        }
      },
      "CopyAccountInfo" : {
        "required" : [ "newNumber" ],
        "type" : "object",
        "properties" : {
          "newNumber" : {
            "type" : "string"
          },
          "newName" : {
            "type" : "string"
          },
          "linked" : {
            "type" : "boolean"
          }
        }
      },
      "Account" : {
        "required" : [ "number" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          },
          "number" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string"
          },
          "cedant" : {
            "$ref" : "#/components/schemas/Cedant"
          },
          "producer" : {
            "$ref" : "#/components/schemas/Producer"
          },
          "underwriter" : {
            "$ref" : "#/components/schemas/UnderWriter"
          },
          "branch" : {
            "$ref" : "#/components/schemas/Branch"
          },
          "userId1" : {
            "type" : "string"
          },
          "userId2" : {
            "type" : "string"
          },
          "userId3" : {
            "type" : "string"
          },
          "userId4" : {
            "type" : "string"
          },
          "userText1" : {
            "type" : "string"
          },
          "userText2" : {
            "type" : "string"
          },
          "createDate" : {
            "type" : "string"
          },
          "stampDate" : {
            "type" : "string"
          },
          "state" : {
            "type" : "string",
            "enum" : [ "InActive", "Active" ]
          },
          "linkId" : {
            "type" : "string"
          },
          "guid" : {
            "type" : "string"
          },
          "isValid" : {
            "type" : "boolean"
          },
          "CustomData" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }
      },
      "Branch" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "maxLength" : 30,
            "minLength" : 0,
            "type" : "string"
          }
        }
      },
      "UnderWriter" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "maxLength" : 30,
            "minLength" : 0,
            "type" : "string"
          }
        }
      },
      "LayerInfo" : {
        "required" : [ "engineType", "name", "type", "version" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          },
          "engineType" : {
            "type" : "string"
          },
          "version" : {
            "type" : "string"
          },
          "layerOptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }
      },
      "AccountMetrics" : {
        "type" : "object",
        "properties" : {
          "totalLocations" : {
            "type" : "integer",
            "format" : "int32"
          },
          "totalPolicies" : {
            "type" : "integer",
            "format" : "int32"
          },
          "totalEmployees" : {
            "type" : "number",
            "format" : "double"
          },
          "totalInsuredValue" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "perilsExposed" : {
            "type" : "string"
          },
          "linkedAccount" : {
            "$ref" : "#/components/schemas/Account"
          },
          "linkedDatasource" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "number" : {
            "type" : "string"
          },
          "owner" : {
            "type" : "string"
          },
          "underwriter" : {
            "type" : "string"
          },
          "producer" : {
            "type" : "string"
          },
          "branch" : {
            "type" : "string"
          },
          "cedant" : {
            "type" : "string"
          },
          "geocodeVersion" : {
            "type" : "string"
          },
          "hazardVersion" : {
            "type" : "string"
          },
          "createDate" : {
            "type" : "string"
          }
        }
      },
      "Amount" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "number",
            "format" : "double"
          },
          "currencyCode" : {
            "type" : "string"
          }
        }
      },
      "Coordinate" : {
        "type" : "object",
        "properties" : {
          "locationId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "locationNumber" : {
            "type" : "string"
          },
          "latitude" : {
            "type" : "number",
            "format" : "double"
          },
          "longitude" : {
            "type" : "number",
            "format" : "double"
          },
          "streetAddress" : {
            "type" : "string"
          },
          "geoResolutionCode" : {
            "$ref" : "#/components/schemas/ExposureValue"
          }
        }
      },
      "CountryMetrics" : {
        "type" : "object",
        "properties" : {
          "country" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "locationCount" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "MetricRequest" : {
        "type" : "object",
        "properties" : {
          "granularity" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "metricType" : {
            "type" : "string"
          },
          "perspective" : {
            "type" : "string"
          },
          "includeIntermediateSums" : {
            "type" : "boolean"
          }
        }
      },
      "OutputProfile" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "metricRequests" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MetricRequest"
            }
          }
        }
      },
      "ProcessInput" : {
        "required" : [ "currency", "edm", "outputSetting" ],
        "type" : "object",
        "properties" : {
          "exposureType" : {
            "type" : "string",
            "enum" : [ "PORTFOLIO", "ACCOUNT", "LOCATION", "POLICY", "STEP_POLICY", "TREATY", "AGGPORTFOLIO" ]
          },
          "edm" : {
            "type" : "string"
          },
          "currency" : {
            "$ref" : "#/components/schemas/Currency"
          },
          "modelProfileId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "eventRateSchemeId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "treaties" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "jobName" : {
            "maxLength" : 64,
            "minLength" : 0,
            "pattern" : "^\\w((?!--)[\\w\\s:-])*\\w$|^\\w*$",
            "type" : "string"
          },
          "id" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          },
          "outputSetting" : {
            "$ref" : "#/components/schemas/OutputProfile"
          },
          "outputProfile" : {
            "type" : "string"
          }
        }
      },
      "AccountSearchItem" : {
        "type" : "object",
        "properties" : {
          "accountId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "accountNumber" : {
            "type" : "string"
          },
          "accountName" : {
            "type" : "string"
          },
          "cedantName" : {
            "type" : "string"
          },
          "producerName" : {
            "type" : "string"
          },
          "underwriterName" : {
            "type" : "string"
          },
          "branchName" : {
            "type" : "string"
          },
          "numLocations" : {
            "type" : "integer",
            "format" : "int32"
          },
          "userId1" : {
            "type" : "string"
          },
          "userId2" : {
            "type" : "string"
          },
          "userId3" : {
            "type" : "string"
          },
          "userId4" : {
            "type" : "string"
          },
          "userText1" : {
            "type" : "string"
          },
          "userText2" : {
            "type" : "string"
          },
          "geocodeVersion" : {
            "type" : "string"
          },
          "hazardVersion" : {
            "type" : "string"
          },
          "ownerName" : {
            "type" : "string"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "stampDate" : {
            "type" : "string"
          },
          "jobStatus" : {
            "type" : "string"
          },
          "jobStartDate" : {
            "type" : "string"
          },
          "jobEndDate" : {
            "type" : "string"
          },
          "resultsCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "policyExpirationDate" : {
            "type" : "string"
          },
          "policyExpirationStatus" : {
            "type" : "string"
          },
          "totalTIV" : {
            "type" : "number",
            "format" : "float"
          }
        }
      },
      "AccountSearchResult" : {
        "type" : "object",
        "properties" : {
          "searchTotalMatch" : {
            "type" : "integer",
            "format" : "int64"
          },
          "searchItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AccountSearchItem"
            }
          }
        }
      },
      "Band" : {
        "required" : [ "greaterThanOrEqualTo" ],
        "type" : "object",
        "properties" : {
          "greaterThanOrEqualTo" : {
            "minimum" : 0,
            "type" : "number",
            "format" : "double"
          },
          "lessThan" : {
            "maximum" : 10000,
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "CustomBand" : {
        "required" : [ "hazard" ],
        "type" : "object",
        "properties" : {
          "hazard" : {
            "type" : "string"
          },
          "bands" : {
            "maxItems" : 10,
            "minItems" : 1,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Band"
            }
          }
        }
      },
      "ExposureSummaryReportInput" : {
        "required" : [ "perilList" ],
        "type" : "object",
        "properties" : {
          "perilList" : {
            "maxItems" : 2147483647,
            "minItems" : 1,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "reportName" : {
            "type" : "string"
          },
          "customBands" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CustomBand"
            }
          }
        }
      },
      "LocationConditionValidationInfo" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string"
          },
          "policyNumber" : {
            "type" : "string"
          },
          "locationNumber" : {
            "type" : "string"
          },
          "locationName" : {
            "type" : "string"
          },
          "condition1" : {
            "type" : "string"
          },
          "condition2" : {
            "type" : "string"
          }
        }
      },
      "CopyAggregatePortfolioInfo" : {
        "required" : [ "newName", "newNumber" ],
        "type" : "object",
        "properties" : {
          "newNumber" : {
            "maxLength" : 20,
            "minLength" : 0,
            "type" : "string"
          },
          "newName" : {
            "maxLength" : 40,
            "minLength" : 0,
            "type" : "string"
          }
        }
      },
      "AggregatePortfolio" : {
        "required" : [ "cedant", "name", "number", "peril" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "number" : {
            "maxLength" : 20,
            "minLength" : 0,
            "type" : "string"
          },
          "name" : {
            "maxLength" : 40,
            "minLength" : 0,
            "type" : "string"
          },
          "source" : {
            "maxLength" : 10,
            "minLength" : 0,
            "type" : "string"
          },
          "cedant" : {
            "$ref" : "#/components/schemas/Cedant"
          },
          "currency" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "createDate" : {
            "type" : "string"
          },
          "peril" : {
            "$ref" : "#/components/schemas/ExposureValue"
          }
        }
      },
      "AggregatePortfolioSearchItem" : {
        "required" : [ "cedant", "name", "number", "peril" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "number" : {
            "maxLength" : 20,
            "minLength" : 0,
            "type" : "string"
          },
          "name" : {
            "maxLength" : 40,
            "minLength" : 0,
            "type" : "string"
          },
          "source" : {
            "maxLength" : 10,
            "minLength" : 0,
            "type" : "string"
          },
          "cedant" : {
            "$ref" : "#/components/schemas/Cedant"
          },
          "currency" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "createDate" : {
            "type" : "string"
          },
          "peril" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "ownerName" : {
            "type" : "string"
          }
        }
      },
      "AggregatePortfolioMetrics" : {
        "type" : "object",
        "properties" : {
          "totalAggregateExposures" : {
            "type" : "integer",
            "format" : "int32"
          },
          "perilsExposed" : {
            "type" : "string"
          },
          "total" : {
            "type" : "number",
            "format" : "double"
          },
          "name" : {
            "type" : "string"
          },
          "number" : {
            "type" : "string"
          },
          "source" : {
            "type" : "string"
          },
          "currency" : {
            "type" : "string"
          },
          "createDate" : {
            "type" : "string"
          },
          "owner" : {
            "type" : "string"
          },
          "cedant" : {
            "type" : "string"
          }
        }
      },
      "AggregatePortfolioCountryMetrics" : {
        "type" : "object",
        "properties" : {
          "countryMetrics" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        }
      },
      "AlmProfileInfo" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "internalId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "profileName" : {
            "type" : "string"
          },
          "profileType" : {
            "type" : "string"
          },
          "country" : {
            "type" : "string"
          },
          "peril" : {
            "type" : "string"
          },
          "rmsLob" : {
            "type" : "string"
          },
          "geoRes" : {
            "type" : "string"
          },
          "trackingId" : {
            "type" : "string"
          },
          "descFin" : {
            "type" : "string"
          },
          "descReg" : {
            "type" : "string"
          },
          "descInv" : {
            "type" : "string"
          },
          "dataTab" : {
            "type" : "string"
          },
          "softwareVersionCode" : {
            "type" : "string"
          }
        }
      },
      "DefaultAlmProfilesResponse" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "format" : "int32"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AlmProfileInfo"
            }
          }
        }
      },
      "AlmProcessInput" : {
        "required" : [ "almProfileIds", "currency", "edm" ],
        "type" : "object",
        "properties" : {
          "exposureType" : {
            "type" : "string",
            "enum" : [ "PORTFOLIO", "ACCOUNT", "LOCATION", "POLICY", "STEP_POLICY", "TREATY", "AGGPORTFOLIO" ]
          },
          "edm" : {
            "type" : "string"
          },
          "currency" : {
            "$ref" : "#/components/schemas/Currency"
          },
          "modelProfileId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "eventRateSchemeId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "treaties" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "jobName" : {
            "maxLength" : 64,
            "minLength" : 0,
            "pattern" : "^\\w((?!--)[\\w\\s:-])*\\w$|^\\w*$",
            "type" : "string"
          },
          "id" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          },
          "almProfileIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "analysisMode" : {
            "type" : "string"
          },
          "portEltByGeoidByLobByCedant" : {
            "type" : "boolean"
          },
          "portStatsByGeoidByLobByCedant" : {
            "type" : "boolean"
          },
          "portStatsByGeoidByCedant" : {
            "type" : "boolean"
          }
        }
      },
      "AggregateExposuresList" : {
        "type" : "object",
        "properties" : {
          "values" : {
            "type" : "array",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "number",
                "format" : "double"
              }
            }
          },
          "lobs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "resolutionValues" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          },
          "errorMessages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AlmErrorMessage"
            }
          },
          "countryCode" : {
            "type" : "string"
          },
          "resolution" : {
            "type" : "string"
          },
          "dependencyResolution" : {
            "type" : "string"
          }
        }
      },
      "AlmErrorMessage" : {
        "type" : "object",
        "properties" : {
          "row" : {
            "type" : "string"
          },
          "column" : {
            "type" : "string"
          },
          "text" : {
            "type" : "string"
          }
        }
      },
      "AggregatePortfolioSearchResult" : {
        "type" : "object",
        "properties" : {
          "searchTotalMatch" : {
            "type" : "integer",
            "format" : "int64"
          },
          "searchItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AggregatePortfolioSearchItem"
            }
          }
        }
      },
      "BranchSearchResult" : {
        "type" : "object",
        "properties" : {
          "searchTotalMatch" : {
            "type" : "integer",
            "format" : "int64"
          },
          "searchItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Branch"
            }
          }
        }
      },
      "PolicyCondition" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          },
          "isPredefined" : {
            "type" : "boolean"
          },
          "limit" : {
            "type" : "number",
            "format" : "double"
          },
          "deductible" : {
            "type" : "number",
            "format" : "double"
          },
          "deductibleType" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "conditionType" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "parentCondition" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "policyNumber" : {
            "type" : "string"
          },
          "policyConditionCriterias" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PolicyConditionCriteria"
            }
          },
          "percentOfLossDeductibleAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "isFranchiseDeductible" : {
            "$ref" : "#/components/schemas/ExposureValue"
          }
        }
      },
      "PolicyConditionCriteria" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "logic" : {
            "type" : "string"
          },
          "openPar" : {
            "type" : "string"
          },
          "field" : {
            "type" : "string"
          },
          "operator" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          },
          "closePar" : {
            "type" : "string"
          }
        }
      },
      "BatchRequest" : {
        "type" : "object",
        "properties" : {
          "method" : {
            "type" : "string"
          },
          "path" : {
            "type" : "string"
          },
          "body" : {
            "type" : "string"
          }
        }
      },
      "Facultative" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "maxLength" : 20,
            "minLength" : 0,
            "pattern" : "^\\w([\\w-]*\\w|)$",
            "type" : "string"
          },
          "name" : {
            "maxLength" : 40,
            "minLength" : 0,
            "type" : "string"
          }
        }
      },
      "FacultativeSearchResult" : {
        "type" : "object",
        "properties" : {
          "searchTotalMatch" : {
            "type" : "integer",
            "format" : "int64"
          },
          "searchItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Facultative"
            }
          }
        }
      },
      "ArithmeticExpression" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Expression"
        }, {
          "type" : "object",
          "properties" : {
            "expression" : {
              "$ref" : "#/components/schemas/Expression"
            },
            "arithmeticPairs" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ArithmeticPair"
              }
            }
          }
        } ]
      },
      "ArithmeticPair" : {
        "type" : "object",
        "properties" : {
          "operator" : {
            "type" : "string",
            "enum" : [ "ADD", "SUBTRACT", "MULTIPLY", "DIVIDE" ]
          },
          "expression" : {
            "$ref" : "#/components/schemas/Expression"
          }
        }
      },
      "Assignment" : {
        "type" : "object",
        "properties" : {
          "identifier" : {
            "$ref" : "#/components/schemas/Identifier"
          },
          "operator" : {
            "type" : "string",
            "enum" : [ "EQUAL", "ADD", "SUBTRACT", "MULTIPLY", "DIVIDE" ]
          },
          "expression" : {
            "$ref" : "#/components/schemas/Expression"
          }
        }
      },
      "BooleanCondition" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Condition"
        }, {
          "type" : "object",
          "properties" : {
            "condition" : {
              "$ref" : "#/components/schemas/Condition"
            },
            "booleanPairs" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/BooleanPair"
              }
            }
          }
        } ]
      },
      "BooleanPair" : {
        "type" : "object",
        "properties" : {
          "operator" : {
            "type" : "string",
            "enum" : [ "AND", "OR" ]
          },
          "condition" : {
            "$ref" : "#/components/schemas/Condition"
          }
        }
      },
      "BooleanValue" : {
        "type" : "string",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Expression"
        } ],
        "enum" : [ "true", "false" ]
      },
      "BulkEdit" : {
        "required" : [ "editType", "exposureId", "exposureType", "updates" ],
        "type" : "object",
        "properties" : {
          "exposureId" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          },
          "editType" : {
            "type" : "string",
            "enum" : [ "POLICY", "LOCATION", "ACCOUNT" ]
          },
          "editQuery" : {
            "type" : "string"
          },
          "exposureType" : {
            "type" : "string",
            "enum" : [ "PORTFOLIO", "ACCOUNT", "LOCATION", "POLICY", "STEP_POLICY", "TREATY", "AGGPORTFOLIO" ]
          },
          "editCondition" : {
            "$ref" : "#/components/schemas/Condition"
          },
          "updates" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "updateConditions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Assignment"
            }
          },
          "outputClause" : {
            "type" : "string"
          }
        }
      },
      "ChildIdentifier" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Expression"
        }, {
          "type" : "object",
          "properties" : {
            "name" : {
              "type" : "string"
            },
            "columnName" : {
              "type" : "string"
            },
            "tableName" : {
              "type" : "string"
            },
            "castTo" : {
              "type" : "string",
              "enum" : [ "INTEGER", "STRING", "STATUS", "LIST", "TIMESTAMP", "OPERATOR", "STATUS_ICON", "LINK", "FLOAT", "BOOLEAN", "DATE_ONLY", "PERCENT", "OBJECT", "LONG", "NULL" ]
            },
            "clearDataResolution" : {
              "type" : "boolean"
            },
            "dataResolutionUS" : {
              "type" : "boolean"
            },
            "validation" : {
              "type" : "string"
            },
            "filterable" : {
              "type" : "boolean"
            },
            "foreignKeyColumnName" : {
              "type" : "string"
            },
            "subqueryTableName" : {
              "type" : "string"
            },
            "subqueryIdentifier" : {
              "$ref" : "#/components/schemas/Identifier"
            }
          }
        } ]
      },
      "Condition" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string"
          }
        },
        "discriminator" : {
          "propertyName" : "type"
        }
      },
      "DateOnlyValue" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Expression"
        }, {
          "type" : "object",
          "properties" : {
            "year" : {
              "type" : "integer",
              "format" : "int32"
            },
            "month" : {
              "type" : "integer",
              "format" : "int32"
            },
            "dayOfMonth" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        } ]
      },
      "DecimalValue" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Expression"
        }, {
          "type" : "object",
          "properties" : {
            "value" : {
              "type" : "number"
            }
          }
        } ]
      },
      "Expression" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "dataType" : {
            "type" : "string",
            "enum" : [ "INTEGER", "STRING", "STATUS", "LIST", "TIMESTAMP", "OPERATOR", "STATUS_ICON", "LINK", "FLOAT", "BOOLEAN", "DATE_ONLY", "PERCENT", "OBJECT", "LONG", "NULL" ]
          },
          "type" : {
            "type" : "string"
          }
        },
        "discriminator" : {
          "propertyName" : "type"
        }
      },
      "ForeignKeyIdentifier" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Expression"
        }, {
          "type" : "object",
          "properties" : {
            "name" : {
              "type" : "string"
            },
            "columnName" : {
              "type" : "string"
            },
            "tableName" : {
              "type" : "string"
            },
            "castTo" : {
              "type" : "string",
              "enum" : [ "INTEGER", "STRING", "STATUS", "LIST", "TIMESTAMP", "OPERATOR", "STATUS_ICON", "LINK", "FLOAT", "BOOLEAN", "DATE_ONLY", "PERCENT", "OBJECT", "LONG", "NULL" ]
            },
            "clearDataResolution" : {
              "type" : "boolean"
            },
            "dataResolutionUS" : {
              "type" : "boolean"
            },
            "validation" : {
              "type" : "string"
            },
            "filterable" : {
              "type" : "boolean"
            },
            "primaryKeyColumnName" : {
              "type" : "string"
            },
            "subqueryIdentifier" : {
              "$ref" : "#/components/schemas/Identifier"
            }
          }
        } ]
      },
      "Identifier" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Expression"
        }, {
          "type" : "object",
          "properties" : {
            "name" : {
              "type" : "string"
            },
            "columnName" : {
              "type" : "string"
            },
            "tableName" : {
              "type" : "string"
            },
            "castTo" : {
              "type" : "string",
              "enum" : [ "INTEGER", "STRING", "STATUS", "LIST", "TIMESTAMP", "OPERATOR", "STATUS_ICON", "LINK", "FLOAT", "BOOLEAN", "DATE_ONLY", "PERCENT", "OBJECT", "LONG", "NULL" ]
            },
            "clearDataResolution" : {
              "type" : "boolean"
            },
            "dataResolutionUS" : {
              "type" : "boolean"
            },
            "validation" : {
              "type" : "string"
            },
            "filterable" : {
              "type" : "boolean"
            }
          }
        } ]
      },
      "InListCondition" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Condition"
        }, {
          "type" : "object",
          "properties" : {
            "identifier" : {
              "$ref" : "#/components/schemas/Identifier"
            },
            "not" : {
              "type" : "boolean"
            },
            "values" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ValueObject"
              }
            }
          }
        } ]
      },
      "IntegerValue" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Expression"
        }, {
          "type" : "object",
          "properties" : {
            "value" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        } ]
      },
      "LongValue" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Expression"
        }, {
          "type" : "object",
          "properties" : {
            "value" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        } ]
      },
      "MatchingCondition" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Condition"
        }, {
          "type" : "object",
          "properties" : {
            "identifier" : {
              "$ref" : "#/components/schemas/Identifier"
            },
            "not" : {
              "type" : "boolean"
            },
            "pattern" : {
              "type" : "string"
            }
          }
        } ]
      },
      "NullValue" : {
        "type" : "string",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Expression"
        } ],
        "enum" : [ "NULL" ]
      },
      "RelationalCondition" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Condition"
        }, {
          "type" : "object",
          "properties" : {
            "identifier" : {
              "$ref" : "#/components/schemas/Identifier"
            },
            "operator" : {
              "type" : "string",
              "enum" : [ "EQUAL", "NOT_EQUAL", "LESS_THAN", "GREATER_THAN", "LTE", "GTE" ]
            },
            "expression" : {
              "$ref" : "#/components/schemas/Expression"
            }
          }
        } ]
      },
      "StringValue" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Expression"
        }, {
          "type" : "object",
          "properties" : {
            "value" : {
              "type" : "string"
            }
          }
        } ]
      },
      "SubqueryCondition" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Condition"
        }, {
          "type" : "object",
          "properties" : {
            "identifier" : {
              "$ref" : "#/components/schemas/Identifier"
            },
            "columnName" : {
              "type" : "string"
            },
            "tableName" : {
              "type" : "string"
            },
            "conditionColumnName" : {
              "type" : "string"
            },
            "conditionValue" : {
              "type" : "string"
            }
          }
        } ]
      },
      "TimestampValue" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Expression"
        }, {
          "type" : "object",
          "properties" : {
            "epochSeconds" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        } ]
      },
      "ValueObject" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "object"
          }
        }
      },
      "YearBuiltIdentifier" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Expression"
        }, {
          "type" : "object",
          "properties" : {
            "name" : {
              "type" : "string"
            },
            "columnName" : {
              "type" : "string"
            },
            "tableName" : {
              "type" : "string"
            },
            "validation" : {
              "type" : "string"
            },
            "castTo" : {
              "type" : "string",
              "enum" : [ "INTEGER", "STRING", "STATUS", "LIST", "TIMESTAMP", "OPERATOR", "STATUS_ICON", "LINK", "FLOAT", "BOOLEAN", "DATE_ONLY", "PERCENT", "OBJECT", "LONG", "NULL" ]
            },
            "clearDataResolution" : {
              "type" : "boolean"
            },
            "dataResolutionUS" : {
              "type" : "boolean"
            },
            "filterable" : {
              "type" : "boolean"
            }
          }
        } ]
      },
      "LineOfBusinessSearchResult" : {
        "type" : "object",
        "properties" : {
          "searchTotalMatch" : {
            "type" : "integer",
            "format" : "int64"
          },
          "searchItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LineOfBusiness"
            }
          }
        }
      },
      "BuildingAttribute" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "yearBuilt" : {
            "type" : "string"
          },
          "isValid" : {
            "type" : "boolean"
          },
          "roofDeckType" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "roofDeckResistanceField" : {
            "type" : "number",
            "format" : "double"
          },
          "windowGlassdoorProtectionType" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "windowGlassdoorThickness" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "windowGlassdoorDoublepane" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "windowGlassdoorProtectionAdequacy" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "roofCoverType" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "rooftopEquipment" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "skylightAreaPercent" : {
            "type" : "number",
            "format" : "double"
          },
          "dockDoorAreaPercent" : {
            "type" : "number",
            "format" : "double"
          },
          "dockDoorPressureResistance" : {
            "type" : "number",
            "format" : "double"
          },
          "skylightImpactResistance" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "roofCoverResistanceCorner" : {
            "type" : "number",
            "format" : "double"
          },
          "roofSlope" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "flashingPulloutResistance" : {
            "type" : "number",
            "format" : "double"
          },
          "missileExposure" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "roofCoverResistancePerimeter" : {
            "type" : "number",
            "format" : "double"
          },
          "roofDeckResistancePerimeter" : {
            "type" : "number",
            "format" : "double"
          },
          "claddingPressureResistance" : {
            "type" : "number",
            "format" : "double"
          },
          "windowGlassdoorGlassType" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "claddingType" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "windowGlassdoorAreaPercent" : {
            "type" : "number",
            "format" : "double"
          },
          "roofDeckResistanceCorner" : {
            "type" : "number",
            "format" : "double"
          },
          "roofCoverResistanceField" : {
            "type" : "number",
            "format" : "double"
          },
          "roofArea" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "Address" : {
        "type" : "object",
        "properties" : {
          "addressId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "area" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "buildingId" : {
            "type" : "string"
          },
          "buildingName" : {
            "type" : "string"
          },
          "addressType" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "country" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "countryScheme" : {
            "type" : "string"
          },
          "countryGeoId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "countryRmsCode" : {
            "type" : "string"
          },
          "latitude" : {
            "type" : "number",
            "format" : "double"
          },
          "longitude" : {
            "type" : "number",
            "format" : "double"
          },
          "addressText" : {
            "type" : "string"
          },
          "streetAddress" : {
            "type" : "string"
          },
          "cityCode" : {
            "type" : "string"
          },
          "cityName" : {
            "type" : "string"
          },
          "cityGeoId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "postalCode" : {
            "type" : "string"
          },
          "postalGeoId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "block" : {
            "type" : "string"
          },
          "blockGroup" : {
            "type" : "string"
          },
          "locationCode" : {
            "type" : "string"
          },
          "locationCodeGeoId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "parcelNumber" : {
            "type" : "string"
          },
          "subLocality" : {
            "type" : "string"
          },
          "geoResolutionConfidence" : {
            "type" : "number",
            "format" : "double"
          },
          "geoAccuracyBuffer" : {
            "type" : "number",
            "format" : "double"
          },
          "geoProductVersion" : {
            "type" : "string"
          },
          "geoLocationCode" : {
            "type" : "string"
          },
          "geoMatchCode" : {
            "type" : "string"
          },
          "geoDataSourceId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "geoResolutionCode" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "geoDataSourceVersionId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "geoDateTime" : {
            "type" : "string"
          },
          "createDateTime" : {
            "type" : "string"
          },
          "updateDateTime" : {
            "type" : "string"
          },
          "admin1Code" : {
            "type" : "string"
          },
          "admin1GeoId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "admin1Name" : {
            "type" : "string"
          },
          "admin2Code" : {
            "type" : "string"
          },
          "admin2GeoId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "admin2Name" : {
            "type" : "string"
          },
          "admin3Code" : {
            "type" : "string"
          },
          "admin3GeoId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "admin3Name" : {
            "type" : "string"
          },
          "admin4Code" : {
            "type" : "string"
          },
          "admin4GeoId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "admin4Name" : {
            "type" : "string"
          },
          "admin5Code" : {
            "type" : "string"
          },
          "admin5GeoId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "admin5Name" : {
            "type" : "string"
          },
          "zone1GeoId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "zone2GeoId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "zone3GeoId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "zone4GeoId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "zone5GeoId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "zone1" : {
            "type" : "string"
          },
          "zone2" : {
            "type" : "string"
          },
          "zone3" : {
            "type" : "string"
          },
          "zone3Name" : {
            "type" : "string"
          },
          "zone4Name" : {
            "type" : "string"
          },
          "zone5Name" : {
            "type" : "string"
          },
          "zone3Code" : {
            "type" : "string"
          },
          "zone4Code" : {
            "type" : "string"
          },
          "zone5Code" : {
            "type" : "string"
          },
          "ugid" : {
            "type" : "string"
          }
        }
      },
      "FacReinsurer" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "Location" : {
        "required" : [ "address", "property" ],
        "type" : "object",
        "properties" : {
          "esdbBuildingAttribute" : {
            "$ref" : "#/components/schemas/LocationBuildingAttribute"
          },
          "property" : {
            "$ref" : "#/components/schemas/Property"
          },
          "address" : {
            "$ref" : "#/components/schemas/Address"
          },
          "biDetail" : {
            "$ref" : "#/components/schemas/LocationBiDetail"
          },
          "eqDetail" : {
            "$ref" : "#/components/schemas/LocationEqDetail"
          },
          "wsDetail" : {
            "$ref" : "#/components/schemas/LocationWsDetail"
          },
          "toDetail" : {
            "$ref" : "#/components/schemas/LocationToDetail"
          },
          "flDetail" : {
            "$ref" : "#/components/schemas/LocationFlDetail"
          },
          "frDetail" : {
            "$ref" : "#/components/schemas/LocationFrDetail"
          },
          "trDetail" : {
            "$ref" : "#/components/schemas/LocationTrDetail"
          },
          "buildingAttribute" : {
            "$ref" : "#/components/schemas/BuildingAttribute"
          },
          "coverages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LocationCoverage"
            }
          },
          "reinsuranceCessions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReinsuranceCession"
            }
          },
          "wcDetails" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LocationWcDetail"
            }
          },
          "currency" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "tiv" : {
            "type" : "number",
            "format" : "double"
          },
          "riskAssessorCurves" : {
            "type" : "string"
          },
          "locationConditions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LocationCondition"
            }
          },
          "maxCvgBldgValuation" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "LocationBiDetail" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "redundancy" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "siWaitingPeriod" : {
            "type" : "number",
            "format" : "double"
          },
          "siLimit" : {
            "type" : "number",
            "format" : "double"
          },
          "preparedness" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "serviceInterruption" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "isValid" : {
            "type" : "boolean"
          }
        }
      },
      "LocationBuildingAttribute" : {
        "type" : "object",
        "properties" : {
          "buildingId" : {
            "type" : "string"
          },
          "buildingNumber" : {
            "type" : "string"
          },
          "streetPrefix" : {
            "type" : "string"
          },
          "streetName" : {
            "type" : "string"
          },
          "streetType" : {
            "type" : "string"
          },
          "streetSuffix" : {
            "type" : "string"
          },
          "cityName" : {
            "type" : "string"
          },
          "stateCode" : {
            "type" : "string"
          },
          "country" : {
            "type" : "string"
          },
          "latitude" : {
            "type" : "number",
            "format" : "double"
          },
          "longitude" : {
            "type" : "number",
            "format" : "double"
          },
          "buildingClassScheme" : {
            "type" : "string",
            "enum" : [ "RMS", "ATC", "ISO", "FIRE", "RMS_IND", "JPBLDG", "EURO", "RMS_BR", "RMS_OP", "USER" ]
          },
          "occupancyTypeScheme" : {
            "type" : "string",
            "enum" : [ "ATC", "SIC", "NAICS", "NCCI", "ISO", "IBC", "RMS_IND", "JPOCC", "EURO", "RMS_BR", "RMS_OP", "WOCC" ]
          },
          "derivedStories" : {
            "type" : "integer",
            "format" : "int32"
          },
          "areaUnit" : {
            "type" : "string",
            "enum" : [ "SqFeet", "SqMeter" ]
          },
          "yearRange" : {
            "type" : "integer",
            "format" : "int32"
          },
          "exterior" : {
            "type" : "string"
          },
          "fireproof" : {
            "type" : "string"
          },
          "esdbBuildingName" : {
            "type" : "string"
          },
          "esdbBuildingClass" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "esdbOccupancyType" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "esdbBldgHeight" : {
            "type" : "number",
            "format" : "double"
          },
          "esdbStories" : {
            "type" : "integer",
            "format" : "int32"
          },
          "esdbSquareFootage" : {
            "type" : "number",
            "format" : "double"
          },
          "esdbYearBuilt" : {
            "type" : "string"
          }
        }
      },
      "LocationCondition" : {
        "type" : "object",
        "properties" : {
          "locationId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "conditionId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "isIncluded" : {
            "type" : "string",
            "enum" : [ "NotIncluded", "Included", "UserIncluded" ]
          }
        }
      },
      "LocationCoverage" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "label" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "eqslModifier" : {
            "type" : "integer",
            "format" : "int32"
          },
          "lossType" : {
            "type" : "string",
            "enum" : [ "Building", "Contents", "BI", "CombinedCvg" ]
          },
          "percentSprinkler" : {
            "type" : "number",
            "format" : "double"
          },
          "value" : {
            "type" : "number",
            "format" : "double"
          },
          "biPoi" : {
            "type" : "number",
            "format" : "double"
          },
          "deductible" : {
            "type" : "number",
            "format" : "double"
          },
          "coverageModifier" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "accumulation" : {
            "type" : "string",
            "enum" : [ "Building", "Contents", "Bi", "Combined" ]
          },
          "limit" : {
            "type" : "number",
            "format" : "double"
          },
          "peril" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "percentageLossDeductibleAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "isFranchiseDeductible" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "isValid" : {
            "type" : "boolean"
          },
          "waitingPeriod" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "LocationEqDetail" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "siteLimit" : {
            "type" : "number",
            "format" : "double"
          },
          "siteDeduct" : {
            "type" : "number",
            "format" : "double"
          },
          "combinedLimit" : {
            "type" : "number",
            "format" : "double"
          },
          "combinedDeduct" : {
            "type" : "number",
            "format" : "double"
          },
          "yearUpgrade" : {
            "type" : "string"
          },
          "startDate" : {
            "type" : "string"
          },
          "completionDate" : {
            "type" : "string"
          },
          "yearSprinkler" : {
            "type" : "string"
          },
          "percentComplete" : {
            "type" : "number",
            "format" : "double"
          },
          "atcClass" : {
            "type" : "string"
          },
          "isoClass" : {
            "type" : "string"
          },
          "fireClass" : {
            "type" : "string"
          },
          "rmsClass" : {
            "type" : "string"
          },
          "userClass" : {
            "type" : "string"
          },
          "atcOccupancy" : {
            "type" : "string"
          },
          "isoOccupancy" : {
            "type" : "string"
          },
          "sicOccupancy" : {
            "type" : "string"
          },
          "ibcOccupancy" : {
            "type" : "string"
          },
          "userOccupancy" : {
            "type" : "string"
          },
          "percentageSiteLossDeductibleAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "percentageCombinedLossDeductibleAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "isFranchiseSiteDeductible" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "isFranchiseCombinedDeductible" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "secondarySupply" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "eqslSusceptibility" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "sprinklerType" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "baseIsolation" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "bldgExterior" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "cladding" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "constructQuality" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "ductility" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "duress" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "enggFoundation" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "frameBolt" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "hazardExposed" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "internalMasonaryPart" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "longSpan" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "mechElecEquip" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "ornamentation" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "overhangProfile" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "preFabrication" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "pounding" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "redundancy" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "shapeConfigure" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "shortColumn" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "sidingType" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "storyProfile" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "structureUpgrade" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "tank" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "tiltupRetrofit" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "torsion" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "urmRetrofit" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "wallsBrace" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "tsDebris" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "tsScour" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "tsSafeDist" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "tsProtect" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "eqPackage" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "eqProtect" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "eqSalvage" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "eqSpecieStorage" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "urmChimney" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "builtOnSlope" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "alquistPreoloZone" : {
            "type" : "integer",
            "format" : "int32"
          },
          "soil" : {
            "type" : "number",
            "format" : "double"
          },
          "landslide" : {
            "type" : "number",
            "format" : "double"
          },
          "liquefaction" : {
            "type" : "number",
            "format" : "double"
          },
          "biZone" : {
            "type" : "integer",
            "format" : "int32"
          },
          "landslideMatch" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "liquefactionMatch" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "soilMatch" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "fireLossMatch" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "landslideCov" : {
            "type" : "number",
            "format" : "double"
          },
          "liquefactionCov" : {
            "type" : "number",
            "format" : "double"
          },
          "soilCov" : {
            "type" : "number",
            "format" : "double"
          },
          "fireLossCov" : {
            "type" : "number",
            "format" : "float"
          },
          "soilPeriod" : {
            "type" : "number",
            "format" : "double"
          },
          "soilThickness" : {
            "type" : "number",
            "format" : "double"
          },
          "fire1" : {
            "type" : "number",
            "format" : "double"
          },
          "fire2" : {
            "type" : "number",
            "format" : "double"
          },
          "fire3" : {
            "type" : "number",
            "format" : "double"
          },
          "fire4" : {
            "type" : "number",
            "format" : "double"
          },
          "fire5" : {
            "type" : "number",
            "format" : "double"
          },
          "fire6" : {
            "type" : "number",
            "format" : "double"
          },
          "fire7" : {
            "type" : "number",
            "format" : "double"
          },
          "fire8" : {
            "type" : "number",
            "format" : "double"
          },
          "mmi100" : {
            "type" : "number",
            "format" : "double"
          },
          "mmi200" : {
            "type" : "number",
            "format" : "double"
          },
          "mmi250" : {
            "type" : "number",
            "format" : "double"
          },
          "mmi475" : {
            "type" : "number",
            "format" : "double"
          },
          "avgSlope" : {
            "type" : "number",
            "format" : "double"
          },
          "distFault1" : {
            "type" : "number",
            "format" : "double"
          },
          "apMatch" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "mmiMatch" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "distSinkhole" : {
            "type" : "number",
            "format" : "double"
          },
          "distMine" : {
            "type" : "number",
            "format" : "double"
          },
          "sinkholeZone" : {
            "type" : "integer",
            "format" : "int32"
          },
          "soilVs" : {
            "type" : "number",
            "format" : "double"
          },
          "soilVsMatch" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "basinLocId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "di" : {
            "type" : "number",
            "format" : "double"
          },
          "critd" : {
            "type" : "number",
            "format" : "double"
          },
          "n160CS" : {
            "type" : "number",
            "format" : "double"
          },
          "t15" : {
            "type" : "number",
            "format" : "double"
          },
          "wff" : {
            "type" : "number",
            "format" : "double"
          },
          "distriv" : {
            "type" : "number",
            "format" : "double"
          },
          "gwd" : {
            "type" : "number",
            "format" : "double"
          },
          "dc" : {
            "type" : "number",
            "format" : "double"
          },
          "liqcv" : {
            "type" : "number",
            "format" : "double"
          },
          "hdLiqMatch" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "phi" : {
            "type" : "number",
            "format" : "double"
          },
          "rough" : {
            "type" : "number",
            "format" : "double"
          },
          "ndvi" : {
            "type" : "number",
            "format" : "double"
          },
          "cohes" : {
            "type" : "number",
            "format" : "double"
          },
          "landcv" : {
            "type" : "number",
            "format" : "double"
          },
          "hdLandMatch" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "eqSlope" : {
            "type" : "number",
            "format" : "double"
          },
          "elev" : {
            "type" : "number",
            "format" : "double"
          },
          "cti" : {
            "type" : "number",
            "format" : "double"
          },
          "precip" : {
            "type" : "number",
            "format" : "double"
          },
          "topo" : {
            "type" : "number",
            "format" : "double"
          },
          "hdSecMatch" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "soilPeriodMatch" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "groundwaterDepthMatch" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "groundSlopeMatch" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "isValid" : {
            "type" : "boolean"
          },
          "eqslInsurance" : {
            "$ref" : "#/components/schemas/ExposureValue"
          }
        }
      },
      "LocationFlDetail" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "siteLimit" : {
            "type" : "number",
            "format" : "double"
          },
          "siteDeduct" : {
            "type" : "number",
            "format" : "double"
          },
          "combinedLimit" : {
            "type" : "number",
            "format" : "double"
          },
          "combinedDeduct" : {
            "type" : "number",
            "format" : "double"
          },
          "yearUpgrade" : {
            "type" : "string"
          },
          "startDate" : {
            "type" : "string"
          },
          "completionDate" : {
            "type" : "string"
          },
          "percentComplete" : {
            "type" : "number",
            "format" : "double"
          },
          "percentageSiteLossDeductibleAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "percentageCombinedLossDeductibleAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "isFranchiseSiteDeductible" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "isFranchiseCombinedDeductible" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "isValid" : {
            "type" : "boolean"
          },
          "floodProtect" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "floorType" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "floodMissile" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "basement" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "floodVulnerability" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "mechElecGround" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "cladType" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "foundation" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "duration" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "contamination" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "velocity" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "flPackage" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "flProtect" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "flSalvage" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "flSpecieStorage" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "ifmVerticalExpDist" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "flFoundationType" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "ifmStructureCondition" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "bespokeFloodDefenseLevel" : {
            "type" : "number",
            "format" : "double"
          },
          "bespokeFloodDefenseLevelType" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "floodIndex" : {
            "type" : "number",
            "format" : "double"
          },
          "elevation" : {
            "type" : "number",
            "format" : "double"
          },
          "elevationCov" : {
            "type" : "number",
            "format" : "double"
          },
          "annProb" : {
            "type" : "string"
          },
          "flZone" : {
            "type" : "string"
          },
          "bfe" : {
            "type" : "string"
          },
          "additionalInfo" : {
            "type" : "string"
          },
          "panel" : {
            "type" : "string"
          },
          "cobra" : {
            "type" : "string"
          },
          "floodWay" : {
            "type" : "string"
          },
          "sfha" : {
            "type" : "string"
          },
          "community" : {
            "type" : "string"
          },
          "confidence" : {
            "type" : "number",
            "format" : "double"
          },
          "underRev" : {
            "type" : "string"
          },
          "panelDate" : {
            "type" : "string"
          },
          "buffer" : {
            "type" : "number",
            "format" : "double"
          },
          "otherZones" : {
            "type" : "string"
          },
          "huZones" : {
            "type" : "string"
          },
          "mapSource" : {
            "type" : "integer",
            "format" : "int32"
          },
          "flMatch" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "finishedFloor" : {
            "type" : "number",
            "format" : "double"
          },
          "userId1" : {
            "type" : "string"
          },
          "userId2" : {
            "type" : "string"
          },
          "basinName" : {
            "type" : "string"
          },
          "catchmentId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "floodDriver" : {
            "type" : "string"
          },
          "rms100Flzone" : {
            "type" : "integer",
            "format" : "int32"
          },
          "rms500Flzone" : {
            "type" : "integer",
            "format" : "int32"
          },
          "fl30YrRpDef" : {
            "type" : "integer",
            "format" : "int32"
          },
          "fl50YrRpDef" : {
            "type" : "integer",
            "format" : "int32"
          },
          "fl75YrRpDef" : {
            "type" : "integer",
            "format" : "int32"
          },
          "fl100YrRpDef" : {
            "type" : "integer",
            "format" : "int32"
          },
          "fl200YrRpDef" : {
            "type" : "integer",
            "format" : "int32"
          },
          "fl250YrRpDef" : {
            "type" : "integer",
            "format" : "int32"
          },
          "fl500YrRpDef" : {
            "type" : "integer",
            "format" : "int32"
          },
          "fl1000YrRpDef" : {
            "type" : "integer",
            "format" : "int32"
          },
          "fl10000YrRpDef" : {
            "type" : "integer",
            "format" : "int32"
          },
          "fl30YrRpUndef" : {
            "type" : "integer",
            "format" : "int32"
          },
          "fl50YrRpUndef" : {
            "type" : "integer",
            "format" : "int32"
          },
          "fl75YrRpUndef" : {
            "type" : "integer",
            "format" : "int32"
          },
          "fl100YrRpUndef" : {
            "type" : "integer",
            "format" : "int32"
          },
          "fl200YrRpUndef" : {
            "type" : "integer",
            "format" : "int32"
          },
          "fl250YrRpUndef" : {
            "type" : "integer",
            "format" : "int32"
          },
          "fl500YrRpUndef" : {
            "type" : "integer",
            "format" : "int32"
          },
          "fl1000YrRpUndef" : {
            "type" : "integer",
            "format" : "int32"
          },
          "fl10000YrRpUndef" : {
            "type" : "integer",
            "format" : "int32"
          },
          "hdFlMatch" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "flFfHag" : {
            "type" : "number",
            "format" : "double"
          },
          "flFfHagFlag" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "flZoneGroup" : {
            "type" : "integer",
            "format" : "int32"
          },
          "flPerBasement" : {
            "type" : "number",
            "format" : "double"
          },
          "protectedByLevee" : {
            "type" : "string"
          }
        }
      },
      "LocationFrDetail" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "siteLimit" : {
            "type" : "number",
            "format" : "double"
          },
          "siteDeduct" : {
            "type" : "number",
            "format" : "double"
          },
          "combinedLimit" : {
            "type" : "number",
            "format" : "double"
          },
          "combinedDeduct" : {
            "type" : "number",
            "format" : "double"
          },
          "yearUpgrade" : {
            "type" : "string"
          },
          "startDate" : {
            "type" : "string"
          },
          "completionDate" : {
            "type" : "string"
          },
          "percentComplete" : {
            "type" : "number",
            "format" : "double"
          },
          "fireDepartmentRatingModifier" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "fireDepartmentRating" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "sprinklerSystem" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "remoteAlarm" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "frPackage" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "frProtect" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "frSalvage" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "frSpecieStorage" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "frRoofCovering" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "frRoofGeometry" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "frRoofAge" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "frRoofVent" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "frEmberAccumulator" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "frSuppression" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "frPerformance" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "frSetback" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "frExterior" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "frResAppurtenant" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "frComAppurtenant" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "frDeckType" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "frHeatResistance" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "frAccessibilityCondition" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "wildFireHazard" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "wildFireSusceptibility" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "wildFireThreat" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "wildFireAreaDescription" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "wildFireSurfaceFuelType" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "wildFireSpecialConditions" : {
            "type" : "string"
          },
          "wildFireLocalHistory" : {
            "type" : "number",
            "format" : "double"
          },
          "wildFireNearbyHistory" : {
            "type" : "number",
            "format" : "double"
          },
          "wildFireAccessibility" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "wildFireMatch" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "wildFireSlope" : {
            "type" : "integer",
            "format" : "int32"
          },
          "wildFireSlopeFlag" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "wildFireFuel" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "wildFireFuelFlag" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "wildFireDistanceToVeg" : {
            "type" : "integer",
            "format" : "int32"
          },
          "wildFireDistanceToVegFlag" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "wildFireDistanceToVegUnit" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "wildFireSiteHazVer" : {
            "type" : "string"
          },
          "percentageSiteLossDeductibleAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "percentageCombinedLossDeductibleAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "isFranchiseSiteDeductible" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "isFranchiseCombinedDeductible" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "isValid" : {
            "type" : "boolean"
          }
        }
      },
      "LocationToDetail" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "siteLimit" : {
            "type" : "number",
            "format" : "double"
          },
          "siteDeduct" : {
            "type" : "number",
            "format" : "double"
          },
          "combinedLimit" : {
            "type" : "number",
            "format" : "double"
          },
          "combinedDeduct" : {
            "type" : "number",
            "format" : "double"
          },
          "yearUpgrade" : {
            "type" : "string"
          },
          "percentComplete" : {
            "type" : "number",
            "format" : "double"
          },
          "fireClass" : {
            "type" : "string"
          },
          "rmsClass" : {
            "type" : "string"
          },
          "userClass" : {
            "type" : "string"
          },
          "atcOccupancy" : {
            "type" : "string"
          },
          "isoOccupancy" : {
            "type" : "string"
          },
          "userOccupancy" : {
            "type" : "string"
          },
          "percentageSiteLossDeductibleAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "percentageCombinedLossDeductibleAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "isFranchiseSiteDeductible" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "isFranchiseCombinedDeductible" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "isValid" : {
            "type" : "boolean"
          },
          "architecture" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "cladRate" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "cladType" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "constructQuality" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "designCode" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "doorOpenings" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "externalOrnament" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "floodVulnerability" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "foundation" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "maintenance" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "mechElecSide" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "otherOpenings" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "roofAge" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "roofAnchor" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "roofEquipment" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "roofFrame" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "roofGeometry" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "roofParpet" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "roofSystem" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "windMissile" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "windVulnerability" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "basement" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "mechElecGround" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "floodMissiles" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "floodProtection" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "iceDamProtection" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "plumbingInsulation" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "atticInsulation" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "roofVentilation" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "snowGuards" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "treeDensity" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "garaging" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "toPackage" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "toProtect" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "toSalvage" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "toSpecieStorage" : {
            "$ref" : "#/components/schemas/ExposureValue"
          }
        }
      },
      "LocationTrDetail" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "siteLimit" : {
            "type" : "number",
            "format" : "double"
          },
          "siteDeduct" : {
            "type" : "number",
            "format" : "double"
          },
          "combinedLimit" : {
            "type" : "number",
            "format" : "double"
          },
          "combinedDeduct" : {
            "type" : "number",
            "format" : "double"
          },
          "yearUpgrade" : {
            "type" : "string"
          },
          "startDate" : {
            "type" : "string"
          },
          "completionDate" : {
            "type" : "string"
          },
          "percentComplete" : {
            "type" : "number",
            "format" : "double"
          },
          "percentageSiteLossDeductibleAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "percentageCombinedLossDeductibleAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "isFranchiseSiteDeductible" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "isFranchiseCombinedDeductible" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "isValid" : {
            "type" : "boolean"
          },
          "trPackage" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "trProtect" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "trSalvage" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "trSpecieStorage" : {
            "$ref" : "#/components/schemas/ExposureValue"
          }
        }
      },
      "LocationWcDetail" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "totalPayroll" : {
            "type" : "number",
            "format" : "double"
          },
          "totalNumEmployees" : {
            "type" : "number",
            "format" : "double"
          },
          "numEmployeesShift1" : {
            "type" : "number",
            "format" : "double"
          },
          "numEmployeesShift2" : {
            "type" : "number",
            "format" : "double"
          },
          "numEmployeesShift3" : {
            "type" : "number",
            "format" : "double"
          },
          "numEmployeesShift4" : {
            "type" : "number",
            "format" : "double"
          },
          "calcNumEmployees" : {
            "type" : "number",
            "format" : "double"
          },
          "emergencyProtection" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "hazardousMaterials" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "wageRelativity" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "riskManagement" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "employeeDensity" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "undMngtAdjustment" : {
            "type" : "number",
            "format" : "double"
          },
          "groupNum" : {
            "type" : "string"
          },
          "groupName" : {
            "type" : "string"
          },
          "occupancyTypeScheme" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "occupancyType" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "maxEmployees" : {
            "type" : "number",
            "format" : "double"
          },
          "shiftType" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "isValid" : {
            "type" : "boolean"
          },
          "uslh" : {
            "type" : "boolean"
          },
          "excessComp" : {
            "$ref" : "#/components/schemas/ExposureValue"
          }
        }
      },
      "LocationWsDetail" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "yearUpgrade" : {
            "type" : "string"
          },
          "startDate" : {
            "type" : "string"
          },
          "completionDate" : {
            "type" : "string"
          },
          "percentComplete" : {
            "type" : "number",
            "format" : "double"
          },
          "coastalSegment" : {
            "type" : "string"
          },
          "fireClass" : {
            "type" : "string"
          },
          "rmsClass" : {
            "type" : "string"
          },
          "userClass" : {
            "type" : "string"
          },
          "atcOccupancy" : {
            "type" : "string"
          },
          "isoOccupancy" : {
            "type" : "string"
          },
          "sicOccupancy" : {
            "type" : "string"
          },
          "ibcOccupancy" : {
            "type" : "string"
          },
          "userOccupancy" : {
            "type" : "string"
          },
          "siteLimit" : {
            "type" : "number",
            "format" : "double"
          },
          "siteDeduct" : {
            "type" : "number",
            "format" : "double"
          },
          "combinedLimit" : {
            "type" : "number",
            "format" : "double"
          },
          "combinedDeduct" : {
            "type" : "number",
            "format" : "double"
          },
          "percentageSiteLossDeductibleAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "percentageCombinedLossDeductibleAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "isFranchiseSiteDeductible" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "isFranchiseCombinedDeductible" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "isValid" : {
            "type" : "boolean"
          },
          "architecture" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "cladRate" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "cladType" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "constructQuality" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "designCode" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "doorOpenings" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "externalOrnament" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "floodVulnerability" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "foundation" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "maintenance" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "mechElecSide" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "otherOpenings" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "roofAge" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "roofAnchor" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "roofEquipment" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "roofFrame" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "roofGeometry" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "roofParpet" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "roofSystem" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "windMissile" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "windVulnerability" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "floodMissiles" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "floodProtection" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "basement" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "mechElecGround" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "flashing" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "ifmVerticalExpDist" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "ifmStructCondition" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "ifmEquipBracing" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "ifmMissileExp" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "wsPackage" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "wsProtect" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "wsSalvage" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "wsSpecieStorage" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "resistGarage" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "wsFloorType" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "wsFoundationType" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "contamination" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "floodDuration" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "garaging" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "treeDensity" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "depreciationAge" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "floodIndex" : {
            "type" : "number",
            "format" : "double"
          },
          "distToCoast" : {
            "type" : "number",
            "format" : "double"
          },
          "sysDistToCoast" : {
            "type" : "number",
            "format" : "double"
          },
          "elevation" : {
            "type" : "number",
            "format" : "double"
          },
          "manMadeCov" : {
            "type" : "number",
            "format" : "double"
          },
          "naturalCov" : {
            "type" : "number",
            "format" : "double"
          },
          "elevationCov" : {
            "type" : "number",
            "format" : "double"
          },
          "distToCoastCov" : {
            "type" : "number",
            "format" : "double"
          },
          "manMadeRoughness" : {
            "type" : "integer",
            "format" : "int32"
          },
          "naturalRoughness" : {
            "type" : "integer",
            "format" : "int32"
          },
          "windPool" : {
            "type" : "integer",
            "format" : "int32"
          },
          "biZone" : {
            "type" : "integer",
            "format" : "int32"
          },
          "topologyFeature" : {
            "type" : "integer",
            "format" : "int32"
          },
          "elevationMatch" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "naturalRoughnessMatch" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "manMadeRoughnessMatch" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "distToCoastMatch" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "windPoolMatch" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "windExposure" : {
            "type" : "integer",
            "format" : "int32"
          },
          "nfipRate" : {
            "type" : "number",
            "format" : "double"
          },
          "nfipYear" : {
            "type" : "integer",
            "format" : "int32"
          },
          "nfipYearMatch" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "buildingElevation" : {
            "type" : "number",
            "format" : "double"
          },
          "buildingElevationMatch" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "rmsBuildingElevation" : {
            "type" : "number",
            "format" : "double"
          },
          "rmsBuildingElevationMatch" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "zoneGroup" : {
            "type" : "integer",
            "format" : "int32"
          },
          "perBasement" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "Property" : {
        "required" : [ "locationNumber" ],
        "type" : "object",
        "properties" : {
          "accountId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "locationId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "addressId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "locationNumber" : {
            "type" : "string"
          },
          "locationName" : {
            "type" : "string"
          },
          "userId1" : {
            "type" : "string"
          },
          "userId2" : {
            "type" : "string"
          },
          "userText1" : {
            "type" : "string"
          },
          "userText2" : {
            "type" : "string"
          },
          "expireDate" : {
            "type" : "string"
          },
          "inceptDate" : {
            "type" : "string"
          },
          "yearBuilt" : {
            "type" : "string"
          },
          "createDate" : {
            "type" : "string"
          },
          "updateDate" : {
            "type" : "string"
          },
          "buildingClassScheme" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "buildingClass" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "occupancyTypeScheme" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "occupancyType" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "primaryLocId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "siteName" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "buildings" : {
            "type" : "integer",
            "format" : "int32"
          },
          "stories" : {
            "type" : "integer",
            "format" : "int32"
          },
          "floorOccupancy" : {
            "type" : "string"
          },
          "floorArea" : {
            "type" : "number",
            "format" : "double"
          },
          "bldgHeight" : {
            "type" : "number",
            "format" : "double"
          },
          "heightUnit" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "slope" : {
            "type" : "number",
            "format" : "double"
          },
          "otherZone" : {
            "type" : "string"
          },
          "huZone" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "areaUnit" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "bldgValuation" : {
            "type" : "number",
            "format" : "double"
          },
          "valuationDiffAmt" : {
            "type" : "number",
            "format" : "double"
          },
          "valuationDiffPercent" : {
            "type" : "number",
            "format" : "double"
          },
          "floodDefenseElevation" : {
            "type" : "number",
            "format" : "double"
          },
          "floodDefenseElevationUnit" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "rentalPropertyIdentifier" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "mfdSubcategory" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "dwellTime" : {
            "type" : "integer",
            "format" : "int32"
          },
          "userGroundElev" : {
            "type" : "number",
            "format" : "double"
          },
          "userBfe" : {
            "type" : "number",
            "format" : "double"
          },
          "floodDefHtAboveGrnd" : {
            "type" : "number",
            "format" : "double"
          },
          "contentLossTrigger" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "isPrimaryBldg" : {
            "type" : "boolean"
          },
          "useContentValue" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "nship" : {
            "type" : "integer",
            "format" : "int32"
          },
          "isValid" : {
            "type" : "boolean"
          }
        }
      },
      "ReinsuranceCession" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          },
          "exposureId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "exposureType" : {
            "type" : "string",
            "enum" : [ "POL", "LOC" ]
          },
          "type" : {
            "type" : "string",
            "enum" : [ "None", "Facultative", "Treaty" ]
          },
          "facReinsurer" : {
            "$ref" : "#/components/schemas/FacReinsurer"
          },
          "treaty" : {
            "$ref" : "#/components/schemas/Treaty"
          },
          "layerNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "layerAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "excessAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "percentReinsurance" : {
            "type" : "number",
            "format" : "double"
          },
          "maolAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "priority" : {
            "type" : "integer",
            "format" : "int32"
          },
          "isValid" : {
            "type" : "boolean"
          }
        }
      },
      "LocationSearchItem" : {
        "type" : "object",
        "properties" : {
          "propertyReference" : {
            "type" : "string"
          },
          "location" : {
            "$ref" : "#/components/schemas/Location"
          }
        }
      },
      "LocationSearchResult" : {
        "type" : "object",
        "properties" : {
          "searchTotalMatch" : {
            "type" : "integer",
            "format" : "int64"
          },
          "searchItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LocationSearchItem"
            }
          }
        }
      },
      "Link" : {
        "required" : [ "href", "method", "rel" ],
        "type" : "object",
        "properties" : {
          "rel" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string"
          },
          "method" : {
            "type" : "string"
          }
        }
      },
      "Meta" : {
        "type" : "object",
        "properties" : {
          "createdBy" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "count" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "MetaLinks" : {
        "required" : [ "links", "meta" ],
        "type" : "object",
        "properties" : {
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          },
          "meta" : {
            "$ref" : "#/components/schemas/Meta"
          }
        }
      },
      "PolicyConditionSearchResult" : {
        "type" : "object",
        "properties" : {
          "searchTotalMatch" : {
            "type" : "integer",
            "format" : "int64"
          },
          "searchItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PolicyCondition"
            }
          }
        }
      },
      "CopyPolicyInfo" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "Policy" : {
        "required" : [ "number", "status" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "number" : {
            "type" : "string"
          },
          "accountId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "lob" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "peril" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "status" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "inceptionDate" : {
            "type" : "string"
          },
          "expirationDate" : {
            "type" : "string"
          },
          "currency" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "partOf" : {
            "type" : "number",
            "format" : "double"
          },
          "attachmentPoint" : {
            "type" : "number",
            "format" : "double"
          },
          "minDeductible" : {
            "type" : "number",
            "format" : "double"
          },
          "maxDeductible" : {
            "type" : "number",
            "format" : "double"
          },
          "blanketLimit" : {
            "type" : "number",
            "format" : "double"
          },
          "blanketDeductible" : {
            "type" : "number",
            "format" : "double"
          },
          "blanketPremium" : {
            "type" : "number",
            "format" : "double"
          },
          "biLifeLine" : {
            "type" : "integer",
            "format" : "int32"
          },
          "deductType" : {
            "type" : "integer",
            "format" : "int32"
          },
          "structure" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "coverageBase" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "limitGU" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "userText1" : {
            "type" : "string"
          },
          "userText2" : {
            "type" : "string"
          },
          "userText3" : {
            "type" : "string"
          },
          "userText4" : {
            "type" : "string"
          },
          "isValid" : {
            "type" : "boolean"
          },
          "coverages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PolicyCoverage"
            }
          },
          "reinsuranceCessions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReinsuranceCession"
            }
          },
          "policyConditions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PolicyCondition"
            }
          },
          "CustomData" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "newCauseOfLoss" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "percentOfLossDeductible" : {
            "type" : "number",
            "format" : "double"
          },
          "isFranchiseDeductible" : {
            "$ref" : "#/components/schemas/ExposureValue"
          }
        }
      },
      "PolicyCoverage" : {
        "required" : [ "label", "lossType", "peril" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "peril" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "lossType" : {
            "type" : "string",
            "enum" : [ "Building", "Contents", "BI", "CombinedCvg" ]
          },
          "premium" : {
            "type" : "number",
            "format" : "double"
          },
          "limit" : {
            "type" : "number",
            "format" : "double"
          },
          "deductible" : {
            "type" : "number",
            "format" : "double"
          },
          "label" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "accumulation" : {
            "type" : "integer",
            "format" : "int32"
          },
          "isValid" : {
            "type" : "boolean"
          },
          "percentOfLossDeductibleAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "isFranchiseDeductible" : {
            "$ref" : "#/components/schemas/ExposureValue"
          }
        }
      },
      "PolicyConditionMetrics" : {
        "type" : "object",
        "properties" : {
          "notIncludedCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "includedByFilterCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "includedByUserCount" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "PolicySearchResult" : {
        "type" : "object",
        "properties" : {
          "matchCount" : {
            "type" : "integer",
            "format" : "int64"
          },
          "policies" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Policy"
            }
          }
        }
      },
      "CopyPortfolioInfo" : {
        "required" : [ "newDescription", "newName", "newNumber" ],
        "type" : "object",
        "properties" : {
          "deep" : {
            "type" : "boolean"
          },
          "newName" : {
            "type" : "string"
          },
          "newNumber" : {
            "type" : "string"
          },
          "newDescription" : {
            "type" : "string"
          },
          "isDeep" : {
            "type" : "boolean"
          }
        }
      },
      "Portfolio" : {
        "required" : [ "description", "name", "number" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          },
          "number" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "createDate" : {
            "type" : "string"
          },
          "stampDate" : {
            "type" : "string"
          }
        }
      },
      "PortfolioMetrics" : {
        "type" : "object",
        "properties" : {
          "totalAccounts" : {
            "type" : "integer",
            "format" : "int32"
          },
          "totalLocations" : {
            "type" : "integer",
            "format" : "int32"
          },
          "totalPolicies" : {
            "type" : "integer",
            "format" : "int32"
          },
          "perilsExposed" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "number" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "owner" : {
            "type" : "string"
          },
          "createDate" : {
            "type" : "string"
          },
          "geocodeVersion" : {
            "type" : "string"
          },
          "hazardVersion" : {
            "type" : "string"
          }
        }
      },
      "PortfolioFilteredAccountsInput" : {
        "type" : "object",
        "properties" : {
          "selectAll" : {
            "type" : "boolean"
          },
          "queryFilter" : {
            "type" : "string"
          },
          "markedAccounts" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "manageExistingAccounts" : {
            "type" : "boolean"
          }
        }
      },
      "PortfolioAccountsInput" : {
        "type" : "object",
        "properties" : {
          "accountsToAdd" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "accountsToRemove" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        }
      },
      "PortfolioSearchItem" : {
        "required" : [ "description", "name", "number" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          },
          "number" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "createDate" : {
            "type" : "string"
          },
          "stampDate" : {
            "type" : "string"
          },
          "geocodeVersion" : {
            "type" : "string"
          },
          "hazardVersion" : {
            "type" : "string"
          },
          "ownerName" : {
            "type" : "string"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "jobStatus" : {
            "type" : "string"
          },
          "jobStartDate" : {
            "type" : "string"
          },
          "jobEndDate" : {
            "type" : "string"
          }
        }
      },
      "PortfolioSearchResult" : {
        "type" : "object",
        "properties" : {
          "searchTotalMatch" : {
            "type" : "integer",
            "format" : "int64"
          },
          "searchItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PortfolioSearchItem"
            }
          }
        }
      },
      "ProducerSearchResult" : {
        "type" : "object",
        "properties" : {
          "searchTotalMatch" : {
            "type" : "integer",
            "format" : "int64"
          },
          "searchItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Producer"
            }
          }
        }
      },
      "CopyStepPolicyInfo" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "StepPolicy" : {
        "required" : [ "expirationDate", "inceptionDate", "number" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "accountId" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          },
          "number" : {
            "maxLength" : 50,
            "minLength" : 0,
            "type" : "string"
          },
          "name" : {
            "maxLength" : 50,
            "minLength" : 0,
            "type" : "string"
          },
          "stepOrderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "lobDetId" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "causeOfLoss" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "inceptionDate" : {
            "type" : "string"
          },
          "expirationDate" : {
            "type" : "string"
          },
          "payoutAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "currency" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "payoutFunctionId" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "share" : {
            "type" : "number",
            "format" : "double"
          },
          "excessAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "isPerRiskSubject" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "childOrderId" : {
            "pattern" : "^$|^([1-9][0-9]*)(,([1-9][0-9]*))*$",
            "type" : "string"
          },
          "subjectFunctionId" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "coverageBase" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "limitGU" : {
            "$ref" : "#/components/schemas/ExposureValue"
          }
        }
      },
      "StepPolicySearchResult" : {
        "type" : "object",
        "properties" : {
          "totalSearchCount" : {
            "type" : "integer",
            "format" : "int64"
          },
          "stepPolicies" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/StepPolicy"
            }
          }
        }
      },
      "CopyTreatyInfo" : {
        "required" : [ "newNumber" ],
        "type" : "object",
        "properties" : {
          "newNumber" : {
            "type" : "string"
          },
          "newName" : {
            "type" : "string"
          }
        }
      },
      "UnderwriterSearchResult" : {
        "type" : "object",
        "properties" : {
          "searchTotalMatch" : {
            "type" : "integer",
            "format" : "int64"
          },
          "searchItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UnderWriter"
            }
          }
        }
      },
      "QueryEntity" : {
        "type" : "object",
        "properties" : {
          "q" : {
            "type" : "string"
          }
        }
      },
      "PortfolioConditionCriteria" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "logic" : {
            "type" : "string"
          },
          "openPar" : {
            "type" : "string"
          },
          "field" : {
            "type" : "string"
          },
          "operator" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          },
          "closePar" : {
            "type" : "string"
          }
        }
      },
      "GlobalAnalysisSettings" : {
        "required" : [ "franchiseDeductible", "minLossThreshold", "numMaxLossEvent", "treatConstructionOccupancyAsUnknown" ],
        "type" : "object",
        "properties" : {
          "franchiseDeductible" : {
            "type" : "boolean"
          },
          "minLossThreshold" : {
            "minimum" : 0.0,
            "exclusiveMinimum" : false,
            "type" : "number",
            "format" : "double"
          },
          "treatConstructionOccupancyAsUnknown" : {
            "type" : "boolean"
          },
          "numMaxLossEvent" : {
            "maximum" : 5000,
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "ProcessInputV2" : {
        "required" : [ "currency", "edm" ],
        "type" : "object",
        "properties" : {
          "exposureType" : {
            "type" : "string",
            "enum" : [ "PORTFOLIO", "ACCOUNT", "LOCATION", "POLICY", "STEP_POLICY", "TREATY", "AGGPORTFOLIO" ]
          },
          "edm" : {
            "type" : "string"
          },
          "currency" : {
            "$ref" : "#/components/schemas/Currency"
          },
          "modelProfileId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "eventRateSchemeId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "treaties" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "jobName" : {
            "maxLength" : 64,
            "minLength" : 0,
            "pattern" : "^\\w((?!--)[\\w\\s:-])*\\w$|^\\w*$",
            "type" : "string"
          },
          "id" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          },
          "outputProfileId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "globalAnalysisSettings" : {
            "$ref" : "#/components/schemas/GlobalAnalysisSettings"
          },
          "climateChangeVariationId" : {
            "maximum" : 68,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "AggregateExposuresListSearchResult" : {
        "type" : "object",
        "properties" : {
          "searchTotalMatch" : {
            "type" : "integer",
            "format" : "int64"
          },
          "searchItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AggregateExposuresList"
            }
          }
        }
      },
      "AccountInput" : {
        "required" : [ "label", "number" ],
        "type" : "object",
        "properties" : {
          "operationType" : {
            "type" : "string",
            "enum" : [ "INSERT", "UPDATE", "DELETE" ]
          },
          "label" : {
            "type" : "string"
          },
          "policies" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PolicyInput"
            }
          },
          "locations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LocationInput"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          },
          "number" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string"
          },
          "cedant" : {
            "$ref" : "#/components/schemas/Cedant"
          },
          "producer" : {
            "$ref" : "#/components/schemas/Producer"
          },
          "underwriter" : {
            "$ref" : "#/components/schemas/UnderWriter"
          },
          "branch" : {
            "$ref" : "#/components/schemas/Branch"
          },
          "userId1" : {
            "type" : "string"
          },
          "userId2" : {
            "type" : "string"
          },
          "userId3" : {
            "type" : "string"
          },
          "userId4" : {
            "type" : "string"
          },
          "userText1" : {
            "type" : "string"
          },
          "userText2" : {
            "type" : "string"
          },
          "createDate" : {
            "type" : "string"
          },
          "stampDate" : {
            "type" : "string"
          },
          "state" : {
            "type" : "string",
            "enum" : [ "InActive", "Active" ]
          },
          "linkId" : {
            "type" : "string"
          },
          "guid" : {
            "type" : "string"
          },
          "isValid" : {
            "type" : "boolean"
          },
          "CustomData" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }
      },
      "BulkExposureInput" : {
        "type" : "object",
        "properties" : {
          "portfolios" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PortfolioInput"
            }
          },
          "accounts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AccountInput"
            }
          },
          "locations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LocationInput"
            }
          },
          "policies" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PolicyInput"
            }
          },
          "treaties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TreatyInput"
            }
          },
          "uploadId" : {
            "pattern" : "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
            "type" : "string"
          }
        }
      },
      "LocationInput" : {
        "required" : [ "address", "label", "property" ],
        "type" : "object",
        "properties" : {
          "operationType" : {
            "type" : "string",
            "enum" : [ "INSERT", "UPDATE", "DELETE" ]
          },
          "label" : {
            "type" : "string"
          },
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "esdbBuildingAttribute" : {
            "$ref" : "#/components/schemas/LocationBuildingAttribute"
          },
          "property" : {
            "$ref" : "#/components/schemas/Property"
          },
          "address" : {
            "$ref" : "#/components/schemas/Address"
          },
          "biDetail" : {
            "$ref" : "#/components/schemas/LocationBiDetail"
          },
          "eqDetail" : {
            "$ref" : "#/components/schemas/LocationEqDetail"
          },
          "wsDetail" : {
            "$ref" : "#/components/schemas/LocationWsDetail"
          },
          "toDetail" : {
            "$ref" : "#/components/schemas/LocationToDetail"
          },
          "flDetail" : {
            "$ref" : "#/components/schemas/LocationFlDetail"
          },
          "frDetail" : {
            "$ref" : "#/components/schemas/LocationFrDetail"
          },
          "trDetail" : {
            "$ref" : "#/components/schemas/LocationTrDetail"
          },
          "buildingAttribute" : {
            "$ref" : "#/components/schemas/BuildingAttribute"
          },
          "coverages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LocationCoverage"
            }
          },
          "reinsuranceCessions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReinsuranceCession"
            }
          },
          "wcDetails" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LocationWcDetail"
            }
          },
          "currency" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "tiv" : {
            "type" : "number",
            "format" : "double"
          },
          "riskAssessorCurves" : {
            "type" : "string"
          },
          "locationConditions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LocationCondition"
            }
          },
          "maxCvgBldgValuation" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "PolicyInput" : {
        "required" : [ "label", "number", "status" ],
        "type" : "object",
        "properties" : {
          "operationType" : {
            "type" : "string",
            "enum" : [ "INSERT", "UPDATE", "DELETE" ]
          },
          "label" : {
            "type" : "string"
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "number" : {
            "type" : "string"
          },
          "accountId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "lob" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "peril" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "status" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "inceptionDate" : {
            "type" : "string"
          },
          "expirationDate" : {
            "type" : "string"
          },
          "currency" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "partOf" : {
            "type" : "number",
            "format" : "double"
          },
          "attachmentPoint" : {
            "type" : "number",
            "format" : "double"
          },
          "minDeductible" : {
            "type" : "number",
            "format" : "double"
          },
          "maxDeductible" : {
            "type" : "number",
            "format" : "double"
          },
          "blanketLimit" : {
            "type" : "number",
            "format" : "double"
          },
          "blanketDeductible" : {
            "type" : "number",
            "format" : "double"
          },
          "blanketPremium" : {
            "type" : "number",
            "format" : "double"
          },
          "biLifeLine" : {
            "type" : "integer",
            "format" : "int32"
          },
          "deductType" : {
            "type" : "integer",
            "format" : "int32"
          },
          "structure" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "coverageBase" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "limitGU" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "userText1" : {
            "type" : "string"
          },
          "userText2" : {
            "type" : "string"
          },
          "userText3" : {
            "type" : "string"
          },
          "userText4" : {
            "type" : "string"
          },
          "isValid" : {
            "type" : "boolean"
          },
          "coverages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PolicyCoverage"
            }
          },
          "reinsuranceCessions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReinsuranceCession"
            }
          },
          "policyConditions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PolicyCondition"
            }
          },
          "CustomData" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "newCauseOfLoss" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "percentOfLossDeductible" : {
            "type" : "number",
            "format" : "double"
          },
          "isFranchiseDeductible" : {
            "$ref" : "#/components/schemas/ExposureValue"
          }
        }
      },
      "PortfolioInput" : {
        "required" : [ "description", "label", "name", "number" ],
        "type" : "object",
        "properties" : {
          "operationType" : {
            "type" : "string",
            "enum" : [ "INSERT", "UPDATE", "DELETE" ]
          },
          "label" : {
            "type" : "string"
          },
          "accounts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AccountInput"
            }
          },
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          },
          "number" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "createDate" : {
            "type" : "string"
          },
          "stampDate" : {
            "type" : "string"
          }
        }
      },
      "TreatyInput" : {
        "required" : [ "attachLevel", "cedant", "label", "treatyNumber", "treatyType" ],
        "type" : "object",
        "properties" : {
          "treatyId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "treatyNumber" : {
            "maxLength" : 20,
            "minLength" : 0,
            "type" : "string"
          },
          "treatyName" : {
            "maxLength" : 40,
            "minLength" : 0,
            "type" : "string"
          },
          "cedant" : {
            "$ref" : "#/components/schemas/Cedant"
          },
          "producer" : {
            "$ref" : "#/components/schemas/Producer"
          },
          "treatyType" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "currency" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "attachBasis" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "attachLevel" : {
            "$ref" : "#/components/schemas/ExposureValue"
          },
          "premium" : {
            "type" : "number",
            "format" : "double"
          },
          "occurLimit" : {
            "type" : "number",
            "format" : "double"
          },
          "attachPt" : {
            "type" : "number",
            "format" : "double"
          },
          "riskLimit" : {
            "type" : "number",
            "format" : "double"
          },
          "retentAmt" : {
            "type" : "number",
            "format" : "double"
          },
          "pcntPlaced" : {
            "type" : "number",
            "format" : "double"
          },
          "effectDate" : {
            "type" : "string"
          },
          "expireDate" : {
            "type" : "string"
          },
          "pcntRetent" : {
            "type" : "number",
            "format" : "double"
          },
          "pcntRiShare" : {
            "type" : "number",
            "format" : "double"
          },
          "pcntCovered" : {
            "type" : "number",
            "format" : "double"
          },
          "priority" : {
            "type" : "integer",
            "format" : "int32"
          },
          "numOfReinst" : {
            "type" : "integer",
            "format" : "int32"
          },
          "reinstCharge" : {
            "type" : "number",
            "format" : "double"
          },
          "maolAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "isValid" : {
            "type" : "boolean"
          },
          "userId1" : {
            "type" : "string"
          },
          "userId2" : {
            "type" : "string"
          },
          "lobs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LineOfBusiness"
            }
          },
          "aggregateDeductible" : {
            "type" : "number",
            "format" : "double"
          },
          "aggregateLimit" : {
            "type" : "number",
            "format" : "double"
          },
          "lossOccurrences" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LossOccurrence"
            }
          },
          "operationType" : {
            "type" : "string",
            "enum" : [ "INSERT", "UPDATE", "DELETE" ]
          },
          "label" : {
            "type" : "string"
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "AggregatePortfolioFlatFileMapping" : {
        "required" : [ "columnMapping", "countryCode", "resolution" ],
        "type" : "object",
        "properties" : {
          "resolutionConversionFrom" : {
            "type" : "string"
          },
          "resolutionConversionTo" : {
            "type" : "string"
          },
          "columnMapping" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "dataRowStart" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          },
          "countryCode" : {
            "type" : "string"
          },
          "resolution" : {
            "type" : "string"
          },
          "dependencyResolution" : {
            "type" : "string"
          }
        }
      },
      "S3Bucket" : {
        "type" : "object",
        "properties" : {
          "accessKeyId" : {
            "type" : "string"
          },
          "secretAccessKey" : {
            "type" : "string"
          },
          "sessionToken" : {
            "type" : "string"
          },
          "s3Path" : {
            "type" : "string"
          },
          "s3Region" : {
            "type" : "string"
          }
        }
      },
      "FileInput" : {
        "required" : [ "fileName", "fileType" ],
        "type" : "object",
        "properties" : {
          "fileInputType" : {
            "type" : "string",
            "enum" : [ "MRI", "ALM" ]
          },
          "fileType" : {
            "type" : "string"
          },
          "fileSize" : {
            "type" : "integer",
            "format" : "int64"
          },
          "fileName" : {
            "type" : "string"
          }
        }
      },
      "ErrorBody" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          },
          "category" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "EdmImportInput" : {
        "type" : "object",
        "properties" : {
          "share" : {
            "type" : "boolean",
            "description" : "Indicates if the exposure set is shared with other groups."
          },
          "groups" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "List of groups that may access the exposure set.",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "RDMImportInput" : {
        "required" : [ "rdmName", "uploadId" ],
        "type" : "object",
        "properties" : {
          "uploadId" : {
            "type" : "string"
          },
          "rdmName" : {
            "type" : "string"
          },
          "edmDataSourceName" : {
            "type" : "string"
          },
          "analysisIdFilter" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "tableFilter" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "perspectiveFilter" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "exposureSetId" : {
            "type" : "string"
          },
          "share" : {
            "type" : "boolean",
						"description": "Indicates if the exposure set is shared with other groups."
          },
          "groups" : {
            "uniqueItems" : true,
						"description": "List of groups that may access the exposure set.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "S3UploadHelper" : {
        "type" : "object",
        "properties" : {
          "bucketPrefix" : {
            "type" : "string"
          },
          "awsRegion" : {
            "type" : "string"
          },
          "uploadId" : {
            "type" : "string"
          },
          "uploadKey1" : {
            "type" : "string"
          },
          "uploadKey2" : {
            "type" : "string"
          },
          "uploadKey3" : {
            "type" : "string"
          }
        }
      },
      "DataBridgeDatabase" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "serverId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "INACTIVE" ]
          },
          "version" : {
            "type" : "string"
          },
          "datasource" : {
            "type" : "string"
          },
          "dbType" : {
            "type" : "string",
            "enum" : [ "EDM", "RDM" ]
          },
          "exposureSetId" : {
            "type" : "string"
          },
          "groups" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "DataBridgeDatabaseSearchResult" : {
        "type" : "object",
        "properties" : {
          "totalResults" : {
            "type" : "integer",
            "format" : "int32"
          },
          "dataBridgeDatabases" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DataBridgeDatabase"
            }
          }
        }
      },
      "EdmRequest" : {
        "type" : "object",
        "properties" : {
          "share" : {
            "type" : "boolean",
						"description": "Indicates if the exposure set is shared with other groups."
          },
          "groups" : {
            "uniqueItems" : true,
						"description": "List of groups that may access the exposure set.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "ServerInfo" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "namespace" : {
            "type" : "string",
            "enum" : [ "RISK_MODELER", "DATA_BRIDGE" ]
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "INACTIVE" ]
          },
          "host" : {
            "type" : "string",
            "writeOnly" : true
          },
          "port" : {
            "type" : "string",
            "writeOnly" : true
          },
          "username" : {
            "type" : "string",
            "writeOnly" : true
          },
          "password" : {
            "type" : "string",
            "writeOnly" : true
          },
          "defaultServer" : {
            "type" : "boolean"
          }
        }
      },
      "DataSourceSearchResult" : {
        "type" : "object",
        "properties" : {
          "searchTotalMatch" : {
            "type" : "integer",
            "format" : "int32"
          },
          "searchItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserDatabaseV1"
            }
          }
        }
      },
      "UserDatabaseV1" : {
        "type" : "object",
        "properties" : {
          "datasourceName" : {
            "type" : "string"
          },
          "edmName" : {
            "type" : "string"
          },
          "permissionType" : {
            "type" : "integer",
            "format" : "int32"
          },
          "isDefault" : {
            "type" : "boolean"
          },
          "metrics" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "serverState" : {
            "type" : "string",
            "enum" : [ "READY", "UPGRADING", "UPGRADE_FAILED", "LOCK" ]
          },
          "serverNamespace" : {
            "type" : "string",
            "enum" : [ "RISK_MODELER", "DATA_BRIDGE" ]
          },
          "owner" : {
            "type" : "string"
          },
          "exposureSetId" : {
            "type" : "string"
          },
          "datasourceId" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "ExportInput" : {
        "required" : [ "exportType" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "The `type` attribute identifies the model type: `ExposureExportInput`, `LocationResultsExportInput`, `ResultsExportInputV2`.",
            "example" : "ExposureExportInput"
          },
          "exportType" : {
            "type" : "string",
            "description" : "The required `exportType` identifies the database to export: EDM, LocationResults, or RDM.",
            "example" : "EDM",
            "enum" : [ "EDM", "RDM", "LOCATION_RESULTS" ]
          },
          "exportFormat" : {
            "type" : "string",
            "description" : "The `exportFormat` attribute specified the format of the exported data (BAK, CSV, MDF or PARQUET). EDM and RDM data modules may be exported to the BAK and MDF formats. Analysis results may be exported to the CSV or PARQUET formats. Locations results can be exported to the CSV format.",
            "example" : "BAK",
            "enum" : [ "CSV", "PARQUET", "BAK", "MDF", "JSON" ]
          }
        },
        "discriminator" : {
          "propertyName" : "type"
        }
      },
      "ExportOptions" : {
        "type" : "object",
        "properties" : {
          "exportAccounts" : {
            "type" : "boolean"
          },
          "exportLocations" : {
            "type" : "boolean"
          },
          "exportPolicies" : {
            "type" : "boolean"
          },
          "exportTreaties" : {
            "type" : "boolean"
          },
          "exportReinsuranceInfo" : {
            "type" : "boolean"
          },
          "exportPerilDetailsInfo" : {
            "type" : "boolean"
          }
        },
        "description" : "Indicate the parts of the exposure that will be exported.",
        "example" : "\"exportAccounts\": true, \"exportLocations\": true, \"exportPolicies\": true, \"exportTreaties\": true, \"exportReinsuranceInfo\": true, \"exportPerilDetailsInfo\": true"
      },
      "ExposureExportInput" : {
        "required" : [ "exportType", "exposureIds", "exposureType", "sourceDatasource" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ExportInput"
        }, {
          "type" : "object",
          "properties" : {
            "sourceDatasource" : {
              "type" : "string",
              "description" : "The name of the source from which the exposure will be exported.",
              "example" : "Source_EDM"
            },
            "destinationDatasource" : {
              "type" : "string",
              "description" : "The name of the destination where the exposure will be exported.",
              "example" : "Destination_EDM"
            },
            "exposureType" : {
              "type" : "string",
              "description" : "The type of exposure that will be exported.",
              "example" : "ACCOUNT",
              "enum" : [ "PORTFOLIO", "ACCOUNT", "LOCATION", "POLICY", "STEP_POLICY", "TREATY", "AGGPORTFOLIO" ]
            },
            "exposureIds" : {
              "type" : "array",
              "items" : {
                "type" : "integer",
                "description" : "The IDs of the exposures that will be exported.",
                "format" : "int32"
              }
            },
            "sqlServerVersion" : {
              "type" : "string",
              "enum" : [ "2019", "2014" ]
            },
            "download" : {
              "type" : "boolean",
              "description" : "Indicate if the EDM will be downloaded.",
              "example" : true
            },
            "createnew" : {
              "type" : "boolean",
              "description" : "Indicate if the EDM will be newly created.",
              "example" : true
            },
            "exportOptions" : {
              "$ref" : "#/components/schemas/ExportOptions"
            },
            "sqlVersion" : {
              "type" : "string",
              "description" : "SQL server version of exported BAK or MDF.",
              "example" : "2014",
              "enum" : [ "2019", "2014" ],
              "default" : "2014"
            },
            "groups" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        } ]
      },
      "LocationResultsExportInput" : {
        "required" : [ "analysisIds", "exportType" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ExportInput"
        }, {
          "type" : "object",
          "properties" : {
            "analysisIds" : {
              "type" : "array",
              "items" : {
                "type" : "integer",
                "description" : "The Ids of the analyses that will be use for generating Location Result Export. Currently support exporting for only one analyses id.",
                "format" : "int32"
              }
            },
            "exportFields" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "description" : "Exported fields needed for generating of the Export Location Results file.",
                "example" : "[locationId, locationNumber, locationName]"
              }
            },
            "perspectives" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "description" : "Financial perspectives needed for generating of the Export Location Result file.",
                "example" : "[GU, GR]"
              }
            },
            "fileName" : {
              "pattern" : "^\\w((?!--)[\\w\\s:-])*\\w$|^\\w*$",
              "type" : "string",
              "description" : "The name of the file that will be generated.",
              "example" : "LocationResult"
            }
          }
        } ]
      },
      "LossDetails" : {
        "type" : "object",
        "properties" : {
          "lossType" : {
            "type" : "string",
            "description" : "Different type of losses.",
            "example" : "STATS"
          },
          "outputLevels" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Output Levels that should be saved in the result.",
              "example" : "[Admin1, Admin2, Contract, Country]"
            }
          },
          "perspectives" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Financial perspectives that should be saved in the result.",
              "example" : "[GU, GR]"
            }
          }
        },
        "description" : "List with loss details.",
        "example" : "[LossDetails_STATS, LossDetails_EP, LossDetails_LOSS_TABLE]"
      },
      "ResultsExportInput" : {
        "required" : [ "exportType" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ExportInput"
        }, {
          "type" : "object",
          "properties" : {
            "analysisId" : {
              "minimum" : 1,
              "type" : "integer",
              "description" : "ID of the analysis.",
              "format" : "int32",
              "example" : 24088
            },
            "rdmName" : {
              "maxLength" : 64,
              "minLength" : 0,
              "pattern" : "^\\w((?!--)[\\w\\s-])*\\w$|^\\w*$",
              "type" : "string",
              "description" : "The name of the RDM.",
              "example" : "RMS_RDM"
            },
            "lossDetails" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/LossDetails"
              }
            }
          }
        } ]
      },
      "ResultsExportInputV2" : {
        "required" : [ "analysisIds", "exportType" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ExportInput"
        }, {
          "type" : "object",
          "properties" : {
            "analysisIds" : {
              "maxItems" : 50,
              "minItems" : 0,
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "integer",
                "description" : "List with analyses IDs.",
                "format" : "int32"
              }
            },
            "additionalOutputs" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "description" : "List with additional outputs.",
                "example" : "[HAZARD]",
                "enum" : [ "HAZARD", "DAMAGE", "UNCERTAINTY" ]
              }
            },
            "rdmName" : {
              "maxLength" : 64,
              "minLength" : 0,
              "pattern" : "^\\w((?!--)[\\w\\s-])*\\w$|^\\w*$",
              "type" : "string",
              "description" : "The name of the RDM.",
              "example" : "RMS_RDM"
            },
            "lossDetails" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/LossDetails"
              }
            },
            "sqlServerVersion" : {
              "type" : "string",
              "enum" : [ "2019", "2014" ]
            },
            "createnew" : {
              "type" : "boolean",
              "description" : "Shows if the RDM will be newly created or not. If it's not passed, it's set to true by default.",
              "example" : false
            },
            "sqlVersion" : {
              "type" : "string",
              "description" : "SQL server version of exported BAK or MDF.",
              "example" : "2014",
              "enum" : [ "2019", "2014" ],
              "default" : "2014"
            },
            "nonWeightedPlt" : {
              "type" : "boolean"
            },
            "exportHdLossesAs" : {
              "description" : "Portfolio-level EP analysis results may be exported as <<glossary:ELT>>s or <<glossary:PLT>>s. If unspecified, HD losses are exported as ELT losses.",
              "type" : "string",
              "enum" : [ "ELT", "PLT" ]
            }
          }
        } ]
      },
      "DownloadResultsInput" : {
        "required" : [ "workflowId" ],
        "type" : "object",
        "properties" : {
          "workflowId" : {
            "type" : "string"
          },
          "lossDetails" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LossDetails"
            }
          }
        }
      },
      "AccountFileInput" : {
        "required" : [ "name", "number" ],
        "type" : "object",
        "properties" : {
          "number" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "SubmittedImportJob" : {
        "required" : [ "bucketId", "dataSourceName", "delimiter" ],
        "type" : "object",
        "properties" : {
          "bucketId" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          },
          "accountsFileId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "locationsFileId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "reinsuranceFileId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "mappingFileId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "locale" : {
            "type" : "string"
          },
          "currency" : {
            "type" : "string"
          },
          "dataSourceName" : {
            "type" : "string"
          },
          "delimiter" : {
            "type" : "string",
            "description" : "the delimiter used in all files to separate columns",
            "enum" : [ "TAB", "COMMA", "SEMICOLON" ]
          },
          "skipLines" : {
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          },
          "appendLocations" : {
            "type" : "boolean"
          },
          "geoHaz" : {
            "type" : "boolean"
          },
          "portfolioId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "importType" : {
            "type" : "string",
            "enum" : [ "MRI", "ALM" ]
          },
          "portfolioIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        }
      },
      "ImportSourceFileItem" : {
        "type" : "object",
        "properties" : {
          "source" : {
            "type" : "string"
          },
          "sourceExample" : {
            "type" : "string"
          }
        }
      },
      "ImportSourceFileResult" : {
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ImportSourceFileItem"
            }
          }
        }
      },
      "ImportMappingItem" : {
        "type" : "object",
        "properties" : {
          "source" : {
            "type" : "string"
          },
          "destination" : {
            "type" : "string"
          }
        }
      },
      "ImportMappingOutput" : {
        "required" : [ "accountItems", "locationItems", "reinsuranceItems" ],
        "type" : "object",
        "properties" : {
          "accountItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ImportMappingItem"
            }
          },
          "locationItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ImportMappingItem"
            }
          },
          "reinsuranceItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ImportMappingItem"
            }
          }
        }
      },
      "ImportMappingInput" : {
        "required" : [ "accountItems", "locationItems", "mapFileName" ],
        "type" : "object",
        "properties" : {
          "mapFileName" : {
            "type" : "string"
          },
          "accountItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ImportMappingItem"
            }
          },
          "locationItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ImportMappingItem"
            }
          },
          "reinsuranceItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ImportMappingItem"
            }
          }
        }
      },
      "DataBridgeRegisterInput" : {
        "required" : [ "datasourceName" ],
        "type" : "object",
        "properties" : {
          "serverId" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          },
          "datasourceName" : {
            "maxLength" : 80,
            "minLength" : 1,
            "pattern" : "^\\w((?!--)[\\w\\s-])*\\w$|^\\w$",
            "type" : "string"
          },
          "exposureSetId" : {
            "type" : "string"
          },
          "share" : {
            "type" : "boolean",
						"description":"Indicates if the exposure set is shared with other groups."
          },
          "groups" : {
            "uniqueItems" : true,
            "type" : "array",
						"description":"List of groups that may access the exposure set.",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "DataSourceSearchResultV2" : {
        "type" : "object",
        "properties" : {
          "searchTotalMatch" : {
            "type" : "integer",
            "format" : "int32"
          },
          "searchItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserDatabaseV2"
            }
          }
        }
      },
      "UserDatabaseV2" : {
        "type" : "object",
        "properties" : {
          "datasourceName" : {
            "type" : "string"
          },
          "edmName" : {
            "type" : "string"
          },
          "permissionType" : {
            "type" : "integer",
            "format" : "int32"
          },
          "isDefault" : {
            "type" : "boolean"
          },
          "metrics" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "serverState" : {
            "type" : "string",
            "enum" : [ "READY", "UPGRADING", "UPGRADE_FAILED", "LOCK" ]
          },
          "serverNamespace" : {
            "type" : "string",
            "enum" : [ "RISK_MODELER", "DATA_BRIDGE" ]
          },
          "owner" : {
            "type" : "string"
          },
          "exposureSetId" : {
            "type" : "string"
          },
          "serverName" : {
            "type" : "string"
          }
        }
      },
      "KeyValueStore" : {
        "type" : "object",
        "properties" : {
          "rows" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              }
            }
          }
        }
      },
      "DomainReference" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "uri" : {
            "type" : "string",
            "format" : "uri"
          }
        }
      },
      "EntityMeta" : {
        "type" : "object",
        "properties" : {
          "meta" : {
            "type" : "string",
            "format" : "uri"
          },
          "values" : {
            "type" : "string",
            "format" : "uri"
          }
        }
      },
      "DomainItem" : {
        "type" : "object",
        "properties" : {
          "domainName" : {
            "type" : "string"
          },
          "tableSpace" : {
            "type" : "string"
          },
          "tableName" : {
            "type" : "string"
          },
          "dataOwnedBy" : {
            "type" : "string"
          },
          "domainSchema" : {
            "$ref" : "#/components/schemas/DomainSchema"
          },
          "isActive" : {
            "type" : "boolean"
          }
        }
      },
      "DomainResult" : {
        "type" : "object",
        "properties" : {
          "attributesTotalMatch" : {
            "type" : "integer",
            "format" : "int64"
          },
          "domainItems" : {
            "$ref" : "#/components/schemas/DomainItem"
          }
        }
      },
      "DomainSchema" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string"
          },
          "fields" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Field"
            }
          }
        }
      },
      "Field" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          },
          "nullable" : {
            "type" : "boolean"
          },
          "primaryKey" : {
            "type" : "boolean"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          }
        }
      },
      "SecondaryModifierItem" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "SecondaryModifierResult" : {
        "type" : "object",
        "properties" : {
          "secondaryModifiersTotalMatch" : {
            "type" : "integer",
            "format" : "int64"
          },
          "secondaryModifierItem" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SecondaryModifierItem"
            }
          }
        }
      },
      "GroupDetail" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "ExposureSet" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "groups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GroupDetail"
            }
          }
        }
      },
      "ExposureSetSearchResult" : {
        "type" : "object",
        "properties" : {
          "searchTotalMatch" : {
            "type" : "integer",
            "format" : "int32"
          },
          "searchItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ExposureSet"
            }
          }
        }
      },
      "PatchExposureSetReq" : {
        "required" : [ "operation", "targetProperty", "value" ],
        "type" : "object",
        "properties" : {
          "operation" : {
            "type" : "string",
						"description": "Edit to make to the exposure set. `ADD` or `REMOVE` groups. `UPDATE` names.",
            "enum" : [ "ADD", "UPDATE", "REMOVE" ]
          }, "targetProperty" : {
            "type" : "string",
						"description": "Exposure set attribute to edit. `GROUPS` if edit is to `ADD` or `REMOVE` groups applied to exposure set. `NAME` if edit is to `UPDATE` the name of the exposure set.",
            "enum" : [ "NAME", "GROUPS" ]
          },
          "value" : {
            "type" : "string",
						"description": "Value of edited attribute. If `GROUPS`, the ID of a group. If `NAME`, the updated name of the exposure set." }
        }
      },
      "ExposureBatchOperation" : {
        "required" : [ "input", "label", "operation" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/OperationV1"
        }, {
          "type" : "object",
          "properties" : {
            "input" : {
              "required" : [ "analysisIds", "currency", "name", "numOfSimulations", "propagateDetailedLosses", "simulateToPLT" ],
              "type" : "object",
              "properties" : {
                "groupId" : {
                  "type" : "integer",
                  "format" : "int64"
                },
                "analysisIds" : {
                  "maxItems" : 2147483647,
                  "minItems" : 1,
                  "uniqueItems" : true,
                  "type" : "array",
                  "items" : {
                    "type" : "integer",
                    "format" : "int32"
                  }
                },
                "reportingWindowStart" : {
                  "maxLength" : 2147483647,
                  "minLength" : 1,
                  "type" : "string"
                },
                "numOfSimulations" : {
                  "type" : "integer",
                  "format" : "int64"
                },
                "simulationWindowStart" : {
                  "maxLength" : 2147483647,
                  "minLength" : 1,
                  "type" : "string"
                },
                "simulationWindowEnd" : {
                  "maxLength" : 2147483647,
                  "minLength" : 1,
                  "type" : "string"
                },
                "simulateToPLT" : {
                  "type" : "boolean"
                },
                "propagateDetailedLosses" : {
                  "type" : "boolean"
                },
                "regionPerilSimulationSet" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RegionPerilSimulation"
                  }
                },
                "minimizedRegionPerilSimulationSet" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RegionPerilSimulation"
                  }
                },
                "name" : {
                  "maxLength" : 64,
                  "minLength" : 1,
                  "pattern" : "^\\w((?!--)[\\w\\s:-])*\\w$|^\\w*$",
                  "type" : "string"
                },
                "description" : {
                  "type" : "string"
                },
                "currency" : {
                  "$ref" : "#/components/schemas/Currency"
                }
              }
            }
          }
        } ]
      },
      "GeoHazInput" : {
        "required" : [ "datasource", "layers" ],
        "type" : "object",
        "properties" : {
          "datasource" : {
            "type" : "string"
          },
          "id" : {
            "type" : "string"
          },
          "layers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LayerInfo"
            }
          }
        }
      },
      "GeohazOperationV1" : {
        "required" : [ "input", "label", "operation" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/OperationV1"
        }, {
          "type" : "object",
          "properties" : {
            "input" : {
              "$ref" : "#/components/schemas/GeoHazInput"
            }
          }
        } ]
      },
      "GroupOperationV1" : {
        "required" : [ "input", "label", "operation" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/OperationV1"
        }, {
          "type" : "object",
          "properties" : {
            "input" : {
              "$ref" : "#/components/schemas/GroupingInput"
            }
          }
        } ]
      },
      "GroupingInput" : {
        "required" : [ "analysisIds", "currency", "name", "numOfSimulations", "propagateDetailedLosses", "simulateToPLT" ],
        "type" : "object",
        "properties" : {
          "groupId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "analysisIds" : {
            "maxItems" : 2147483647,
            "minItems" : 1,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "reportingWindowStart" : {
            "maxLength" : 2147483647,
            "minLength" : 1,
            "type" : "string"
          },
          "numOfSimulations" : {
            "type" : "integer",
            "format" : "int64"
          },
          "simulationWindowStart" : {
            "maxLength" : 2147483647,
            "minLength" : 1,
            "type" : "string"
          },
          "simulationWindowEnd" : {
            "maxLength" : 2147483647,
            "minLength" : 1,
            "type" : "string"
          },
          "simulateToPLT" : {
            "type" : "boolean"
          },
          "propagateDetailedLosses" : {
            "type" : "boolean"
          },
          "regionPerilSimulationSet" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RegionPerilSimulation"
            }
          },
          "minimizedRegionPerilSimulationSet" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RegionPerilSimulation"
            }
          },
          "name" : {
            "maxLength" : 64,
            "minLength" : 1,
            "pattern" : "^\\w((?!--)[\\w\\s:-])*\\w$|^\\w*$",
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "currency" : {
            "$ref" : "#/components/schemas/Currency"
          }
        }
      },
      "OperationV1" : {
        "required" : [ "input", "label", "operation" ],
        "type" : "object",
        "properties" : {
          "label" : {
            "maxLength" : 16,
            "minLength" : 2,
            "pattern" : "[a-zA-Z]+[a-zA-Z0-9_]*",
            "type" : "string",
            "description" : "The unique name of the operation."
          },
          "operation" : {
            "type" : "string",
            "description" : "The `operation` attribute identifies the operation model type and API to be invoked. It can be one of `geohaz`, `process` or `group`"
          },
          "input" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "dependsOn" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "continueOnFailure" : {
            "type" : "boolean"
          }
        },
        "description" : "List containing sub-jobs of the batch workflow",
        "discriminator" : {
          "propertyName" : "operation"
        },
        "anyOf" : [ {
          "$ref" : "#/components/schemas/GeohazOperationV1"
        }, {
          "$ref" : "#/components/schemas/ProcessOperationV1"
        }, {
          "$ref" : "#/components/schemas/GroupOperationV1"
        }, {
          "$ref" : "#/components/schemas/OperationV2"
        } ]
      },
      "OperationV2" : {
        "required" : [ "input", "label", "operation" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/OperationV1"
        }, {
          "type" : "object",
          "properties" : {
            "operation" : {
              "type" : "string",
              "description" : "The `operation` attribute identifies the operation API to be invoked."
            },
            "input" : {
              "type" : "object"
            }
          }
        } ]
      },
      "ProcessOperationV1" : {
        "required" : [ "input", "label", "operation" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/OperationV1"
        }, {
          "type" : "object",
          "properties" : {
            "input" : {
              "$ref" : "#/components/schemas/WorkflowPlanProcessInput"
            }
          }
        } ]
      },
      "UserDefinedWorkflow" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "The model type: `PortfolioWorkflow` or `AccountWorkflow`. Required if workflow operations are identified by keyword (e.g. `geohaz`, `group`, `batch`). May be omitted if operations are identfied by path.",
            "example" : "PortfolioWorkflow"
          },
          "name" : {
            "maxLength" : 64,
            "minLength" : 0,
            "pattern" : "^\\w((?!--)[\\w\\s:-])*\\w$|^\\w*$",
            "type" : "string",
            "description" : "The name of the batch workflow.",
            "example" : "Batch_Workflow"
          },
          "operations" : {
            "maxItems" : 2147483647,
            "minItems" : 1,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OperationV1"
            }
          }
        }
      },
      "WorkflowPlanProcessInput" : {
        "required" : [ "currency", "edm" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "exposureType" : {
            "type" : "string",
            "enum" : [ "PORTFOLIO", "ACCOUNT", "LOCATION", "POLICY", "STEP_POLICY", "TREATY", "AGGPORTFOLIO" ]
          },
          "edm" : {
            "type" : "string"
          },
          "currency" : {
            "$ref" : "#/components/schemas/Currency"
          },
          "modelProfileId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "eventRateSchemeId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "treaties" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "jobName" : {
            "maxLength" : 64,
            "minLength" : 0,
            "pattern" : "^\\w((?!--)[\\w\\s:-])*\\w$|^\\w*$",
            "type" : "string"
          },
          "outputProfileId" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "Job" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "taskId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "workflowId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "status" : {
            "type" : "string"
          },
          "submitTime" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "input" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "output" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "priorJobs" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          },
          "percentComplete" : {
            "type" : "integer",
            "format" : "int32"
          },
          "continueOnFailure" : {
            "type" : "boolean"
          }
        }
      },
      "JobMessage" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "Workflow" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "tenantName" : {
            "type" : "string"
          },
          "userName" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "QUEUED", "RUNNING", "FINISHED", "FAILED", "CANCELLED", "PENDING", "CANCELLING", "CANCEL_REQUESTED" ]
          },
          "submitTime" : {
            "type" : "string"
          },
          "startTime" : {
            "type" : "string"
          },
          "endTime" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          },
          "jobs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Job"
            }
          },
          "summary" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "output" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "progress" : {
            "type" : "integer",
            "format" : "int32"
          },
          "messages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JobMessage"
            }
          }
        }
      },
      "WorkflowSearchResult" : {
        "type" : "object",
        "properties" : {
          "totalMatchCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "workflows" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Workflow"
            }
          }
        }
      }
    },
		"securitySchemes": {
			"RMS_Auth": {
				"type": "apiKey",
				"name": "Authorization",
				"in": "header",
				"description": "An API key is a token that enables a client application to make requests to tenant applications running on Intelligent Risk Platform.",
				"x-default": "XXXXXXXXXX"
			}
		}
	}
}
